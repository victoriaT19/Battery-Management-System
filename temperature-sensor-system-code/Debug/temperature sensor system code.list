
temperature sensor system code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800a8d8  0800a8d8  0000b8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae6c  0800ae6c  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae6c  0800ae6c  0000be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae74  0800ae74  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae74  0800ae74  0000be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae78  0800ae78  0000be78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ae7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001e8  0800b064  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800b064  0000c57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d51  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270f  00000000  00000000  0001ff69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00022678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfb  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cb0  00000000  00000000  00024473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130af  00000000  00000000  0004d123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108722  00000000  00000000  000601d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001688f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db0  00000000  00000000  00168938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a8bc 	.word	0x0800a8bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800a8bc 	.word	0x0800a8bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <select_mux_channel>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_FDCAN1_Init(void);

void select_mux_channel(uint8_t channel) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  channel & 0x01);        // S0
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f003 f9e2 	bl	8004454 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  (channel >> 1) & 0x01); // S1
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f003 f9d5 	bl	8004454 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (channel >> 2) & 0x01); // S2
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f003 f9c8 	bl	8004454 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (channel >> 3) & 0x01); // S3
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	2140      	movs	r1, #64	@ 0x40
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <select_mux_channel+0x74>)
 80010d6:	f003 f9bd 	bl	8004454 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	48000400 	.word	0x48000400

080010e8 <read_adc>:

uint16_t read_adc(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <read_adc+0x24>)
 80010ee:	f001 fc15 	bl	800291c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010f2:	f04f 31ff 	mov.w	r1, #4294967295
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <read_adc+0x24>)
 80010f8:	f001 fcf4 	bl	8002ae4 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <read_adc+0x24>)
 80010fe:	f001 fdf7 	bl	8002cf0 <HAL_ADC_GetValue>
 8001102:	4603      	mov	r3, r0
 8001104:	b29b      	uxth	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000214 	.word	0x20000214

08001110 <voltage_to_temperature>:

// Conversão simples de tensão para temperatura (ajuste se necessário)
float voltage_to_temperature(float vout)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ca      	sub	sp, #296	@ 0x128
 8001114:	af00      	add	r7, sp, #0
 8001116:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800111a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800111e:	ed83 0a00 	vstr	s0, [r3]
    const float voltage_table[] = {
 8001122:	4a64      	ldr	r2, [pc, #400]	@ (80012b4 <voltage_to_temperature+0x1a4>)
 8001124:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001128:	4611      	mov	r1, r2
 800112a:	2284      	movs	r2, #132	@ 0x84
 800112c:	4618      	mov	r0, r3
 800112e:	f006 f8fe 	bl	800732e <memcpy>
        2.05, 1.99, 1.92, 1.86, 1.80, 1.74, 1.68, 1.63, 1.59, 1.55,
        1.51, 1.48, 1.45, 1.43, 1.40, 1.38, 1.37, 1.35, 1.34, 1.33,
        1.32, 1.31, 1.30
    };

    const float temp_table[] = {
 8001132:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001136:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800113a:	4a5f      	ldr	r2, [pc, #380]	@ (80012b8 <voltage_to_temperature+0x1a8>)
 800113c:	4618      	mov	r0, r3
 800113e:	4611      	mov	r1, r2
 8001140:	2384      	movs	r3, #132	@ 0x84
 8001142:	461a      	mov	r2, r3
 8001144:	f006 f8f3 	bl	800732e <memcpy>
         10,  15,  20,  25,  30,  35,  40,  45,  50,  55,
         60,  65,  70,  75,  80,  85,  90,  95, 100, 105,
        110, 115, 120
    };

    const int table_size = sizeof(voltage_table) / sizeof(voltage_table[0]);
 8001148:	2321      	movs	r3, #33	@ 0x21
 800114a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

    // Fora da faixa
    if (vout > voltage_table[0] || vout < voltage_table[table_size - 1])
 800114e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001152:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001156:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	dc14      	bgt.n	8001192 <voltage_to_temperature+0x82>
 8001168:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800116c:	3b01      	subs	r3, #1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001174:	443b      	add	r3, r7
 8001176:	3b9c      	subs	r3, #156	@ 0x9c
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001180:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001184:	ed93 7a00 	vldr	s14, [r3]
 8001188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	d502      	bpl.n	8001198 <voltage_to_temperature+0x88>
        printf("FORA DO INTERVALO!!!\n");
 8001192:	484a      	ldr	r0, [pc, #296]	@ (80012bc <voltage_to_temperature+0x1ac>)
 8001194:	f005 ff4a 	bl	800702c <puts>

    // Procura o intervalo correto
    for (int i = 0; i < table_size - 1; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800119e:	e078      	b.n	8001292 <voltage_to_temperature+0x182>
    {
        if (vout <= voltage_table[i] && vout >= voltage_table[i + 1])
 80011a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011aa:	443b      	add	r3, r7
 80011ac:	3b9c      	subs	r3, #156	@ 0x9c
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80011b6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d85f      	bhi.n	8001288 <voltage_to_temperature+0x178>
 80011c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011cc:	3301      	adds	r3, #1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011d4:	443b      	add	r3, r7
 80011d6:	3b9c      	subs	r3, #156	@ 0x9c
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80011e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	db4a      	blt.n	8001288 <voltage_to_temperature+0x178>
        {
            // Interpolação linear
            float v1 = voltage_table[i];
 80011f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011fc:	443b      	add	r3, r7
 80011fe:	3b9c      	subs	r3, #156	@ 0x9c
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            float v2 = voltage_table[i + 1];
 8001206:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800120a:	3301      	adds	r3, #1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001212:	443b      	add	r3, r7
 8001214:	3b9c      	subs	r3, #156	@ 0x9c
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            float t1 = temp_table[i];
 800121c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001220:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8001224:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            float t2 = temp_table[i + 1];
 8001232:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001236:	3301      	adds	r3, #1
 8001238:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800123c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            return t1 + ((vout - v1) / (v2 - v1)) * (t2 - t1);
 800124a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800124e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001252:	ed93 7a00 	vldr	s14, [r3]
 8001256:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 800125a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800125e:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8001262:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800126e:	edd7 6a44 	vldr	s13, [r7, #272]	@ 0x110
 8001272:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8001276:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	e00e      	b.n	80012a6 <voltage_to_temperature+0x196>
    for (int i = 0; i < table_size - 1; i++)
 8001288:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800128c:	3301      	adds	r3, #1
 800128e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001292:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001296:	3b01      	subs	r3, #1
 8001298:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800129c:	429a      	cmp	r2, r3
 800129e:	f6ff af7f 	blt.w	80011a0 <voltage_to_temperature+0x90>
        }
    }

    // Se não encontrou (por segurança)
    return -999.0f;
 80012a2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80012c0 <voltage_to_temperature+0x1b0>
}
 80012a6:	eeb0 0a67 	vmov.f32	s0, s15
 80012aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800a8f0 	.word	0x0800a8f0
 80012b8:	0800a974 	.word	0x0800a974
 80012bc:	0800a8d8 	.word	0x0800a8d8
 80012c0:	c479c000 	.word	0xc479c000

080012c4 <send_address_claim>:

void send_address_claim() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	@ 0x30
 80012c8:	af00      	add	r7, sp, #0
    FDCAN_TxHeaderTypeDef txHeader;
    uint8_t data[8] = {0xF3, 0x00, 0x80, 0x00, 0x40, 0x1E, 0x90, 0x00};
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <send_address_claim+0x50>)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d2:	e883 0003 	stmia.w	r3, {r0, r1}

    txHeader.Identifier = 0x18EEFF80;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <send_address_claim+0x54>)
 80012d8:	60fb      	str	r3, [r7, #12]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 80012da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012de:	613b      	str	r3, [r7, #16]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	61bb      	str	r3, [r7, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.MessageMarker = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data);
 80012fc:	1d3a      	adds	r2, r7, #4
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <send_address_claim+0x58>)
 8001306:	f002 fdf7 	bl	8003ef8 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800a9f8 	.word	0x0800a9f8
 8001318:	18eeff80 	.word	0x18eeff80
 800131c:	20000280 	.word	0x20000280

08001320 <send_thermistor_summary>:

void send_thermistor_summary(int8_t minT, int8_t maxT, int8_t avgT, uint8_t count, uint8_t id_max, uint8_t id_min) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b091      	sub	sp, #68	@ 0x44
 8001324:	af00      	add	r7, sp, #0
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	4603      	mov	r3, r0
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	460b      	mov	r3, r1
 8001338:	717b      	strb	r3, [r7, #5]
 800133a:	4613      	mov	r3, r2
 800133c:	713b      	strb	r3, [r7, #4]
    FDCAN_TxHeaderTypeDef txHeader;
    uint8_t data[8];

    data[0] = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	733b      	strb	r3, [r7, #12]
    data[1] = minT;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	737b      	strb	r3, [r7, #13]
    data[2] = maxT;
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	73bb      	strb	r3, [r7, #14]
    data[3] = avgT;
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	73fb      	strb	r3, [r7, #15]
    data[4] = count;
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	743b      	strb	r3, [r7, #16]
    data[5] = id_max;
 8001352:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001356:	747b      	strb	r3, [r7, #17]
    data[6] = id_min;
 8001358:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800135c:	74bb      	strb	r3, [r7, #18]

    uint16_t checksum = 0x39 + 8;
 800135e:	2341      	movs	r3, #65	@ 0x41
 8001360:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    for (int i = 0; i < 7; i++) checksum += data[i];
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001366:	e00b      	b.n	8001380 <send_thermistor_summary+0x60>
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001376:	4413      	add	r3, r2
 8001378:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800137a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137c:	3301      	adds	r3, #1
 800137e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001382:	2b06      	cmp	r3, #6
 8001384:	ddf0      	ble.n	8001368 <send_thermistor_summary+0x48>
    data[7] = (uint8_t)(checksum & 0xFF);
 8001386:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001388:	b2db      	uxtb	r3, r3
 800138a:	74fb      	strb	r3, [r7, #19]

    txHeader.Identifier = 0x1839F380;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <send_thermistor_summary+0xac>)
 800138e:	617b      	str	r3, [r7, #20]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 8001390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001394:	61bb      	str	r3, [r7, #24]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    txHeader.DataLength = FDCAN_DLC_BYTES_8;
 800139a:	2308      	movs	r3, #8
 800139c:	623b      	str	r3, [r7, #32]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	@ 0x30
    txHeader.MessageMarker = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34

    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data);
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <send_thermistor_summary+0xb0>)
 80013be:	f002 fd9b 	bl	8003ef8 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80013c2:	bf00      	nop
 80013c4:	3744      	adds	r7, #68	@ 0x44
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	1839f380 	.word	0x1839f380
 80013d0:	20000280 	.word	0x20000280

080013d4 <main>:

int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fe25 	bl	8002028 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f907 	bl	80015f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 fa0f 	bl	8001804 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013e6:	f000 f94f 	bl	8001688 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80013ea:	f000 f9c5 	bl	8001778 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  // Inicializa o vetor

  for (int i = 0; i < 16; i++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e014      	b.n	800141e <main+0x4a>
      mux_raw[i] = 0;
 80013f4:	4a75      	ldr	r2, [pc, #468]	@ (80015cc <main+0x1f8>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2100      	movs	r1, #0
 80013fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      mux_voltage[i] = 0.0f;
 80013fe:	4a74      	ldr	r2, [pc, #464]	@ (80015d0 <main+0x1fc>)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
      mux_temp[i] = -999.0f;
 800140c:	4a71      	ldr	r2, [pc, #452]	@ (80015d4 <main+0x200>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	4a70      	ldr	r2, [pc, #448]	@ (80015d8 <main+0x204>)
 8001416:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 16; i++) {
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	dde7      	ble.n	80013f4 <main+0x20>
  }
  last_print_time = HAL_GetTick();
 8001424:	f000 fe64 	bl	80020f0 <HAL_GetTick>
 8001428:	4603      	mov	r3, r0
 800142a:	4a6c      	ldr	r2, [pc, #432]	@ (80015dc <main+0x208>)
 800142c:	6013      	str	r3, [r2, #0]

  HAL_FDCAN_Start(&hfdcan1); // Inicializa a CAN
 800142e:	486c      	ldr	r0, [pc, #432]	@ (80015e0 <main+0x20c>)
 8001430:	f002 fd3a 	bl	8003ea8 <HAL_FDCAN_Start>


  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fc63 	bl	8001d00 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800143a:	2101      	movs	r1, #1
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fc95 	bl	8001d6c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001442:	4b68      	ldr	r3, [pc, #416]	@ (80015e4 <main+0x210>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001448:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800144a:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <main+0x210>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001450:	4b64      	ldr	r3, [pc, #400]	@ (80015e4 <main+0x210>)
 8001452:	2200      	movs	r2, #0
 8001454:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001456:	4b63      	ldr	r3, [pc, #396]	@ (80015e4 <main+0x210>)
 8001458:	2200      	movs	r2, #0
 800145a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800145c:	4b61      	ldr	r3, [pc, #388]	@ (80015e4 <main+0x210>)
 800145e:	2200      	movs	r2, #0
 8001460:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001462:	4960      	ldr	r1, [pc, #384]	@ (80015e4 <main+0x210>)
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fd0d 	bl	8001e84 <BSP_COM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <main+0xa0>
  {
    Error_Handler();
 8001470:	f000 fa36 	bl	80018e0 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - last_print_time >= 500) {
 8001474:	f000 fe3c 	bl	80020f0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <main+0x208>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001484:	d3f6      	bcc.n	8001474 <main+0xa0>
	      float soma = 0;
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
	      int8_t minT = 127, maxT = -128;
 800148c:	237f      	movs	r3, #127	@ 0x7f
 800148e:	75fb      	strb	r3, [r7, #23]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	75bb      	strb	r3, [r7, #22]
	      uint8_t id_min = 0, id_max = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	757b      	strb	r3, [r7, #21]
 8001498:	2300      	movs	r3, #0
 800149a:	753b      	strb	r3, [r7, #20]

	      for (uint8_t i = 0; i < 16; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	74fb      	strb	r3, [r7, #19]
 80014a0:	e069      	b.n	8001576 <main+0x1a2>
	          select_mux_channel(i);
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fde3 	bl	8001070 <select_mux_channel>
	          HAL_Delay(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f000 fe2c 	bl	8002108 <HAL_Delay>
	          uint16_t raw = read_adc();
 80014b0:	f7ff fe1a 	bl	80010e8 <read_adc>
 80014b4:	4603      	mov	r3, r0
 80014b6:	823b      	strh	r3, [r7, #16]
	          float volt = (raw / 4095.0f) * 3.3f;
 80014b8:	8a3b      	ldrh	r3, [r7, #16]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c2:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80015e8 <main+0x214>
 80014c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ca:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80015ec <main+0x218>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	edc7 7a03 	vstr	s15, [r7, #12]
	          float temp = voltage_to_temperature(volt);
 80014d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80014da:	f7ff fe19 	bl	8001110 <voltage_to_temperature>
 80014de:	ed87 0a02 	vstr	s0, [r7, #8]

	          mux_raw[i] = raw;
 80014e2:	7cfb      	ldrb	r3, [r7, #19]
 80014e4:	4939      	ldr	r1, [pc, #228]	@ (80015cc <main+0x1f8>)
 80014e6:	8a3a      	ldrh	r2, [r7, #16]
 80014e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	          mux_voltage[i] = volt;
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <main+0x1fc>)
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	601a      	str	r2, [r3, #0]
	          mux_temp[i] = temp;
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	4a36      	ldr	r2, [pc, #216]	@ (80015d4 <main+0x200>)
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	601a      	str	r2, [r3, #0]

	          if (temp > maxT) {
 8001504:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	ed97 7a02 	vldr	s14, [r7, #8]
 8001514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	dd09      	ble.n	8001532 <main+0x15e>
	              maxT = temp;
 800151e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001526:	edc7 7a01 	vstr	s15, [r7, #4]
 800152a:	793b      	ldrb	r3, [r7, #4]
 800152c:	75bb      	strb	r3, [r7, #22]
	              id_max = i;
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	753b      	strb	r3, [r7, #20]
	          }
	          if (temp < minT) {
 8001532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d509      	bpl.n	8001560 <main+0x18c>
	              minT = temp;
 800154c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001554:	edc7 7a01 	vstr	s15, [r7, #4]
 8001558:	793b      	ldrb	r3, [r7, #4]
 800155a:	75fb      	strb	r3, [r7, #23]
	              id_min = i;
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	757b      	strb	r3, [r7, #21]
	          }

	          soma += temp;
 8001560:	ed97 7a06 	vldr	s14, [r7, #24]
 8001564:	edd7 7a02 	vldr	s15, [r7, #8]
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	edc7 7a06 	vstr	s15, [r7, #24]
	      for (uint8_t i = 0; i < 16; i++) {
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	3301      	adds	r3, #1
 8001574:	74fb      	strb	r3, [r7, #19]
 8001576:	7cfb      	ldrb	r3, [r7, #19]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d992      	bls.n	80014a2 <main+0xce>
	      }

	      int8_t avgT = roundf(soma / 16.0f);
 800157c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001580:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001584:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	f004 fdae 	bl	80060ec <roundf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001598:	edc7 7a01 	vstr	s15, [r7, #4]
 800159c:	793b      	ldrb	r3, [r7, #4]
 800159e:	74bb      	strb	r3, [r7, #18]

	      send_address_claim();
 80015a0:	f7ff fe90 	bl	80012c4 <send_address_claim>
	      send_thermistor_summary(minT, maxT, avgT, 16, id_max, id_min);
 80015a4:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80015a8:	f997 1016 	ldrsb.w	r1, [r7, #22]
 80015ac:	f997 0017 	ldrsb.w	r0, [r7, #23]
 80015b0:	7d7b      	ldrb	r3, [r7, #21]
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	7d3b      	ldrb	r3, [r7, #20]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2310      	movs	r3, #16
 80015ba:	f7ff feb1 	bl	8001320 <send_thermistor_summary>

	      last_print_time = HAL_GetTick();
 80015be:	f000 fd97 	bl	80020f0 <HAL_GetTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <main+0x208>)
 80015c6:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_print_time >= 500) {
 80015c8:	e754      	b.n	8001474 <main+0xa0>
 80015ca:	bf00      	nop
 80015cc:	200002e4 	.word	0x200002e4
 80015d0:	20000304 	.word	0x20000304
 80015d4:	20000344 	.word	0x20000344
 80015d8:	c479c000 	.word	0xc479c000
 80015dc:	20000384 	.word	0x20000384
 80015e0:	20000280 	.word	0x20000280
 80015e4:	20000204 	.word	0x20000204
 80015e8:	457ff000 	.word	0x457ff000
 80015ec:	40533333 	.word	0x40533333

080015f0 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	@ 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2238      	movs	r2, #56	@ 0x38
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 fe16 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001612:	2000      	movs	r0, #0
 8001614:	f002 ff36 	bl	8004484 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001622:	2340      	movs	r3, #64	@ 0x40
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162a:	2302      	movs	r3, #2
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800162e:	2304      	movs	r3, #4
 8001630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001632:	2355      	movs	r3, #85	@ 0x55
 8001634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4618      	mov	r0, r3
 8001648:	f002 ffd0 	bl	80045ec <HAL_RCC_OscConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001652:	f000 f945 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001656:	230f      	movs	r3, #15
 8001658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165a:	2303      	movs	r3, #3
 800165c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2104      	movs	r1, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f003 face 	bl	8004c10 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800167a:	f000 f931 	bl	80018e0 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3750      	adds	r7, #80	@ 0x50
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	@ 0x30
 800168c:	af00      	add	r7, sp, #0


  ADC_MultiModeTypeDef multimode = {0};
 800168e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2220      	movs	r2, #32
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 fdc5 	bl	8007230 <memset>


  /** Common config
  */
  hadc1.Instance = ADC1;
 80016a6:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016ae:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016c8:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016d4:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <MX_ADC1_Init+0xe8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <MX_ADC1_Init+0xe8>)
 8001704:	2200      	movs	r2, #0
 8001706:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <MX_ADC1_Init+0xe8>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001710:	4817      	ldr	r0, [pc, #92]	@ (8001770 <MX_ADC1_Init+0xe8>)
 8001712:	f000 ff47 	bl	80025a4 <HAL_ADC_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800171c:	f000 f8e0 	bl	80018e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4811      	ldr	r0, [pc, #68]	@ (8001770 <MX_ADC1_Init+0xe8>)
 800172c:	f001 ffea 	bl	8003704 <HAL_ADCEx_MultiModeConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001736:	f000 f8d3 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_ADC1_Init+0xec>)
 800173c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800173e:	2306      	movs	r3, #6
 8001740:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001746:	237f      	movs	r3, #127	@ 0x7f
 8001748:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800174a:	2304      	movs	r3, #4
 800174c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <MX_ADC1_Init+0xe8>)
 8001758:	f001 fad8 	bl	8002d0c <HAL_ADC_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001762:	f000 f8bd 	bl	80018e0 <Error_Handler>
  }

}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	@ 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000214 	.word	0x20000214
 8001774:	04300002 	.word	0x04300002

08001778 <MX_FDCAN1_Init>:

static void MX_FDCAN1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 800177e:	4a20      	ldr	r2, [pc, #128]	@ (8001800 <MX_FDCAN1_Init+0x88>)
 8001780:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 8001796:	2200      	movs	r2, #0
 8001798:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 800179c:	2200      	movs	r2, #0
 800179e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 34;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017a8:	2222      	movs	r2, #34	@ 0x22
 80017aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017b4:	2204      	movs	r2, #4
 80017b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017ba:	2205      	movs	r2, #5
 80017bc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017d8:	2200      	movs	r2, #0
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017de:	2200      	movs	r2, #0
 80017e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_FDCAN1_Init+0x84>)
 80017ea:	f002 fa03 	bl	8003bf4 <HAL_FDCAN_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80017f4:	f000 f874 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000280 	.word	0x20000280
 8001800:	40006400 	.word	0x40006400

08001804 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001838:	f043 0320 	orr.w	r3, r3, #32
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a22      	ldr	r2, [pc, #136]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_GPIO_Init+0xd4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001884:	f002 fde6 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2140      	movs	r1, #64	@ 0x40
 800188c:	4813      	ldr	r0, [pc, #76]	@ (80018dc <MX_GPIO_Init+0xd8>)
 800188e:	f002 fde1 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001892:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ae:	f002 fc4f 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b2:	2340      	movs	r3, #64	@ 0x40
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_GPIO_Init+0xd8>)
 80018ca:	f002 fc41 	bl	8004150 <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400

080018e0 <Error_Handler>:

void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <Error_Handler+0x8>

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x44>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <HAL_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_MspInit+0x44>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_MspInit+0x44>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_MspInit+0x44>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	6593      	str	r3, [r2, #88]	@ 0x58
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_MspInit+0x44>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001922:	f002 fe53 	bl	80045cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09e      	sub	sp, #120	@ 0x78
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	2254      	movs	r2, #84	@ 0x54
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fc6b 	bl	8007230 <memset>
  if(hadc->Instance==ADC1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001962:	d134      	bne.n	80019ce <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001968:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800196a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800196e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fb67 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001980:	f7ff ffae 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a13      	ldr	r2, [pc, #76]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 800198a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_ADC_MspInit+0xa4>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b4:	2301      	movs	r3, #1
 80019b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b8:	2303      	movs	r3, #3
 80019ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019c4:	4619      	mov	r1, r3
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ca:	f002 fbc1 	bl	8004150 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	3778      	adds	r7, #120	@ 0x78
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b09e      	sub	sp, #120	@ 0x78
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2254      	movs	r2, #84	@ 0x54
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fc17 	bl	8007230 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <HAL_FDCAN_MspInit+0xac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d139      	bne.n	8001a80 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a16:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fb13 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a28:	f7ff ff5a 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_FDCAN_MspInit+0xb0>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a6e:	2309      	movs	r3, #9
 8001a70:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7c:	f002 fb68 	bl	8004150 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001a80:	bf00      	nop
 8001a82:	3778      	adds	r7, #120	@ 0x78
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40006400 	.word	0x40006400
 8001a8c:	40021000 	.word	0x40021000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae6:	f000 faf1 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f9a8 	bl	8001e48 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_kill>:

int _kill(int pid, int sig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b16:	f005 fbdd 	bl	80072d4 <__errno>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2216      	movs	r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_exit>:

void _exit (int status)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe7 	bl	8001b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3e:	bf00      	nop
 8001b40:	e7fd      	b.n	8001b3e <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
  }

  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e009      	b.n	8001ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f9d6 	bl	8001f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf1      	blt.n	8001b8e <_write+0x12>
  }
  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_close>:

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_isatty>:

int _isatty(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f005 fb42 	bl	80072d4 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000388 	.word	0x20000388
 8001c84:	20000580 	.word	0x20000580

08001c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7ff ffea 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	@ (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f005 fb01 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7ff fb79 	bl	80013d4 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   r0, =_estack
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001cf0:	0800ae7c 	.word	0x0800ae7c
  ldr r2, =_sbss
 8001cf4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001cf8:	2000057c 	.word	0x2000057c

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <BSP_LED_Init+0x64>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <BSP_LED_Init+0x64>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <BSP_LED_Init+0x64>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001d22:	2320      	movs	r3, #32
 8001d24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <BSP_LED_Init+0x68>)
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fa05 	bl	8004150 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <BSP_LED_Init+0x68>)
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	2120      	movs	r1, #32
 8001d50:	2200      	movs	r2, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 fb7e 	bl	8004454 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	20000004 	.word	0x20000004

08001d6c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <BSP_PB_Init+0xc4>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <BSP_PB_Init+0xc4>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <BSP_PB_Init+0xc4>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001d94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d98:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4a21      	ldr	r2, [pc, #132]	@ (8001e34 <BSP_PB_Init+0xc8>)
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	f107 020c 	add.w	r2, r7, #12
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 f9c8 	bl	8004150 <HAL_GPIO_Init>
 8001dc0:	e031      	b.n	8001e26 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001dc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dc6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4a1a      	ldr	r2, [pc, #104]	@ (8001e34 <BSP_PB_Init+0xc8>)
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 f9ba 	bl	8004150 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <BSP_PB_Init+0xcc>)
 8001de2:	441a      	add	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4915      	ldr	r1, [pc, #84]	@ (8001e3c <BSP_PB_Init+0xd0>)
 8001de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f001 febc 	bl	8003b6c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <BSP_PB_Init+0xcc>)
 8001dfa:	1898      	adds	r0, r3, r2
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <BSP_PB_Init+0xd4>)
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	f001 fe93 	bl	8003b32 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e0c:	2028      	movs	r0, #40	@ 0x28
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a0c      	ldr	r2, [pc, #48]	@ (8001e44 <BSP_PB_Init+0xd8>)
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	2200      	movs	r2, #0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f001 fe56 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e1e:	2328      	movs	r3, #40	@ 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 fe6c 	bl	8003afe <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	20000008 	.word	0x20000008
 8001e38:	2000038c 	.word	0x2000038c
 8001e3c:	0800aa18 	.word	0x0800aa18
 8001e40:	20000010 	.word	0x20000010
 8001e44:	20000014 	.word	0x20000014

08001e48 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <BSP_PB_IRQHandler+0x20>)
 8001e58:	4413      	add	r3, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 fe9a 	bl	8003b94 <HAL_EXTI_IRQHandler>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000038c 	.word	0x2000038c

08001e6c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d903      	bls.n	8001ea2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e9a:	f06f 0301 	mvn.w	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e018      	b.n	8001ed4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2294      	movs	r2, #148	@ 0x94
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <BSP_COM_Init+0x5c>)
 8001eac:	4413      	add	r3, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f86e 	bl	8001f90 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2294      	movs	r2, #148	@ 0x94
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <BSP_COM_Init+0x5c>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f80e 	bl	8001ee4 <MX_LPUART1_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001ece:	f06f 0303 	mvn.w	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000394 	.word	0x20000394

08001ee4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <MX_LPUART1_Init+0x60>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	220c      	movs	r2, #12
 8001f02:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	895b      	ldrh	r3, [r3, #10]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	891b      	ldrh	r3, [r3, #8]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	899b      	ldrh	r3, [r3, #12]
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f30:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f003 fad6 	bl	80054e4 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <__io_putchar+0x30>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2394      	movs	r3, #148	@ 0x94
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <__io_putchar+0x34>)
 8001f5e:	1898      	adds	r0, r3, r2
 8001f60:	1d39      	adds	r1, r7, #4
 8001f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f66:	2201      	movs	r2, #1
 8001f68:	f003 fb16 	bl	8005598 <HAL_UART_Transmit>
  return ch;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000428 	.word	0x20000428
 8001f7c:	20000394 	.word	0x20000394

08001f80 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ff71 	bl	8001e6c <BSP_PB_Callback>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001f98:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <COM1_MspInit+0x94>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <COM1_MspInit+0x94>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <COM1_MspInit+0x94>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <COM1_MspInit+0x94>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <COM1_MspInit+0x94>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <COM1_MspInit+0x94>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <COM1_MspInit+0x94>)
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <COM1_MspInit+0x94>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <COM1_MspInit+0x94>)
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffe:	f002 f8a7 	bl	8004150 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002002:	2308      	movs	r3, #8
 8002004:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800200a:	230c      	movs	r3, #12
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002018:	f002 f89a 	bl	8004150 <HAL_GPIO_Init>
}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	@ 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002032:	2003      	movs	r0, #3
 8002034:	f001 fd3e 	bl	8003ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002038:	2000      	movs	r0, #0
 800203a:	f000 f80d 	bl	8002058 <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e001      	b.n	800204e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204a:	f7ff fc4f 	bl	80018ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204e:	79fb      	ldrb	r3, [r7, #7]

}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_InitTick+0x68>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d022      	beq.n	80020b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_InitTick+0x6c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <HAL_InitTick+0x68>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002078:	fbb1 f3f3 	udiv	r3, r1, r3
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fd4a 	bl	8003b1a <HAL_SYSTICK_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10f      	bne.n	80020ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	d809      	bhi.n	80020a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002092:	2200      	movs	r2, #0
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	f04f 30ff 	mov.w	r0, #4294967295
 800209a:	f001 fd16 	bl	8003aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <HAL_InitTick+0x70>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e007      	b.n	80020b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e004      	b.n	80020b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000001c 	.word	0x2000001c
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000018 	.word	0x20000018

080020cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_IncTick+0x1c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <HAL_IncTick+0x20>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	4a03      	ldr	r2, [pc, #12]	@ (80020e8 <HAL_IncTick+0x1c>)
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	2000042c 	.word	0x2000042c
 80020ec:	2000001c 	.word	0x2000001c

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000042c 	.word	0x2000042c

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d004      	beq.n	800212c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_Delay+0x40>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212c:	bf00      	nop
 800212e:	f7ff ffdf 	bl	80020f0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	429a      	cmp	r2, r3
 800213c:	d8f7      	bhi.n	800212e <HAL_Delay+0x26>
  {
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000001c 	.word	0x2000001c

0800214c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3360      	adds	r3, #96	@ 0x60
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <LL_ADC_SetOffset+0x44>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	03fff000 	.word	0x03fff000

080021fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3360      	adds	r3, #96	@ 0x60
 800220a:	461a      	mov	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3360      	adds	r3, #96	@ 0x60
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	431a      	orrs	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3360      	adds	r3, #96	@ 0x60
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3360      	adds	r3, #96	@ 0x60
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	615a      	str	r2, [r3, #20]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002316:	b480      	push	{r7}
 8002318:	b087      	sub	sp, #28
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3330      	adds	r3, #48	@ 0x30
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	4413      	add	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	211f      	movs	r1, #31
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 011f 	and.w	r1, r3, #31
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3314      	adds	r3, #20
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0e5b      	lsrs	r3, r3, #25
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	4413      	add	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2107      	movs	r1, #7
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0d1b      	lsrs	r3, r3, #20
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	431a      	orrs	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0318 	and.w	r3, r3, #24
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023e8:	40d9      	lsrs	r1, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	400b      	ands	r3, r1
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	0007ffff 	.word	0x0007ffff

0800240c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 031f 	and.w	r3, r3, #31
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6093      	str	r3, [r2, #8]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247c:	d101      	bne.n	8002482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024cc:	d101      	bne.n	80024d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_ADC_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d101      	bne.n	800256e <LL_ADC_REG_IsConversionOngoing+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d101      	bne.n	8002594 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1a9      	b.n	8002912 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff f9b1 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff3f 	bl	8002468 <LL_ADC_IsDeepPowerDownEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff25 	bl	8002444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff5a 	bl	80024b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff3e 	bl	8002490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002614:	4b9c      	ldr	r3, [pc, #624]	@ (8002888 <HAL_ADC_Init+0x2e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	4a9c      	ldr	r2, [pc, #624]	@ (800288c <HAL_ADC_Init+0x2e8>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff3c 	bl	80024b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff75 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 800266c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8142 	bne.w	8002900 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 813e 	bne.w	8002900 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff35 	bl	8002508 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d141      	bne.n	8002728 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_Init+0x114>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	@ (8002890 <HAL_ADC_Init+0x2ec>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10f      	bne.n	80026d8 <HAL_ADC_Init+0x134>
 80026b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026bc:	f7ff ff24 	bl	8002508 <LL_ADC_IsEnabled>
 80026c0:	4604      	mov	r4, r0
 80026c2:	4873      	ldr	r0, [pc, #460]	@ (8002890 <HAL_ADC_Init+0x2ec>)
 80026c4:	f7ff ff20 	bl	8002508 <LL_ADC_IsEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4323      	orrs	r3, r4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e012      	b.n	80026fe <HAL_ADC_Init+0x15a>
 80026d8:	486e      	ldr	r0, [pc, #440]	@ (8002894 <HAL_ADC_Init+0x2f0>)
 80026da:	f7ff ff15 	bl	8002508 <LL_ADC_IsEnabled>
 80026de:	4604      	mov	r4, r0
 80026e0:	486d      	ldr	r0, [pc, #436]	@ (8002898 <HAL_ADC_Init+0x2f4>)
 80026e2:	f7ff ff11 	bl	8002508 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	431c      	orrs	r4, r3
 80026ea:	486c      	ldr	r0, [pc, #432]	@ (800289c <HAL_ADC_Init+0x2f8>)
 80026ec:	f7ff ff0c 	bl	8002508 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270a:	d004      	beq.n	8002716 <HAL_ADC_Init+0x172>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5f      	ldr	r2, [pc, #380]	@ (8002890 <HAL_ADC_Init+0x2ec>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_ADC_Init+0x176>
 8002716:	4a62      	ldr	r2, [pc, #392]	@ (80028a0 <HAL_ADC_Init+0x2fc>)
 8002718:	e000      	b.n	800271c <HAL_ADC_Init+0x178>
 800271a:	4a62      	ldr	r2, [pc, #392]	@ (80028a4 <HAL_ADC_Init+0x300>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f7ff fd12 	bl	800214c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f5b      	ldrb	r3, [r3, #29]
 800272c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800273e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	045b      	lsls	r3, r3, #17
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b48      	ldr	r3, [pc, #288]	@ (80028a8 <HAL_ADC_Init+0x304>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	430b      	orrs	r3, r1
 8002792:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fee4 	bl	800257c <LL_ADC_INJ_IsConversionOngoing>
 80027b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d17f      	bne.n	80028bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d17c      	bne.n	80028bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027de:	f023 0302 	bic.w	r3, r3, #2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800280c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6911      	ldr	r1, [r2, #16]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002822:	e013      	b.n	800284c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002848:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12a      	bne.n	80028ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002878:	430a      	orrs	r2, r1
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e019      	b.n	80028bc <HAL_ADC_Init+0x318>
 8002888:	20000000 	.word	0x20000000
 800288c:	053e2d63 	.word	0x053e2d63
 8002890:	50000100 	.word	0x50000100
 8002894:	50000400 	.word	0x50000400
 8002898:	50000500 	.word	0x50000500
 800289c:	50000600 	.word	0x50000600
 80028a0:	50000300 	.word	0x50000300
 80028a4:	50000700 	.word	0x50000700
 80028a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f023 010f 	bic.w	r1, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
 80028dc:	e007      	b.n	80028ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 020f 	bic.w	r2, r2, #15
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028fe:	e007      	b.n	8002910 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002910:	7ffb      	ldrb	r3, [r7, #31]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop

0800291c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800292c:	d004      	beq.n	8002938 <HAL_ADC_Start+0x1c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a67      	ldr	r2, [pc, #412]	@ (8002ad0 <HAL_ADC_Start+0x1b4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_ADC_Start+0x20>
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <HAL_ADC_Start+0x1b8>)
 800293a:	e000      	b.n	800293e <HAL_ADC_Start+0x22>
 800293c:	4b66      	ldr	r3, [pc, #408]	@ (8002ad8 <HAL_ADC_Start+0x1bc>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fd64 	bl	800240c <LL_ADC_GetMultimode>
 8002944:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fe03 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80b4 	bne.w	8002ac0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Start+0x4a>
 8002962:	2302      	movs	r3, #2
 8002964:	e0af      	b.n	8002ac6 <HAL_ADC_Start+0x1aa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fe0c 	bl	800358c <ADC_Enable>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 809b 	bne.w	8002ab6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad0 <HAL_ADC_Start+0x1b4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_ADC_Start+0x96>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4e      	ldr	r2, [pc, #312]	@ (8002adc <HAL_ADC_Start+0x1c0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_Start+0x92>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_Start+0x9a>
 80029ae:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae0 <HAL_ADC_Start+0x1c4>)
 80029b0:	e001      	b.n	80029b6 <HAL_ADC_Start+0x9a>
 80029b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d002      	beq.n	80029c4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	f023 0206 	bic.w	r2, r3, #6
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80029ea:	e002      	b.n	80029f2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	221c      	movs	r2, #28
 80029f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a32      	ldr	r2, [pc, #200]	@ (8002ad0 <HAL_ADC_Start+0x1b4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_ADC_Start+0x104>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a32      	ldr	r2, [pc, #200]	@ (8002adc <HAL_ADC_Start+0x1c0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d002      	beq.n	8002a1c <HAL_ADC_Start+0x100>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_Start+0x108>
 8002a1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ae0 <HAL_ADC_Start+0x1c4>)
 8002a1e:	e001      	b.n	8002a24 <HAL_ADC_Start+0x108>
 8002a20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d008      	beq.n	8002a3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d002      	beq.n	8002a3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	d114      	bne.n	8002a68 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fd64 	bl	800252e <LL_ADC_REG_StartConversion>
 8002a66:	e02d      	b.n	8002ac4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <HAL_ADC_Start+0x1b4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_ADC_Start+0x176>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <HAL_ADC_Start+0x1c0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_ADC_Start+0x172>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_Start+0x17a>
 8002a8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ae0 <HAL_ADC_Start+0x1c4>)
 8002a90:	e001      	b.n	8002a96 <HAL_ADC_Start+0x17a>
 8002a92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00f      	beq.n	8002ac4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab4:	e006      	b.n	8002ac4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002abe:	e001      	b.n	8002ac4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	50000100 	.word	0x50000100
 8002ad4:	50000300 	.word	0x50000300
 8002ad8:	50000700 	.word	0x50000700
 8002adc:	50000500 	.word	0x50000500
 8002ae0:	50000400 	.word	0x50000400

08002ae4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x1e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a77      	ldr	r2, [pc, #476]	@ (8002cdc <HAL_ADC_PollForConversion+0x1f8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x22>
 8002b02:	4b77      	ldr	r3, [pc, #476]	@ (8002ce0 <HAL_ADC_PollForConversion+0x1fc>)
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_PollForConversion+0x24>
 8002b06:	4b77      	ldr	r3, [pc, #476]	@ (8002ce4 <HAL_ADC_PollForConversion+0x200>)
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fc7f 	bl	800240c <LL_ADC_GetMultimode>
 8002b0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d102      	bne.n	8002b1e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b18:	2308      	movs	r3, #8
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	e037      	b.n	8002b8e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d002      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d111      	bne.n	8002b54 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0c1      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b4e:	2304      	movs	r3, #4
 8002b50:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b52:	e01c      	b.n	8002b8e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADC_PollForConversion+0x84>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5e      	ldr	r2, [pc, #376]	@ (8002cdc <HAL_ADC_PollForConversion+0x1f8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x88>
 8002b68:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce0 <HAL_ADC_PollForConversion+0x1fc>)
 8002b6a:	e000      	b.n	8002b6e <HAL_ADC_PollForConversion+0x8a>
 8002b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce4 <HAL_ADC_PollForConversion+0x200>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fc5a 	bl	8002428 <LL_ADC_GetMultiDMATransfer>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0a3      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b8e:	f7ff faaf 	bl	80020f0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b94:	e021      	b.n	8002bda <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d01d      	beq.n	8002bda <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b9e:	f7ff faa7 	bl	80020f0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <HAL_ADC_PollForConversion+0xd0>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d112      	bne.n	8002bda <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	f043 0204 	orr.w	r2, r3, #4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e07b      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0d6      	beq.n	8002b96 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fb79 	bl	80022f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01c      	beq.n	8002c3e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7f5b      	ldrb	r3, [r3, #29]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d118      	bne.n	8002c3e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d111      	bne.n	8002c3e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <HAL_ADC_PollForConversion+0x1f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_ADC_PollForConversion+0x178>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ce8 <HAL_ADC_PollForConversion+0x204>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d002      	beq.n	8002c58 <HAL_ADC_PollForConversion+0x174>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_PollForConversion+0x17c>
 8002c58:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <HAL_ADC_PollForConversion+0x208>)
 8002c5a:	e001      	b.n	8002c60 <HAL_ADC_PollForConversion+0x17c>
 8002c5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d008      	beq.n	8002c7a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d002      	beq.n	8002c7a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	d104      	bne.n	8002c84 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e014      	b.n	8002cae <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a14      	ldr	r2, [pc, #80]	@ (8002cdc <HAL_ADC_PollForConversion+0x1f8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ADC_PollForConversion+0x1be>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a15      	ldr	r2, [pc, #84]	@ (8002ce8 <HAL_ADC_PollForConversion+0x204>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d002      	beq.n	8002c9e <HAL_ADC_PollForConversion+0x1ba>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_PollForConversion+0x1c2>
 8002c9e:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <HAL_ADC_PollForConversion+0x208>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_ADC_PollForConversion+0x1c2>
 8002ca2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	220c      	movs	r2, #12
 8002cce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	50000100 	.word	0x50000100
 8002ce0:	50000300 	.word	0x50000300
 8002ce4:	50000700 	.word	0x50000700
 8002ce8:	50000500 	.word	0x50000500
 8002cec:	50000400 	.word	0x50000400

08002cf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x24>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f000 bc13 	b.w	8003556 <HAL_ADC_ConfigChannel+0x84a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fc0a 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 83f3 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff fadd 	bl	8002316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbf8 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002d66:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fc04 	bl	800257c <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 81d9 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 81d4 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d94:	d10f      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7ff fae4 	bl	800236e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fa8b 	bl	80022ca <LL_ADC_SetSamplingTimeCommonConfig>
 8002db4:	e00e      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7ff fad3 	bl	800236e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fa7b 	bl	80022ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d022      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e06:	f7ff f9d5 	bl	80021b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6919      	ldr	r1, [r3, #16]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7ff fa21 	bl	800225e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x126>
 8002e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x128>
 8002e32:	2300      	movs	r3, #0
 8002e34:	461a      	mov	r2, r3
 8002e36:	f7ff fa2d 	bl	8002294 <LL_ADC_SetOffsetSaturation>
 8002e3a:	e17b      	b.n	8003134 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f9da 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x15c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f9cf 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	e01e      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x19a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f9c4 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e004      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x1b2>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0e9b      	lsrs	r3, r3, #26
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	e018      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x1e4>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e004      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f993 	bl	8002228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f977 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x222>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f96c 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	e01e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x260>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f961 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e004      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x278>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	e018      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x2aa>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e004      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f930 	bl	8002228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f914 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x2e8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f909 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	e01e      	b.n	8003032 <HAL_ADC_ConfigChannel+0x326>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f8fe 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800301a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e004      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003026:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_ADC_ConfigChannel+0x33e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	e016      	b.n	8003078 <HAL_ADC_ConfigChannel+0x36c>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800305c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800305e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800306e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f8cf 	bl	8002228 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2103      	movs	r1, #3
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f8b3 	bl	80021fc <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x3aa>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f8a8 	bl	80021fc <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	e017      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x3da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f89d 	bl	80021fc <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80030dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x3f2>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	e011      	b.n	8003122 <HAL_ADC_ConfigChannel+0x416>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800310c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800310e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800311a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f87a 	bl	8002228 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f9e5 	bl	8002508 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 813d 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f7ff f936 	bl	80023c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4aa2      	ldr	r2, [pc, #648]	@ (80033e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f040 812e 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x480>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b09      	cmp	r3, #9
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e019      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x4b4>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800319a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800319e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80031a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	bf94      	ite	ls
 80031ba:	2301      	movls	r3, #1
 80031bc:	2300      	movhi	r3, #0
 80031be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d079      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4d4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031de:	e015      	b.n	800320c <HAL_ADC_ConfigChannel+0x500>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_ConfigChannel+0x520>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	e017      	b.n	800325c <HAL_ADC_ConfigChannel+0x550>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800323e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x576>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	051b      	lsls	r3, r3, #20
 8003280:	e018      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x5a8>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	430b      	orrs	r3, r1
 80032b6:	e07e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5c8>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	e015      	b.n	8003300 <HAL_ADC_ConfigChannel+0x5f4>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e003      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	069b      	lsls	r3, r3, #26
 80032fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x614>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	e017      	b.n	8003350 <HAL_ADC_ConfigChannel+0x644>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61fb      	str	r3, [r7, #28]
  return result;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	ea42 0103 	orr.w	r1, r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_ADC_ConfigChannel+0x670>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	3301      	adds	r3, #1
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	3b1e      	subs	r3, #30
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800337a:	e01b      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x6a8>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	613b      	str	r3, [r7, #16]
  return result;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	051b      	lsls	r3, r3, #20
 80033b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fe ffd7 	bl	800236e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_ADC_ConfigChannel+0x6e0>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80be 	beq.w	800354a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d6:	d004      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x6d6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x6ec>
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80033e4:	e009      	b.n	80033fa <HAL_ADC_ConfigChannel+0x6ee>
 80033e6:	bf00      	nop
 80033e8:	407f0000 	.word	0x407f0000
 80033ec:	80080000 	.word	0x80080000
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000300 	.word	0x50000300
 80033f8:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fecc 	bl	8002198 <LL_ADC_GetCommonPathInternalCh>
 8003400:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a56      	ldr	r2, [pc, #344]	@ (8003564 <HAL_ADC_ConfigChannel+0x858>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_ADC_ConfigChannel+0x70c>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a55      	ldr	r2, [pc, #340]	@ (8003568 <HAL_ADC_ConfigChannel+0x85c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d13a      	bne.n	800348e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800341c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d134      	bne.n	800348e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800342c:	d005      	beq.n	800343a <HAL_ADC_ConfigChannel+0x72e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4e      	ldr	r2, [pc, #312]	@ (800356c <HAL_ADC_ConfigChannel+0x860>)
 8003434:	4293      	cmp	r3, r2
 8003436:	f040 8085 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003442:	d004      	beq.n	800344e <HAL_ADC_ConfigChannel+0x742>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a49      	ldr	r2, [pc, #292]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x746>
 800344e:	4a49      	ldr	r2, [pc, #292]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 8003450:	e000      	b.n	8003454 <HAL_ADC_ConfigChannel+0x748>
 8003452:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003458:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7fe fe87 	bl	8002172 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003464:	4b44      	ldr	r3, [pc, #272]	@ (8003578 <HAL_ADC_ConfigChannel+0x86c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	4a44      	ldr	r2, [pc, #272]	@ (800357c <HAL_ADC_ConfigChannel+0x870>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800347e:	e002      	b.n	8003486 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3b01      	subs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800348c:	e05a      	b.n	8003544 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_ADC_ConfigChannel+0x874>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d125      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d11f      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d104      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x7ac>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a34      	ldr	r2, [pc, #208]	@ (8003584 <HAL_ADC_ConfigChannel+0x878>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d047      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x7c0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x7c4>
 80034cc:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x7c6>
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 80034d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f7fe fe48 	bl	8002172 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e2:	e031      	b.n	8003548 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <HAL_ADC_ConfigChannel+0x87c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12d      	bne.n	800354a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d127      	bne.n	800354a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d004      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x80c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x810>
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 800351a:	e000      	b.n	800351e <HAL_ADC_ConfigChannel+0x812>
 800351c:	4a10      	ldr	r2, [pc, #64]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 800351e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fe22 	bl	8002172 <LL_ADC_SetCommonPathInternalCh>
 800352e:	e00c      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003542:	e002      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003552:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003556:	4618      	mov	r0, r3
 8003558:	37d8      	adds	r7, #216	@ 0xd8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	50000700 	.word	0x50000700
 8003564:	c3210000 	.word	0xc3210000
 8003568:	90c00010 	.word	0x90c00010
 800356c:	50000600 	.word	0x50000600
 8003570:	50000100 	.word	0x50000100
 8003574:	50000300 	.word	0x50000300
 8003578:	20000000 	.word	0x20000000
 800357c:	053e2d63 	.word	0x053e2d63
 8003580:	c7520000 	.word	0xc7520000
 8003584:	50000500 	.word	0x50000500
 8003588:	cb840000 	.word	0xcb840000

0800358c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe ffb3 	bl	8002508 <LL_ADC_IsEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d176      	bne.n	8003696 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <ADC_Enable+0x114>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e062      	b.n	8003698 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe ff82 	bl	80024e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d004      	beq.n	80035f0 <ADC_Enable+0x64>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <ADC_Enable+0x118>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <ADC_Enable+0x68>
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <ADC_Enable+0x11c>)
 80035f2:	e000      	b.n	80035f6 <ADC_Enable+0x6a>
 80035f4:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <ADC_Enable+0x120>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fdce 	bl	8002198 <LL_ADC_GetCommonPathInternalCh>
 80035fc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <ADC_Enable+0x124>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <ADC_Enable+0x128>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003620:	e002      	b.n	8003628 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800362e:	f7fe fd5f 	bl	80020f0 <HAL_GetTick>
 8003632:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003634:	e028      	b.n	8003688 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe ff64 	bl	8002508 <LL_ADC_IsEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff48 	bl	80024e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003650:	f7fe fd4e 	bl	80020f0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d914      	bls.n	8003688 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d00d      	beq.n	8003688 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f043 0210 	orr.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d1cf      	bne.n	8003636 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	8000003f 	.word	0x8000003f
 80036a4:	50000100 	.word	0x50000100
 80036a8:	50000300 	.word	0x50000300
 80036ac:	50000700 	.word	0x50000700
 80036b0:	20000000 	.word	0x20000000
 80036b4:	053e2d63 	.word	0x053e2d63

080036b8 <LL_ADC_IsEnabled>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <LL_ADC_IsEnabled+0x18>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <LL_ADC_IsEnabled+0x1a>
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LL_ADC_REG_IsConversionOngoing>:
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d101      	bne.n	80036f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b0a1      	sub	sp, #132	@ 0x84
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800371e:	2302      	movs	r3, #2
 8003720:	e0e7      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800372a:	2300      	movs	r3, #0
 800372c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800372e:	2300      	movs	r3, #0
 8003730:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800373a:	d102      	bne.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800373c:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	e009      	b.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6e      	ldr	r2, [pc, #440]	@ (8003900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800374c:	4b6d      	ldr	r3, [pc, #436]	@ (8003904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	e001      	b.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0be      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ffb1 	bl	80036de <LL_ADC_REG_IsConversionOngoing>
 800377c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ffab 	bl	80036de <LL_ADC_REG_IsConversionOngoing>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 80a0 	bne.w	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 809c 	bne.w	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a0:	d004      	beq.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a55      	ldr	r2, [pc, #340]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80037ac:	4b56      	ldr	r3, [pc, #344]	@ (8003908 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80037ae:	e000      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80037b0:	4b56      	ldr	r3, [pc, #344]	@ (800390c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80037b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d04b      	beq.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037ce:	035b      	lsls	r3, r3, #13
 80037d0:	430b      	orrs	r3, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e0:	d004      	beq.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a45      	ldr	r2, [pc, #276]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10f      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80037ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037f0:	f7ff ff62 	bl	80036b8 <LL_ADC_IsEnabled>
 80037f4:	4604      	mov	r4, r0
 80037f6:	4841      	ldr	r0, [pc, #260]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037f8:	f7ff ff5e 	bl	80036b8 <LL_ADC_IsEnabled>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4323      	orrs	r3, r4
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e012      	b.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800380c:	483c      	ldr	r0, [pc, #240]	@ (8003900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800380e:	f7ff ff53 	bl	80036b8 <LL_ADC_IsEnabled>
 8003812:	4604      	mov	r4, r0
 8003814:	483b      	ldr	r0, [pc, #236]	@ (8003904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003816:	f7ff ff4f 	bl	80036b8 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	431c      	orrs	r4, r3
 800381e:	483c      	ldr	r0, [pc, #240]	@ (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003820:	f7ff ff4a 	bl	80036b8 <LL_ADC_IsEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	4323      	orrs	r3, r4
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d056      	beq.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	430a      	orrs	r2, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003850:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003852:	e047      	b.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800385c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800385e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003868:	d004      	beq.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a23      	ldr	r2, [pc, #140]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10f      	bne.n	8003894 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003874:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003878:	f7ff ff1e 	bl	80036b8 <LL_ADC_IsEnabled>
 800387c:	4604      	mov	r4, r0
 800387e:	481f      	ldr	r0, [pc, #124]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003880:	f7ff ff1a 	bl	80036b8 <LL_ADC_IsEnabled>
 8003884:	4603      	mov	r3, r0
 8003886:	4323      	orrs	r3, r4
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003894:	481a      	ldr	r0, [pc, #104]	@ (8003900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003896:	f7ff ff0f 	bl	80036b8 <LL_ADC_IsEnabled>
 800389a:	4604      	mov	r4, r0
 800389c:	4819      	ldr	r0, [pc, #100]	@ (8003904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800389e:	f7ff ff0b 	bl	80036b8 <LL_ADC_IsEnabled>
 80038a2:	4603      	mov	r3, r0
 80038a4:	431c      	orrs	r4, r3
 80038a6:	481a      	ldr	r0, [pc, #104]	@ (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038a8:	f7ff ff06 	bl	80036b8 <LL_ADC_IsEnabled>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4323      	orrs	r3, r4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038c6:	f023 030f 	bic.w	r3, r3, #15
 80038ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038ce:	e009      	b.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80038e2:	e000      	b.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3784      	adds	r7, #132	@ 0x84
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	50000100 	.word	0x50000100
 8003900:	50000400 	.word	0x50000400
 8003904:	50000500 	.word	0x50000500
 8003908:	50000300 	.word	0x50000300
 800390c:	50000700 	.word	0x50000700
 8003910:	50000600 	.word	0x50000600

08003914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <__NVIC_SetPriorityGrouping+0x44>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800393c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003946:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <__NVIC_SetPriorityGrouping+0x44>)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	60d3      	str	r3, [r2, #12]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003960:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <__NVIC_GetPriorityGrouping+0x18>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 0307 	and.w	r3, r3, #7
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	2b00      	cmp	r3, #0
 8003988:	db0b      	blt.n	80039a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	4907      	ldr	r1, [pc, #28]	@ (80039b0 <__NVIC_EnableIRQ+0x38>)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2001      	movs	r0, #1
 800399a:	fa00 f202 	lsl.w	r2, r0, r2
 800399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	e000e100 	.word	0xe000e100

080039b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	6039      	str	r1, [r7, #0]
 80039be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	db0a      	blt.n	80039de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	490c      	ldr	r1, [pc, #48]	@ (8003a00 <__NVIC_SetPriority+0x4c>)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	440b      	add	r3, r1
 80039d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039dc:	e00a      	b.n	80039f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4908      	ldr	r1, [pc, #32]	@ (8003a04 <__NVIC_SetPriority+0x50>)
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	3b04      	subs	r3, #4
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	440b      	add	r3, r1
 80039f2:	761a      	strb	r2, [r3, #24]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000e100 	.word	0xe000e100
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f1c3 0307 	rsb	r3, r3, #7
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	bf28      	it	cs
 8003a26:	2304      	movcs	r3, #4
 8003a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d902      	bls.n	8003a38 <NVIC_EncodePriority+0x30>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3b03      	subs	r3, #3
 8003a36:	e000      	b.n	8003a3a <NVIC_EncodePriority+0x32>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43da      	mvns	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a50:	f04f 31ff 	mov.w	r1, #4294967295
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	43d9      	mvns	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	4313      	orrs	r3, r2
         );
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3724      	adds	r7, #36	@ 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a80:	d301      	bcc.n	8003a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a82:	2301      	movs	r3, #1
 8003a84:	e00f      	b.n	8003aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a86:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <SysTick_Config+0x40>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8e:	210f      	movs	r1, #15
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	f7ff ff8e 	bl	80039b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <SysTick_Config+0x40>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9e:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <SysTick_Config+0x40>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff29 	bl	8003914 <__NVIC_SetPriorityGrouping>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff40 	bl	800395c <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff90 	bl	8003a08 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5f 	bl	80039b4 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff33 	bl	8003978 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa4 	bl	8003a70 <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
      break;
 8003b50:	e005      	b.n	8003b5e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5c:	bf00      	nop
  }

  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e003      	b.n	8003b88 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <HAL_EXTI_IRQHandler+0x5c>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4798      	blx	r3
    }
  }
}
 8003be6:	bf00      	nop
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40010414 	.word	0x40010414

08003bf4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e147      	b.n	8003e96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fede 	bl	80019dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0210 	bic.w	r2, r2, #16
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7fe fa5e 	bl	80020f0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c36:	e012      	b.n	8003c5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c38:	f7fe fa5a 	bl	80020f0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b0a      	cmp	r3, #10
 8003c44:	d90b      	bls.n	8003c5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e11b      	b.n	8003e96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d0e5      	beq.n	8003c38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c7c:	f7fe fa38 	bl	80020f0 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c82:	e012      	b.n	8003caa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c84:	f7fe fa34 	bl	80020f0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d90b      	bls.n	8003caa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0f5      	b.n	8003e96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0e5      	beq.n	8003c84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0202 	orr.w	r2, r2, #2
 8003cc6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a74      	ldr	r2, [pc, #464]	@ (8003ea0 <HAL_FDCAN_Init+0x2ac>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d103      	bne.n	8003cda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003cd2:	4a74      	ldr	r2, [pc, #464]	@ (8003ea4 <HAL_FDCAN_Init+0x2b0>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7c1b      	ldrb	r3, [r3, #16]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	e007      	b.n	8003d04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7c5b      	ldrb	r3, [r3, #17]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7c9b      	ldrb	r3, [r3, #18]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d108      	bne.n	8003d48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d44:	619a      	str	r2, [r3, #24]
 8003d46:	e007      	b.n	8003d58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003d7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0210 	bic.w	r2, r2, #16
 8003d8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d108      	bne.n	8003da8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0204 	orr.w	r2, r2, #4
 8003da4:	619a      	str	r2, [r3, #24]
 8003da6:	e02c      	b.n	8003e02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d028      	beq.n	8003e02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d01c      	beq.n	8003df2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0210 	orr.w	r2, r2, #16
 8003dd6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d110      	bne.n	8003e02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0220 	orr.w	r2, r2, #32
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	e007      	b.n	8003e02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0220 	orr.w	r2, r2, #32
 8003e00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e36:	d115      	bne.n	8003e64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	3b01      	subs	r3, #1
 8003e44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f880 	bl	8003f80 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40006400 	.word	0x40006400
 8003ea4:	40006500 	.word	0x40006500

08003ea8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d110      	bne.n	8003ede <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e006      	b.n	8003eec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee2:	f043 0204 	orr.w	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d12c      	bne.n	8003f6a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e023      	b.n	8003f78 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f886 	bl	8004058 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e006      	b.n	8003f78 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f88:	4b30      	ldr	r3, [pc, #192]	@ (800404c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003f8a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2f      	ldr	r2, [pc, #188]	@ (8004050 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d103      	bne.n	8003f9e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f9c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004054 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d103      	bne.n	8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003fae:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fbe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	041a      	lsls	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fec:	061a      	lsls	r2, r3, #24
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e005      	b.n	8004032 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3304      	adds	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	429a      	cmp	r2, r3
 800403c:	d3f3      	bcc.n	8004026 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	4000a400 	.word	0x4000a400
 8004050:	40006800 	.word	0x40006800
 8004054:	40006c00 	.word	0x40006c00

08004058 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004076:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800407e:	4313      	orrs	r3, r2
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e00a      	b.n	800409a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800408c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004092:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004098:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80040a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80040aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80040b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3304      	adds	r3, #4
 80040d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3304      	adds	r3, #4
 80040e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e020      	b.n	800412e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3303      	adds	r3, #3
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3302      	adds	r3, #2
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	440b      	add	r3, r1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004104:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	440b      	add	r3, r1
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004112:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	440a      	add	r2, r1
 800411a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800411c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3304      	adds	r3, #4
 8004126:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3304      	adds	r3, #4
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a06      	ldr	r2, [pc, #24]	@ (800414c <FDCAN_CopyMessageToRAM+0xf4>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	461a      	mov	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4293      	cmp	r3, r2
 800413c:	d3d6      	bcc.n	80040ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3724      	adds	r7, #36	@ 0x24
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	0800aa1c 	.word	0x0800aa1c

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800415e:	e15a      	b.n	8004416 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 814c 	beq.w	8004410 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d005      	beq.n	8004190 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800418c:	2b02      	cmp	r3, #2
 800418e:	d130      	bne.n	80041f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041c6:	2201      	movs	r2, #1
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 0201 	and.w	r2, r3, #1
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d017      	beq.n	800422e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	2203      	movs	r2, #3
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d123      	bne.n	8004282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	08da      	lsrs	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3208      	adds	r2, #8
 8004242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	08da      	lsrs	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3208      	adds	r2, #8
 800427c:	6939      	ldr	r1, [r7, #16]
 800427e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0203 	and.w	r2, r3, #3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a6 	beq.w	8004410 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004434 <HAL_GPIO_Init+0x2e4>)
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004434 <HAL_GPIO_Init+0x2e4>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80042d0:	4b58      	ldr	r3, [pc, #352]	@ (8004434 <HAL_GPIO_Init+0x2e4>)
 80042d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042dc:	4a56      	ldr	r2, [pc, #344]	@ (8004438 <HAL_GPIO_Init+0x2e8>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3302      	adds	r3, #2
 80042e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004306:	d01f      	beq.n	8004348 <HAL_GPIO_Init+0x1f8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a4c      	ldr	r2, [pc, #304]	@ (800443c <HAL_GPIO_Init+0x2ec>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d019      	beq.n	8004344 <HAL_GPIO_Init+0x1f4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a4b      	ldr	r2, [pc, #300]	@ (8004440 <HAL_GPIO_Init+0x2f0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_GPIO_Init+0x1f0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a4a      	ldr	r2, [pc, #296]	@ (8004444 <HAL_GPIO_Init+0x2f4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00d      	beq.n	800433c <HAL_GPIO_Init+0x1ec>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a49      	ldr	r2, [pc, #292]	@ (8004448 <HAL_GPIO_Init+0x2f8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <HAL_GPIO_Init+0x1e8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a48      	ldr	r2, [pc, #288]	@ (800444c <HAL_GPIO_Init+0x2fc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_GPIO_Init+0x1e4>
 8004330:	2305      	movs	r3, #5
 8004332:	e00a      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 8004334:	2306      	movs	r3, #6
 8004336:	e008      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 8004338:	2304      	movs	r3, #4
 800433a:	e006      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 800433c:	2303      	movs	r3, #3
 800433e:	e004      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 8004340:	2302      	movs	r3, #2
 8004342:	e002      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_GPIO_Init+0x1fa>
 8004348:	2300      	movs	r3, #0
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f002 0203 	and.w	r2, r2, #3
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	4093      	lsls	r3, r2
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800435a:	4937      	ldr	r1, [pc, #220]	@ (8004438 <HAL_GPIO_Init+0x2e8>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004368:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <HAL_GPIO_Init+0x300>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	43db      	mvns	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800438c:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <HAL_GPIO_Init+0x300>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004392:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <HAL_GPIO_Init+0x300>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	43db      	mvns	r3, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043b6:	4a26      	ldr	r2, [pc, #152]	@ (8004450 <HAL_GPIO_Init+0x300>)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043bc:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <HAL_GPIO_Init+0x300>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <HAL_GPIO_Init+0x300>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <HAL_GPIO_Init+0x300>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800440a:	4a11      	ldr	r2, [pc, #68]	@ (8004450 <HAL_GPIO_Init+0x300>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3301      	adds	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f ae9d 	bne.w	8004160 <HAL_GPIO_Init+0x10>
  }
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40021000 	.word	0x40021000
 8004438:	40010000 	.word	0x40010000
 800443c:	48000400 	.word	0x48000400
 8004440:	48000800 	.word	0x48000800
 8004444:	48000c00 	.word	0x48000c00
 8004448:	48001000 	.word	0x48001000
 800444c:	48001400 	.word	0x48001400
 8004450:	40010400 	.word	0x40010400

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004470:	e002      	b.n	8004478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d141      	bne.n	8004516 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d131      	bne.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a0:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a6:	4a46      	ldr	r2, [pc, #280]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b0:	4b43      	ldr	r3, [pc, #268]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044b8:	4a41      	ldr	r2, [pc, #260]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044c0:	4b40      	ldr	r3, [pc, #256]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2232      	movs	r2, #50	@ 0x32
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	4a3f      	ldr	r2, [pc, #252]	@ (80045c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	0c9b      	lsrs	r3, r3, #18
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044d6:	e002      	b.n	80044de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3b01      	subs	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044de:	4b38      	ldr	r3, [pc, #224]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d102      	bne.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f2      	bne.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044f2:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d158      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e057      	b.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004504:	4b2e      	ldr	r3, [pc, #184]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450a:	4a2d      	ldr	r2, [pc, #180]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004514:	e04d      	b.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451c:	d141      	bne.n	80045a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800451e:	4b28      	ldr	r3, [pc, #160]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d131      	bne.n	8004590 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800452c:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004532:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800453c:	4b20      	ldr	r3, [pc, #128]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004544:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800454a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800454c:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2232      	movs	r2, #50	@ 0x32
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	0c9b      	lsrs	r3, r3, #18
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004562:	e002      	b.n	800456a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b01      	subs	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d102      	bne.n	800457e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f2      	bne.n	8004564 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458a:	d112      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e011      	b.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004596:	4a0a      	ldr	r2, [pc, #40]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045a0:	e007      	b.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045a2:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045aa:	4a05      	ldr	r2, [pc, #20]	@ (80045c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40007000 	.word	0x40007000
 80045c4:	20000000 	.word	0x20000000
 80045c8:	431bde83 	.word	0x431bde83

080045cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045da:	6093      	str	r3, [r2, #8]
}
 80045dc:	bf00      	nop
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40007000 	.word	0x40007000

080045ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e2fe      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d075      	beq.n	80046f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	4b97      	ldr	r3, [pc, #604]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	4b94      	ldr	r3, [pc, #592]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d102      	bne.n	800462a <HAL_RCC_OscConfig+0x3e>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d002      	beq.n	8004630 <HAL_RCC_OscConfig+0x44>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d10b      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	4b8d      	ldr	r3, [pc, #564]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05b      	beq.n	80046f4 <HAL_RCC_OscConfig+0x108>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d157      	bne.n	80046f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e2d9      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x74>
 8004652:	4b85      	ldr	r3, [pc, #532]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a84      	ldr	r2, [pc, #528]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x98>
 800466a:	4b7f      	ldr	r3, [pc, #508]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7e      	ldr	r2, [pc, #504]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b7c      	ldr	r3, [pc, #496]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7b      	ldr	r2, [pc, #492]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004684:	4b78      	ldr	r3, [pc, #480]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a77      	ldr	r2, [pc, #476]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b75      	ldr	r3, [pc, #468]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a74      	ldr	r2, [pc, #464]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fd24 	bl	80020f0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd fd20 	bl	80020f0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e29e      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0xc0>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fd10 	bl	80020f0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fd fd0c 	bl	80020f0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e28a      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e6:	4b60      	ldr	r3, [pc, #384]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0xe8>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d075      	beq.n	80047ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004702:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800470c:	4b56      	ldr	r3, [pc, #344]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d102      	bne.n	8004722 <HAL_RCC_OscConfig+0x136>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d002      	beq.n	8004728 <HAL_RCC_OscConfig+0x13c>
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d11f      	bne.n	8004768 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	4b4f      	ldr	r3, [pc, #316]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x154>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e25d      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b49      	ldr	r3, [pc, #292]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4946      	ldr	r1, [pc, #280]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <HAL_RCC_OscConfig+0x280>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd fc7d 	bl	8002058 <HAL_InitTick>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d043      	beq.n	80047ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e249      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004770:	4b3d      	ldr	r3, [pc, #244]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3c      	ldr	r2, [pc, #240]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd fcb8 	bl	80020f0 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004784:	f7fd fcb4 	bl	80020f0 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e232      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004796:	4b34      	ldr	r3, [pc, #208]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	492d      	ldr	r1, [pc, #180]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
 80047b6:	e01a      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80047be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fc94 	bl	80020f0 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fd fc90 	bl	80020f0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e20e      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047de:	4b22      	ldr	r3, [pc, #136]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x1e0>
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d041      	beq.n	800487e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01c      	beq.n	800483c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd fc6d 	bl	80020f0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481a:	f7fd fc69 	bl	80020f0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1e7      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800482c:	4b0e      	ldr	r3, [pc, #56]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ef      	beq.n	800481a <HAL_RCC_OscConfig+0x22e>
 800483a:	e020      	b.n	800487e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004842:	4a09      	ldr	r2, [pc, #36]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fc50 	bl	80020f0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004852:	e00d      	b.n	8004870 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004854:	f7fd fc4c 	bl	80020f0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d906      	bls.n	8004870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e1ca      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004870:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ea      	bne.n	8004854 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a6 	beq.w	80049d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004890:	4b84      	ldr	r3, [pc, #528]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2b4>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x2b6>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b2:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c2:	4b79      	ldr	r3, [pc, #484]	@ (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d118      	bne.n	8004900 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ce:	4b76      	ldr	r3, [pc, #472]	@ (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a75      	ldr	r2, [pc, #468]	@ (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fd fc09 	bl	80020f0 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fd fc05 	bl	80020f0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e183      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f4:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d108      	bne.n	800491a <HAL_RCC_OscConfig+0x32e>
 8004908:	4b66      	ldr	r3, [pc, #408]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	4a65      	ldr	r2, [pc, #404]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004918:	e024      	b.n	8004964 <HAL_RCC_OscConfig+0x378>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d110      	bne.n	8004944 <HAL_RCC_OscConfig+0x358>
 8004922:	4b60      	ldr	r3, [pc, #384]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800492a:	f043 0304 	orr.w	r3, r3, #4
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004932:	4b5c      	ldr	r3, [pc, #368]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004942:	e00f      	b.n	8004964 <HAL_RCC_OscConfig+0x378>
 8004944:	4b57      	ldr	r3, [pc, #348]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	4a56      	ldr	r2, [pc, #344]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004954:	4b53      	ldr	r3, [pc, #332]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	4a52      	ldr	r2, [pc, #328]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d016      	beq.n	800499a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd fbc0 	bl	80020f0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd fbbc 	bl	80020f0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e138      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	4b46      	ldr	r3, [pc, #280]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ed      	beq.n	8004974 <HAL_RCC_OscConfig+0x388>
 8004998:	e015      	b.n	80049c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fd fba9 	bl	80020f0 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fd fba5 	bl	80020f0 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e121      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b8:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ed      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b35      	ldr	r3, [pc, #212]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	4a34      	ldr	r2, [pc, #208]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d03c      	beq.n	8004a5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01c      	beq.n	8004a26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ec:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80049ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f2:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fd fb78 	bl	80020f0 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a04:	f7fd fb74 	bl	80020f0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0f2      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a16:	4b23      	ldr	r3, [pc, #140]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ef      	beq.n	8004a04 <HAL_RCC_OscConfig+0x418>
 8004a24:	e01b      	b.n	8004a5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a26:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fd fb5b 	bl	80020f0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3e:	f7fd fb57 	bl	80020f0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0d5      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a50:	4b14      	ldr	r3, [pc, #80]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ef      	bne.n	8004a3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80c9 	beq.w	8004bfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a68:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	f000 8083 	beq.w	8004b7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d15e      	bne.n	8004b3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fb31 	bl	80020f0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a90:	e00c      	b.n	8004aac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fd fb2d 	bl	80020f0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d905      	bls.n	8004aac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e0ab      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	4b55      	ldr	r3, [pc, #340]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ec      	bne.n	8004a92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab8:	4b52      	ldr	r3, [pc, #328]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b52      	ldr	r3, [pc, #328]	@ (8004c08 <HAL_RCC_OscConfig+0x61c>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6a11      	ldr	r1, [r2, #32]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	4311      	orrs	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ad2:	0212      	lsls	r2, r2, #8
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ada:	0852      	lsrs	r2, r2, #1
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0552      	lsls	r2, r2, #21
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ae6:	0852      	lsrs	r2, r2, #1
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	0652      	lsls	r2, r2, #25
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004af2:	06d2      	lsls	r2, r2, #27
 8004af4:	430a      	orrs	r2, r1
 8004af6:	4943      	ldr	r1, [pc, #268]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b08:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd faec 	bl	80020f0 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fae8 	bl	80020f0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e066      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	4b35      	ldr	r3, [pc, #212]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x530>
 8004b3a:	e05e      	b.n	8004bfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a30      	ldr	r2, [pc, #192]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fad2 	bl	80020f0 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fd face 	bl	80020f0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04c      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b62:	4b28      	ldr	r3, [pc, #160]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b6e:	4b25      	ldr	r3, [pc, #148]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	4924      	ldr	r1, [pc, #144]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_OscConfig+0x620>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	60cb      	str	r3, [r1, #12]
 8004b7a:	e03e      	b.n	8004bfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e039      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	@ (8004c04 <HAL_RCC_OscConfig+0x618>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f003 0203 	and.w	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d12c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d123      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d113      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d109      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	019f800c 	.word	0x019f800c
 8004c0c:	feeefffc 	.word	0xfeeefffc

08004c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e11e      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b91      	ldr	r3, [pc, #580]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d910      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b8e      	ldr	r3, [pc, #568]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 020f 	bic.w	r2, r3, #15
 8004c3e:	498c      	ldr	r1, [pc, #560]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b8a      	ldr	r3, [pc, #552]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e106      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d073      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d129      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6c:	4b81      	ldr	r3, [pc, #516]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0f4      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c7c:	f000 f99e 	bl	8004fbc <RCC_GetSysClockFreqFromPLLSource>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4a7c      	ldr	r2, [pc, #496]	@ (8004e78 <HAL_RCC_ClockConfig+0x268>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d93f      	bls.n	8004d0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d033      	beq.n	8004d0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d12f      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004caa:	4b72      	ldr	r3, [pc, #456]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb2:	4a70      	ldr	r2, [pc, #448]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e024      	b.n	8004d0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0c6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd8:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0be      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ce8:	f000 f8ce 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4a61      	ldr	r2, [pc, #388]	@ (8004e78 <HAL_RCC_ClockConfig+0x268>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d909      	bls.n	8004d0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4957      	ldr	r1, [pc, #348]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fd f9e8 	bl	80020f0 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fd f9e4 	bl	80020f0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e095      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b43      	ldr	r3, [pc, #268]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a42      	ldr	r2, [pc, #264]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d84:	4a3b      	ldr	r2, [pc, #236]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b39      	ldr	r3, [pc, #228]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4936      	ldr	r1, [pc, #216]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d105      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004da6:	4b33      	ldr	r3, [pc, #204]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	4a32      	ldr	r2, [pc, #200]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d21d      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 020f 	bic.w	r2, r3, #15
 8004dc8:	4929      	ldr	r1, [pc, #164]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dd0:	f7fd f98e 	bl	80020f0 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd f98a 	bl	80020f0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e03b      	b.n	8004e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1ed      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e08:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4917      	ldr	r1, [pc, #92]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	490f      	ldr	r1, [pc, #60]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e3a:	f000 f825 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_RCC_ClockConfig+0x264>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	490c      	ldr	r1, [pc, #48]	@ (8004e7c <HAL_RCC_ClockConfig+0x26c>)
 8004e4c:	5ccb      	ldrb	r3, [r1, r3]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a0a      	ldr	r2, [pc, #40]	@ (8004e80 <HAL_RCC_ClockConfig+0x270>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <HAL_RCC_ClockConfig+0x274>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd f8fa 	bl	8002058 <HAL_InitTick>
 8004e64:	4603      	mov	r3, r0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	04c4b400 	.word	0x04c4b400
 8004e7c:	0800aa00 	.word	0x0800aa00
 8004e80:	20000000 	.word	0x20000000
 8004e84:	20000018 	.word	0x20000018

08004e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d102      	bne.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	e047      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ea0:	4b27      	ldr	r3, [pc, #156]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eac:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e03e      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004eb2:	4b23      	ldr	r3, [pc, #140]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d136      	bne.n	8004f2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ebe:	4b20      	ldr	r3, [pc, #128]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004edc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a16      	ldr	r2, [pc, #88]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee6:	68d2      	ldr	r2, [r2, #12]
 8004ee8:	0a12      	lsrs	r2, r2, #8
 8004eea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
      break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef6:	4a13      	ldr	r2, [pc, #76]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	4a10      	ldr	r2, [pc, #64]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f00:	68d2      	ldr	r2, [r2, #12]
 8004f02:	0a12      	lsrs	r2, r2, #8
 8004f04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]
      break;
 8004f0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0e5b      	lsrs	r3, r3, #25
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	e001      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f30:	693b      	ldr	r3, [r7, #16]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	016e3600 	.word	0x016e3600

08004f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f50:	4b03      	ldr	r3, [pc, #12]	@ (8004f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000000 	.word	0x20000000

08004f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f68:	f7ff fff0 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	0800aa10 	.word	0x0800aa10

08004f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f94:	f7ff ffda 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0adb      	lsrs	r3, r3, #11
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	0800aa10 	.word	0x0800aa10

08004fbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800503c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800503c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d10c      	bne.n	8004ffa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe0:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	4a14      	ldr	r2, [pc, #80]	@ (800503c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fea:	68d2      	ldr	r2, [r2, #12]
 8004fec:	0a12      	lsrs	r2, r2, #8
 8004fee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	617b      	str	r3, [r7, #20]
    break;
 8004ff8:	e00c      	b.n	8005014 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ffa:	4a12      	ldr	r2, [pc, #72]	@ (8005044 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	4a0e      	ldr	r2, [pc, #56]	@ (800503c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005004:	68d2      	ldr	r2, [r2, #12]
 8005006:	0a12      	lsrs	r2, r2, #8
 8005008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
    break;
 8005012:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005014:	4b09      	ldr	r3, [pc, #36]	@ (800503c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	0e5b      	lsrs	r3, r3, #25
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800502e:	687b      	ldr	r3, [r7, #4]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40021000 	.word	0x40021000
 8005040:	016e3600 	.word	0x016e3600
 8005044:	00f42400 	.word	0x00f42400

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005050:	2300      	movs	r3, #0
 8005052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005054:	2300      	movs	r3, #0
 8005056:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8098 	beq.w	8005196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005066:	2300      	movs	r3, #0
 8005068:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506a:	4b43      	ldr	r3, [pc, #268]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	4b40      	ldr	r3, [pc, #256]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507a:	4a3f      	ldr	r2, [pc, #252]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005080:	6593      	str	r3, [r2, #88]	@ 0x58
 8005082:	4b3d      	ldr	r3, [pc, #244]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508e:	2301      	movs	r3, #1
 8005090:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005092:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a39      	ldr	r2, [pc, #228]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800509e:	f7fd f827 	bl	80020f0 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a4:	e009      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fd f823 	bl	80020f0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d902      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	74fb      	strb	r3, [r7, #19]
        break;
 80050b8:	e005      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ba:	4b30      	ldr	r3, [pc, #192]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ef      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050c6:	7cfb      	ldrb	r3, [r7, #19]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d159      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d019      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050e8:	4b23      	ldr	r3, [pc, #140]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050f4:	4b20      	ldr	r3, [pc, #128]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005104:	4b1c      	ldr	r3, [pc, #112]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	4a1b      	ldr	r2, [pc, #108]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fc ffe3 	bl	80020f0 <HAL_GetTick>
 800512a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512c:	e00b      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fc ffdf 	bl	80020f0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d902      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	74fb      	strb	r3, [r7, #19]
            break;
 8005144:	e006      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005146:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0ec      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800515a:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	4903      	ldr	r1, [pc, #12]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	74bb      	strb	r3, [r7, #18]
 8005176:	e005      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005178:	40021000 	.word	0x40021000
 800517c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005184:	7c7b      	ldrb	r3, [r7, #17]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518a:	4ba7      	ldr	r3, [pc, #668]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518e:	4aa6      	ldr	r2, [pc, #664]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a2:	4ba1      	ldr	r3, [pc, #644]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f023 0203 	bic.w	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	499d      	ldr	r1, [pc, #628]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c4:	4b98      	ldr	r3, [pc, #608]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ca:	f023 020c 	bic.w	r2, r3, #12
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4995      	ldr	r1, [pc, #596]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051e6:	4b90      	ldr	r3, [pc, #576]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	498c      	ldr	r1, [pc, #560]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005208:	4b87      	ldr	r3, [pc, #540]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	4984      	ldr	r1, [pc, #528]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800522a:	4b7f      	ldr	r3, [pc, #508]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	497b      	ldr	r1, [pc, #492]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524c:	4b76      	ldr	r3, [pc, #472]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	4973      	ldr	r1, [pc, #460]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800526e:	4b6e      	ldr	r3, [pc, #440]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	496a      	ldr	r1, [pc, #424]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005290:	4b65      	ldr	r3, [pc, #404]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4962      	ldr	r1, [pc, #392]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	4959      	ldr	r1, [pc, #356]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052d4:	4b54      	ldr	r3, [pc, #336]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	4951      	ldr	r1, [pc, #324]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	4948      	ldr	r1, [pc, #288]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d015      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005318:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	4940      	ldr	r1, [pc, #256]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005338:	4b3b      	ldr	r3, [pc, #236]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a3a      	ldr	r2, [pc, #232]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005342:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005350:	4b35      	ldr	r3, [pc, #212]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	4932      	ldr	r1, [pc, #200]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005388:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	4924      	ldr	r1, [pc, #144]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a6:	d105      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053c0:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	4916      	ldr	r1, [pc, #88]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e0:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a10      	ldr	r2, [pc, #64]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	4908      	ldr	r1, [pc, #32]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005416:	d109      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005418:	4b03      	ldr	r3, [pc, #12]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a02      	ldr	r2, [pc, #8]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005422:	60d3      	str	r3, [r2, #12]
 8005424:	e002      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d015      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005438:	4b29      	ldr	r3, [pc, #164]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	4926      	ldr	r1, [pc, #152]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005456:	d105      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005458:	4b21      	ldr	r3, [pc, #132]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a20      	ldr	r2, [pc, #128]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800545e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005462:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d015      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005470:	4b1b      	ldr	r3, [pc, #108]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547e:	4918      	ldr	r1, [pc, #96]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548e:	d105      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005490:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4a12      	ldr	r2, [pc, #72]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d015      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b6:	490a      	ldr	r1, [pc, #40]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054c6:	d105      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4a04      	ldr	r2, [pc, #16]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000

080054e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e042      	b.n	800557c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f83b 	bl	8005584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2224      	movs	r2, #36	@ 0x24
 8005512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fbbc 	bl	8005cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8bd 	bl	80056b4 <UART_SetConfig>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e01b      	b.n	800557c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fc3b 	bl	8005df0 <UART_CheckIdleState>
 800557a:	4603      	mov	r3, r0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	@ 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d17b      	bne.n	80056aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_UART_Transmit+0x26>
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e074      	b.n	80056ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2221      	movs	r2, #33	@ 0x21
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d2:	f7fc fd8d 	bl	80020f0 <HAL_GetTick>
 80055d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d108      	bne.n	8005604 <HAL_UART_Transmit+0x6c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e003      	b.n	800560c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800560c:	e030      	b.n	8005670 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2200      	movs	r2, #0
 8005616:	2180      	movs	r1, #128	@ 0x80
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fc93 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e03d      	b.n	80056ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005644:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	3302      	adds	r3, #2
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	e007      	b.n	800565e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c8      	bne.n	800560e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	2140      	movs	r1, #64	@ 0x40
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fc5c 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e006      	b.n	80056ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b08c      	sub	sp, #48	@ 0x30
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	4313      	orrs	r3, r2
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4baa      	ldr	r3, [pc, #680]	@ (800598c <UART_SetConfig+0x2d8>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a9f      	ldr	r2, [pc, #636]	@ (8005990 <UART_SetConfig+0x2dc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571c:	4313      	orrs	r3, r2
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800572a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005734:	430b      	orrs	r3, r1
 8005736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	f023 010f 	bic.w	r1, r3, #15
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a90      	ldr	r2, [pc, #576]	@ (8005994 <UART_SetConfig+0x2e0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d125      	bne.n	80057a4 <UART_SetConfig+0xf0>
 8005758:	4b8f      	ldr	r3, [pc, #572]	@ (8005998 <UART_SetConfig+0x2e4>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b03      	cmp	r3, #3
 8005764:	d81a      	bhi.n	800579c <UART_SetConfig+0xe8>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <UART_SetConfig+0xb8>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	0800577d 	.word	0x0800577d
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005785 	.word	0x08005785
 8005778:	08005795 	.word	0x08005795
 800577c:	2301      	movs	r3, #1
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005782:	e116      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578a:	e112      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e10e      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e10a      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e106      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7c      	ldr	r2, [pc, #496]	@ (800599c <UART_SetConfig+0x2e8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d138      	bne.n	8005820 <UART_SetConfig+0x16c>
 80057ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005998 <UART_SetConfig+0x2e4>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d82d      	bhi.n	8005818 <UART_SetConfig+0x164>
 80057bc:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <UART_SetConfig+0x110>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005819 	.word	0x08005819
 80057dc:	08005819 	.word	0x08005819
 80057e0:	08005819 	.word	0x08005819
 80057e4:	08005801 	.word	0x08005801
 80057e8:	08005819 	.word	0x08005819
 80057ec:	08005819 	.word	0x08005819
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005811 	.word	0x08005811
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	e0d8      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005806:	e0d4      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e0d0      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e0cc      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e0c8      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5e      	ldr	r2, [pc, #376]	@ (80059a0 <UART_SetConfig+0x2ec>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d125      	bne.n	8005876 <UART_SetConfig+0x1c2>
 800582a:	4b5b      	ldr	r3, [pc, #364]	@ (8005998 <UART_SetConfig+0x2e4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005834:	2b30      	cmp	r3, #48	@ 0x30
 8005836:	d016      	beq.n	8005866 <UART_SetConfig+0x1b2>
 8005838:	2b30      	cmp	r3, #48	@ 0x30
 800583a:	d818      	bhi.n	800586e <UART_SetConfig+0x1ba>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d00a      	beq.n	8005856 <UART_SetConfig+0x1a2>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d814      	bhi.n	800586e <UART_SetConfig+0x1ba>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <UART_SetConfig+0x19a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d008      	beq.n	800585e <UART_SetConfig+0x1aa>
 800584c:	e00f      	b.n	800586e <UART_SetConfig+0x1ba>
 800584e:	2300      	movs	r3, #0
 8005850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005854:	e0ad      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005856:	2302      	movs	r3, #2
 8005858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585c:	e0a9      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800585e:	2304      	movs	r3, #4
 8005860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005864:	e0a5      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005866:	2308      	movs	r3, #8
 8005868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586c:	e0a1      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800586e:	2310      	movs	r3, #16
 8005870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005874:	e09d      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4a      	ldr	r2, [pc, #296]	@ (80059a4 <UART_SetConfig+0x2f0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d125      	bne.n	80058cc <UART_SetConfig+0x218>
 8005880:	4b45      	ldr	r3, [pc, #276]	@ (8005998 <UART_SetConfig+0x2e4>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005886:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800588a:	2bc0      	cmp	r3, #192	@ 0xc0
 800588c:	d016      	beq.n	80058bc <UART_SetConfig+0x208>
 800588e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005890:	d818      	bhi.n	80058c4 <UART_SetConfig+0x210>
 8005892:	2b80      	cmp	r3, #128	@ 0x80
 8005894:	d00a      	beq.n	80058ac <UART_SetConfig+0x1f8>
 8005896:	2b80      	cmp	r3, #128	@ 0x80
 8005898:	d814      	bhi.n	80058c4 <UART_SetConfig+0x210>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <UART_SetConfig+0x1f0>
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d008      	beq.n	80058b4 <UART_SetConfig+0x200>
 80058a2:	e00f      	b.n	80058c4 <UART_SetConfig+0x210>
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058aa:	e082      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80058ac:	2302      	movs	r3, #2
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b2:	e07e      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ba:	e07a      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c2:	e076      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ca:	e072      	b.n	80059b2 <UART_SetConfig+0x2fe>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <UART_SetConfig+0x2f4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d12a      	bne.n	800592c <UART_SetConfig+0x278>
 80058d6:	4b30      	ldr	r3, [pc, #192]	@ (8005998 <UART_SetConfig+0x2e4>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058e4:	d01a      	beq.n	800591c <UART_SetConfig+0x268>
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ea:	d81b      	bhi.n	8005924 <UART_SetConfig+0x270>
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f0:	d00c      	beq.n	800590c <UART_SetConfig+0x258>
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f6:	d815      	bhi.n	8005924 <UART_SetConfig+0x270>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <UART_SetConfig+0x250>
 80058fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005900:	d008      	beq.n	8005914 <UART_SetConfig+0x260>
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x270>
 8005904:	2300      	movs	r3, #0
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e052      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800590c:	2302      	movs	r3, #2
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005912:	e04e      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591a:	e04a      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005922:	e046      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592a:	e042      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <UART_SetConfig+0x2dc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d13a      	bne.n	80059ac <UART_SetConfig+0x2f8>
 8005936:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <UART_SetConfig+0x2e4>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005944:	d01a      	beq.n	800597c <UART_SetConfig+0x2c8>
 8005946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800594a:	d81b      	bhi.n	8005984 <UART_SetConfig+0x2d0>
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005950:	d00c      	beq.n	800596c <UART_SetConfig+0x2b8>
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005956:	d815      	bhi.n	8005984 <UART_SetConfig+0x2d0>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <UART_SetConfig+0x2b0>
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005960:	d008      	beq.n	8005974 <UART_SetConfig+0x2c0>
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x2d0>
 8005964:	2300      	movs	r3, #0
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e022      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800596c:	2302      	movs	r3, #2
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e01e      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e01a      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005982:	e016      	b.n	80059b2 <UART_SetConfig+0x2fe>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598a:	e012      	b.n	80059b2 <UART_SetConfig+0x2fe>
 800598c:	cfff69f3 	.word	0xcfff69f3
 8005990:	40008000 	.word	0x40008000
 8005994:	40013800 	.word	0x40013800
 8005998:	40021000 	.word	0x40021000
 800599c:	40004400 	.word	0x40004400
 80059a0:	40004800 	.word	0x40004800
 80059a4:	40004c00 	.word	0x40004c00
 80059a8:	40005000 	.word	0x40005000
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4aae      	ldr	r2, [pc, #696]	@ (8005c70 <UART_SetConfig+0x5bc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	f040 8097 	bne.w	8005aec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d823      	bhi.n	8005a0e <UART_SetConfig+0x35a>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <UART_SetConfig+0x318>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	080059ff 	.word	0x080059ff
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a0f 	.word	0x08005a0f
 80059e8:	08005a0f 	.word	0x08005a0f
 80059ec:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7ff fab8 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 80059f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b9e      	ldr	r3, [pc, #632]	@ (8005c74 <UART_SetConfig+0x5c0>)
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7ff fa43 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8005a02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8130 	beq.w	8005c82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	4a94      	ldr	r2, [pc, #592]	@ (8005c78 <UART_SetConfig+0x5c4>)
 8005a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d305      	bcc.n	8005a52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d903      	bls.n	8005a5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a58:	e113      	b.n	8005c82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	60fa      	str	r2, [r7, #12]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	4a84      	ldr	r2, [pc, #528]	@ (8005c78 <UART_SetConfig+0x5c4>)
 8005a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a7c:	f7fb f92c 	bl	8000cd8 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	020b      	lsls	r3, r1, #8
 8005a92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a96:	0202      	lsls	r2, r0, #8
 8005a98:	6979      	ldr	r1, [r7, #20]
 8005a9a:	6849      	ldr	r1, [r1, #4]
 8005a9c:	0849      	lsrs	r1, r1, #1
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	eb12 0804 	adds.w	r8, r2, r4
 8005aa8:	eb43 0905 	adc.w	r9, r3, r5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	469a      	mov	sl, r3
 8005ab4:	4693      	mov	fp, r2
 8005ab6:	4652      	mov	r2, sl
 8005ab8:	465b      	mov	r3, fp
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fb f90b 	bl	8000cd8 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad0:	d308      	bcc.n	8005ae4 <UART_SetConfig+0x430>
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad8:	d204      	bcs.n	8005ae4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a3a      	ldr	r2, [r7, #32]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	e0ce      	b.n	8005c82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aea:	e0ca      	b.n	8005c82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af4:	d166      	bne.n	8005bc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d827      	bhi.n	8005b4e <UART_SetConfig+0x49a>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x450>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7ff fa1c 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b2e:	e014      	b.n	8005b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7ff fa2e 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 8005b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b36:	e010      	b.n	8005b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b4e      	ldr	r3, [pc, #312]	@ (8005c74 <UART_SetConfig+0x5c0>)
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b3c:	e00d      	b.n	8005b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7ff f9a3 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8005b42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8090 	beq.w	8005c82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	4a44      	ldr	r2, [pc, #272]	@ (8005c78 <UART_SetConfig+0x5c4>)
 8005b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0x508>
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	8bfb      	ldrh	r3, [r7, #30]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	8bfa      	ldrh	r2, [r7, #30]
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e062      	b.n	8005c82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bc2:	e05e      	b.n	8005c82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d828      	bhi.n	8005c1e <UART_SetConfig+0x56a>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <UART_SetConfig+0x520>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005bf9 	.word	0x08005bf9
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	08005c1f 	.word	0x08005c1f
 8005be4:	08005c0f 	.word	0x08005c0f
 8005be8:	08005c1f 	.word	0x08005c1f
 8005bec:	08005c1f 	.word	0x08005c1f
 8005bf0:	08005c1f 	.word	0x08005c1f
 8005bf4:	08005c17 	.word	0x08005c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf8:	f7ff f9b4 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8005bfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bfe:	e014      	b.n	8005c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c00:	f7ff f9c6 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 8005c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c06:	e010      	b.n	8005c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c08:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <UART_SetConfig+0x5c0>)
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c0c:	e00d      	b.n	8005c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0e:	f7ff f93b 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8005c12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c14:	e009      	b.n	8005c2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c1c:	e005      	b.n	8005c2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c28:	bf00      	nop
    }

    if (pclk != 0U)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d028      	beq.n	8005c82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	4a10      	ldr	r2, [pc, #64]	@ (8005c78 <UART_SetConfig+0x5c4>)
 8005c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	441a      	add	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b0f      	cmp	r3, #15
 8005c58:	d910      	bls.n	8005c7c <UART_SetConfig+0x5c8>
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c60:	d20c      	bcs.n	8005c7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
 8005c6c:	e009      	b.n	8005c82 <UART_SetConfig+0x5ce>
 8005c6e:	bf00      	nop
 8005c70:	40008000 	.word	0x40008000
 8005c74:	00f42400 	.word	0x00f42400
 8005c78:	0800aa2c 	.word	0x0800aa2c
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3730      	adds	r7, #48	@ 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01a      	beq.n	8005dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005daa:	d10a      	bne.n	8005dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b098      	sub	sp, #96	@ 0x60
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e00:	f7fc f976 	bl	80020f0 <HAL_GetTick>
 8005e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d12f      	bne.n	8005e74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f88e 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d022      	beq.n	8005e74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e063      	b.n	8005f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d149      	bne.n	8005f16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f857 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d03c      	beq.n	8005f16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eee:	61fa      	str	r2, [r7, #28]
 8005ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	69b9      	ldr	r1, [r7, #24]
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	617b      	str	r3, [r7, #20]
   return(result);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e012      	b.n	8005f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3758      	adds	r7, #88	@ 0x58
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f54:	e04f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d04b      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7fc f8c7 	bl	80020f0 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e04e      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d037      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b80      	cmp	r3, #128	@ 0x80
 8005f8a:	d034      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b40      	cmp	r3, #64	@ 0x40
 8005f90:	d031      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d110      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f838 	bl	800601e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e029      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd0:	d111      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f81e 	bl	800601e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e00f      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d0a0      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601e:	b480      	push	{r7}
 8006020:	b095      	sub	sp, #84	@ 0x54
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006044:	643b      	str	r3, [r7, #64]	@ 0x40
 8006046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800604a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	61fb      	str	r3, [r7, #28]
   return(result);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800607c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e3      	bne.n	8006058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d118      	bne.n	80060ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	613b      	str	r3, [r7, #16]
   return(result);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060de:	bf00      	nop
 80060e0:	3754      	adds	r7, #84	@ 0x54
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <roundf>:
 80060ec:	ee10 0a10 	vmov	r0, s0
 80060f0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80060f4:	3a7f      	subs	r2, #127	@ 0x7f
 80060f6:	2a16      	cmp	r2, #22
 80060f8:	dc15      	bgt.n	8006126 <roundf+0x3a>
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	da08      	bge.n	8006110 <roundf+0x24>
 80060fe:	3201      	adds	r2, #1
 8006100:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8006104:	d101      	bne.n	800610a <roundf+0x1e>
 8006106:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800610a:	ee00 3a10 	vmov	s0, r3
 800610e:	4770      	bx	lr
 8006110:	4907      	ldr	r1, [pc, #28]	@ (8006130 <roundf+0x44>)
 8006112:	4111      	asrs	r1, r2
 8006114:	4201      	tst	r1, r0
 8006116:	d0fa      	beq.n	800610e <roundf+0x22>
 8006118:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800611c:	4113      	asrs	r3, r2
 800611e:	4403      	add	r3, r0
 8006120:	ea23 0301 	bic.w	r3, r3, r1
 8006124:	e7f1      	b.n	800610a <roundf+0x1e>
 8006126:	2a80      	cmp	r2, #128	@ 0x80
 8006128:	d1f1      	bne.n	800610e <roundf+0x22>
 800612a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800612e:	4770      	bx	lr
 8006130:	007fffff 	.word	0x007fffff

08006134 <__cvt>:
 8006134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	ec57 6b10 	vmov	r6, r7, d0
 800613c:	2f00      	cmp	r7, #0
 800613e:	460c      	mov	r4, r1
 8006140:	4619      	mov	r1, r3
 8006142:	463b      	mov	r3, r7
 8006144:	bfbb      	ittet	lt
 8006146:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800614a:	461f      	movlt	r7, r3
 800614c:	2300      	movge	r3, #0
 800614e:	232d      	movlt	r3, #45	@ 0x2d
 8006150:	700b      	strb	r3, [r1, #0]
 8006152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006154:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006158:	4691      	mov	r9, r2
 800615a:	f023 0820 	bic.w	r8, r3, #32
 800615e:	bfbc      	itt	lt
 8006160:	4632      	movlt	r2, r6
 8006162:	4616      	movlt	r6, r2
 8006164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006168:	d005      	beq.n	8006176 <__cvt+0x42>
 800616a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800616e:	d100      	bne.n	8006172 <__cvt+0x3e>
 8006170:	3401      	adds	r4, #1
 8006172:	2102      	movs	r1, #2
 8006174:	e000      	b.n	8006178 <__cvt+0x44>
 8006176:	2103      	movs	r1, #3
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	ab02      	add	r3, sp, #8
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	ec47 6b10 	vmov	d0, r6, r7
 8006184:	4653      	mov	r3, sl
 8006186:	4622      	mov	r2, r4
 8006188:	f001 f96e 	bl	8007468 <_dtoa_r>
 800618c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006190:	4605      	mov	r5, r0
 8006192:	d119      	bne.n	80061c8 <__cvt+0x94>
 8006194:	f019 0f01 	tst.w	r9, #1
 8006198:	d00e      	beq.n	80061b8 <__cvt+0x84>
 800619a:	eb00 0904 	add.w	r9, r0, r4
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 80061aa:	b108      	cbz	r0, 80061b0 <__cvt+0x7c>
 80061ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80061b0:	2230      	movs	r2, #48	@ 0x30
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	454b      	cmp	r3, r9
 80061b6:	d31e      	bcc.n	80061f6 <__cvt+0xc2>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061bc:	1b5b      	subs	r3, r3, r5
 80061be:	4628      	mov	r0, r5
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	b004      	add	sp, #16
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061cc:	eb00 0904 	add.w	r9, r0, r4
 80061d0:	d1e5      	bne.n	800619e <__cvt+0x6a>
 80061d2:	7803      	ldrb	r3, [r0, #0]
 80061d4:	2b30      	cmp	r3, #48	@ 0x30
 80061d6:	d10a      	bne.n	80061ee <__cvt+0xba>
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	4630      	mov	r0, r6
 80061de:	4639      	mov	r1, r7
 80061e0:	f7fa fc9a 	bl	8000b18 <__aeabi_dcmpeq>
 80061e4:	b918      	cbnz	r0, 80061ee <__cvt+0xba>
 80061e6:	f1c4 0401 	rsb	r4, r4, #1
 80061ea:	f8ca 4000 	str.w	r4, [sl]
 80061ee:	f8da 3000 	ldr.w	r3, [sl]
 80061f2:	4499      	add	r9, r3
 80061f4:	e7d3      	b.n	800619e <__cvt+0x6a>
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	9103      	str	r1, [sp, #12]
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e7d9      	b.n	80061b2 <__cvt+0x7e>

080061fe <__exponent>:
 80061fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006200:	2900      	cmp	r1, #0
 8006202:	bfba      	itte	lt
 8006204:	4249      	neglt	r1, r1
 8006206:	232d      	movlt	r3, #45	@ 0x2d
 8006208:	232b      	movge	r3, #43	@ 0x2b
 800620a:	2909      	cmp	r1, #9
 800620c:	7002      	strb	r2, [r0, #0]
 800620e:	7043      	strb	r3, [r0, #1]
 8006210:	dd29      	ble.n	8006266 <__exponent+0x68>
 8006212:	f10d 0307 	add.w	r3, sp, #7
 8006216:	461d      	mov	r5, r3
 8006218:	270a      	movs	r7, #10
 800621a:	461a      	mov	r2, r3
 800621c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006220:	fb07 1416 	mls	r4, r7, r6, r1
 8006224:	3430      	adds	r4, #48	@ 0x30
 8006226:	f802 4c01 	strb.w	r4, [r2, #-1]
 800622a:	460c      	mov	r4, r1
 800622c:	2c63      	cmp	r4, #99	@ 0x63
 800622e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006232:	4631      	mov	r1, r6
 8006234:	dcf1      	bgt.n	800621a <__exponent+0x1c>
 8006236:	3130      	adds	r1, #48	@ 0x30
 8006238:	1e94      	subs	r4, r2, #2
 800623a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800623e:	1c41      	adds	r1, r0, #1
 8006240:	4623      	mov	r3, r4
 8006242:	42ab      	cmp	r3, r5
 8006244:	d30a      	bcc.n	800625c <__exponent+0x5e>
 8006246:	f10d 0309 	add.w	r3, sp, #9
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	42ac      	cmp	r4, r5
 800624e:	bf88      	it	hi
 8006250:	2300      	movhi	r3, #0
 8006252:	3302      	adds	r3, #2
 8006254:	4403      	add	r3, r0
 8006256:	1a18      	subs	r0, r3, r0
 8006258:	b003      	add	sp, #12
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006260:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006264:	e7ed      	b.n	8006242 <__exponent+0x44>
 8006266:	2330      	movs	r3, #48	@ 0x30
 8006268:	3130      	adds	r1, #48	@ 0x30
 800626a:	7083      	strb	r3, [r0, #2]
 800626c:	70c1      	strb	r1, [r0, #3]
 800626e:	1d03      	adds	r3, r0, #4
 8006270:	e7f1      	b.n	8006256 <__exponent+0x58>
	...

08006274 <_printf_float>:
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	b08d      	sub	sp, #52	@ 0x34
 800627a:	460c      	mov	r4, r1
 800627c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006280:	4616      	mov	r6, r2
 8006282:	461f      	mov	r7, r3
 8006284:	4605      	mov	r5, r0
 8006286:	f000 ffdb 	bl	8007240 <_localeconv_r>
 800628a:	6803      	ldr	r3, [r0, #0]
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fa f816 	bl	80002c0 <strlen>
 8006294:	2300      	movs	r3, #0
 8006296:	930a      	str	r3, [sp, #40]	@ 0x28
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	9005      	str	r0, [sp, #20]
 800629e:	3307      	adds	r3, #7
 80062a0:	f023 0307 	bic.w	r3, r3, #7
 80062a4:	f103 0208 	add.w	r2, r3, #8
 80062a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062ac:	f8d4 b000 	ldr.w	fp, [r4]
 80062b0:	f8c8 2000 	str.w	r2, [r8]
 80062b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062bc:	9307      	str	r3, [sp, #28]
 80062be:	f8cd 8018 	str.w	r8, [sp, #24]
 80062c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ca:	4b9c      	ldr	r3, [pc, #624]	@ (800653c <_printf_float+0x2c8>)
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	f7fa fc54 	bl	8000b7c <__aeabi_dcmpun>
 80062d4:	bb70      	cbnz	r0, 8006334 <_printf_float+0xc0>
 80062d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062da:	4b98      	ldr	r3, [pc, #608]	@ (800653c <_printf_float+0x2c8>)
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295
 80062e0:	f7fa fc2e 	bl	8000b40 <__aeabi_dcmple>
 80062e4:	bb30      	cbnz	r0, 8006334 <_printf_float+0xc0>
 80062e6:	2200      	movs	r2, #0
 80062e8:	2300      	movs	r3, #0
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7fa fc1d 	bl	8000b2c <__aeabi_dcmplt>
 80062f2:	b110      	cbz	r0, 80062fa <_printf_float+0x86>
 80062f4:	232d      	movs	r3, #45	@ 0x2d
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062fa:	4a91      	ldr	r2, [pc, #580]	@ (8006540 <_printf_float+0x2cc>)
 80062fc:	4b91      	ldr	r3, [pc, #580]	@ (8006544 <_printf_float+0x2d0>)
 80062fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006302:	bf8c      	ite	hi
 8006304:	4690      	movhi	r8, r2
 8006306:	4698      	movls	r8, r3
 8006308:	2303      	movs	r3, #3
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	f02b 0304 	bic.w	r3, fp, #4
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	f04f 0900 	mov.w	r9, #0
 8006316:	9700      	str	r7, [sp, #0]
 8006318:	4633      	mov	r3, r6
 800631a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f9d2 	bl	80066c8 <_printf_common>
 8006324:	3001      	adds	r0, #1
 8006326:	f040 808d 	bne.w	8006444 <_printf_float+0x1d0>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295
 800632e:	b00d      	add	sp, #52	@ 0x34
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	4640      	mov	r0, r8
 800633a:	4649      	mov	r1, r9
 800633c:	f7fa fc1e 	bl	8000b7c <__aeabi_dcmpun>
 8006340:	b140      	cbz	r0, 8006354 <_printf_float+0xe0>
 8006342:	464b      	mov	r3, r9
 8006344:	2b00      	cmp	r3, #0
 8006346:	bfbc      	itt	lt
 8006348:	232d      	movlt	r3, #45	@ 0x2d
 800634a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800634e:	4a7e      	ldr	r2, [pc, #504]	@ (8006548 <_printf_float+0x2d4>)
 8006350:	4b7e      	ldr	r3, [pc, #504]	@ (800654c <_printf_float+0x2d8>)
 8006352:	e7d4      	b.n	80062fe <_printf_float+0x8a>
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800635a:	9206      	str	r2, [sp, #24]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	d13b      	bne.n	80063d8 <_printf_float+0x164>
 8006360:	2306      	movs	r3, #6
 8006362:	6063      	str	r3, [r4, #4]
 8006364:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006368:	2300      	movs	r3, #0
 800636a:	6022      	str	r2, [r4, #0]
 800636c:	9303      	str	r3, [sp, #12]
 800636e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006370:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006374:	ab09      	add	r3, sp, #36	@ 0x24
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6861      	ldr	r1, [r4, #4]
 800637a:	ec49 8b10 	vmov	d0, r8, r9
 800637e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff fed6 	bl	8006134 <__cvt>
 8006388:	9b06      	ldr	r3, [sp, #24]
 800638a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800638c:	2b47      	cmp	r3, #71	@ 0x47
 800638e:	4680      	mov	r8, r0
 8006390:	d129      	bne.n	80063e6 <_printf_float+0x172>
 8006392:	1cc8      	adds	r0, r1, #3
 8006394:	db02      	blt.n	800639c <_printf_float+0x128>
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	4299      	cmp	r1, r3
 800639a:	dd41      	ble.n	8006420 <_printf_float+0x1ac>
 800639c:	f1aa 0a02 	sub.w	sl, sl, #2
 80063a0:	fa5f fa8a 	uxtb.w	sl, sl
 80063a4:	3901      	subs	r1, #1
 80063a6:	4652      	mov	r2, sl
 80063a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80063ae:	f7ff ff26 	bl	80061fe <__exponent>
 80063b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063b4:	1813      	adds	r3, r2, r0
 80063b6:	2a01      	cmp	r2, #1
 80063b8:	4681      	mov	r9, r0
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	dc02      	bgt.n	80063c4 <_printf_float+0x150>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	07d2      	lsls	r2, r2, #31
 80063c2:	d501      	bpl.n	80063c8 <_printf_float+0x154>
 80063c4:	3301      	adds	r3, #1
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0a2      	beq.n	8006316 <_printf_float+0xa2>
 80063d0:	232d      	movs	r3, #45	@ 0x2d
 80063d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d6:	e79e      	b.n	8006316 <_printf_float+0xa2>
 80063d8:	9a06      	ldr	r2, [sp, #24]
 80063da:	2a47      	cmp	r2, #71	@ 0x47
 80063dc:	d1c2      	bne.n	8006364 <_printf_float+0xf0>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1c0      	bne.n	8006364 <_printf_float+0xf0>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7bd      	b.n	8006362 <_printf_float+0xee>
 80063e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063ea:	d9db      	bls.n	80063a4 <_printf_float+0x130>
 80063ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063f0:	d118      	bne.n	8006424 <_printf_float+0x1b0>
 80063f2:	2900      	cmp	r1, #0
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	dd0b      	ble.n	8006410 <_printf_float+0x19c>
 80063f8:	6121      	str	r1, [r4, #16]
 80063fa:	b913      	cbnz	r3, 8006402 <_printf_float+0x18e>
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	07d0      	lsls	r0, r2, #31
 8006400:	d502      	bpl.n	8006408 <_printf_float+0x194>
 8006402:	3301      	adds	r3, #1
 8006404:	440b      	add	r3, r1
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	65a1      	str	r1, [r4, #88]	@ 0x58
 800640a:	f04f 0900 	mov.w	r9, #0
 800640e:	e7db      	b.n	80063c8 <_printf_float+0x154>
 8006410:	b913      	cbnz	r3, 8006418 <_printf_float+0x1a4>
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	07d2      	lsls	r2, r2, #31
 8006416:	d501      	bpl.n	800641c <_printf_float+0x1a8>
 8006418:	3302      	adds	r3, #2
 800641a:	e7f4      	b.n	8006406 <_printf_float+0x192>
 800641c:	2301      	movs	r3, #1
 800641e:	e7f2      	b.n	8006406 <_printf_float+0x192>
 8006420:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006426:	4299      	cmp	r1, r3
 8006428:	db05      	blt.n	8006436 <_printf_float+0x1c2>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	6121      	str	r1, [r4, #16]
 800642e:	07d8      	lsls	r0, r3, #31
 8006430:	d5ea      	bpl.n	8006408 <_printf_float+0x194>
 8006432:	1c4b      	adds	r3, r1, #1
 8006434:	e7e7      	b.n	8006406 <_printf_float+0x192>
 8006436:	2900      	cmp	r1, #0
 8006438:	bfd4      	ite	le
 800643a:	f1c1 0202 	rsble	r2, r1, #2
 800643e:	2201      	movgt	r2, #1
 8006440:	4413      	add	r3, r2
 8006442:	e7e0      	b.n	8006406 <_printf_float+0x192>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	055a      	lsls	r2, r3, #21
 8006448:	d407      	bmi.n	800645a <_printf_float+0x1e6>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	4642      	mov	r2, r8
 800644e:	4631      	mov	r1, r6
 8006450:	4628      	mov	r0, r5
 8006452:	47b8      	blx	r7
 8006454:	3001      	adds	r0, #1
 8006456:	d12b      	bne.n	80064b0 <_printf_float+0x23c>
 8006458:	e767      	b.n	800632a <_printf_float+0xb6>
 800645a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800645e:	f240 80dd 	bls.w	800661c <_printf_float+0x3a8>
 8006462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006466:	2200      	movs	r2, #0
 8006468:	2300      	movs	r3, #0
 800646a:	f7fa fb55 	bl	8000b18 <__aeabi_dcmpeq>
 800646e:	2800      	cmp	r0, #0
 8006470:	d033      	beq.n	80064da <_printf_float+0x266>
 8006472:	4a37      	ldr	r2, [pc, #220]	@ (8006550 <_printf_float+0x2dc>)
 8006474:	2301      	movs	r3, #1
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f af54 	beq.w	800632a <_printf_float+0xb6>
 8006482:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006486:	4543      	cmp	r3, r8
 8006488:	db02      	blt.n	8006490 <_printf_float+0x21c>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	07d8      	lsls	r0, r3, #31
 800648e:	d50f      	bpl.n	80064b0 <_printf_float+0x23c>
 8006490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f af45 	beq.w	800632a <_printf_float+0xb6>
 80064a0:	f04f 0900 	mov.w	r9, #0
 80064a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80064a8:	f104 0a1a 	add.w	sl, r4, #26
 80064ac:	45c8      	cmp	r8, r9
 80064ae:	dc09      	bgt.n	80064c4 <_printf_float+0x250>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	f100 8103 	bmi.w	80066be <_printf_float+0x44a>
 80064b8:	68e0      	ldr	r0, [r4, #12]
 80064ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064bc:	4298      	cmp	r0, r3
 80064be:	bfb8      	it	lt
 80064c0:	4618      	movlt	r0, r3
 80064c2:	e734      	b.n	800632e <_printf_float+0xba>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4652      	mov	r2, sl
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f af2b 	beq.w	800632a <_printf_float+0xb6>
 80064d4:	f109 0901 	add.w	r9, r9, #1
 80064d8:	e7e8      	b.n	80064ac <_printf_float+0x238>
 80064da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	dc39      	bgt.n	8006554 <_printf_float+0x2e0>
 80064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <_printf_float+0x2dc>)
 80064e2:	2301      	movs	r3, #1
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af1d 	beq.w	800632a <_printf_float+0xb6>
 80064f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064f4:	ea59 0303 	orrs.w	r3, r9, r3
 80064f8:	d102      	bne.n	8006500 <_printf_float+0x28c>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	07d9      	lsls	r1, r3, #31
 80064fe:	d5d7      	bpl.n	80064b0 <_printf_float+0x23c>
 8006500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af0d 	beq.w	800632a <_printf_float+0xb6>
 8006510:	f04f 0a00 	mov.w	sl, #0
 8006514:	f104 0b1a 	add.w	fp, r4, #26
 8006518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651a:	425b      	negs	r3, r3
 800651c:	4553      	cmp	r3, sl
 800651e:	dc01      	bgt.n	8006524 <_printf_float+0x2b0>
 8006520:	464b      	mov	r3, r9
 8006522:	e793      	b.n	800644c <_printf_float+0x1d8>
 8006524:	2301      	movs	r3, #1
 8006526:	465a      	mov	r2, fp
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f aefb 	beq.w	800632a <_printf_float+0xb6>
 8006534:	f10a 0a01 	add.w	sl, sl, #1
 8006538:	e7ee      	b.n	8006518 <_printf_float+0x2a4>
 800653a:	bf00      	nop
 800653c:	7fefffff 	.word	0x7fefffff
 8006540:	0800aa48 	.word	0x0800aa48
 8006544:	0800aa44 	.word	0x0800aa44
 8006548:	0800aa50 	.word	0x0800aa50
 800654c:	0800aa4c 	.word	0x0800aa4c
 8006550:	0800aa54 	.word	0x0800aa54
 8006554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800655a:	4553      	cmp	r3, sl
 800655c:	bfa8      	it	ge
 800655e:	4653      	movge	r3, sl
 8006560:	2b00      	cmp	r3, #0
 8006562:	4699      	mov	r9, r3
 8006564:	dc36      	bgt.n	80065d4 <_printf_float+0x360>
 8006566:	f04f 0b00 	mov.w	fp, #0
 800656a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800656e:	f104 021a 	add.w	r2, r4, #26
 8006572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006574:	9306      	str	r3, [sp, #24]
 8006576:	eba3 0309 	sub.w	r3, r3, r9
 800657a:	455b      	cmp	r3, fp
 800657c:	dc31      	bgt.n	80065e2 <_printf_float+0x36e>
 800657e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006580:	459a      	cmp	sl, r3
 8006582:	dc3a      	bgt.n	80065fa <_printf_float+0x386>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07da      	lsls	r2, r3, #31
 8006588:	d437      	bmi.n	80065fa <_printf_float+0x386>
 800658a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658c:	ebaa 0903 	sub.w	r9, sl, r3
 8006590:	9b06      	ldr	r3, [sp, #24]
 8006592:	ebaa 0303 	sub.w	r3, sl, r3
 8006596:	4599      	cmp	r9, r3
 8006598:	bfa8      	it	ge
 800659a:	4699      	movge	r9, r3
 800659c:	f1b9 0f00 	cmp.w	r9, #0
 80065a0:	dc33      	bgt.n	800660a <_printf_float+0x396>
 80065a2:	f04f 0800 	mov.w	r8, #0
 80065a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065aa:	f104 0b1a 	add.w	fp, r4, #26
 80065ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b0:	ebaa 0303 	sub.w	r3, sl, r3
 80065b4:	eba3 0309 	sub.w	r3, r3, r9
 80065b8:	4543      	cmp	r3, r8
 80065ba:	f77f af79 	ble.w	80064b0 <_printf_float+0x23c>
 80065be:	2301      	movs	r3, #1
 80065c0:	465a      	mov	r2, fp
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	f43f aeae 	beq.w	800632a <_printf_float+0xb6>
 80065ce:	f108 0801 	add.w	r8, r8, #1
 80065d2:	e7ec      	b.n	80065ae <_printf_float+0x33a>
 80065d4:	4642      	mov	r2, r8
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	d1c2      	bne.n	8006566 <_printf_float+0x2f2>
 80065e0:	e6a3      	b.n	800632a <_printf_float+0xb6>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	9206      	str	r2, [sp, #24]
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f ae9c 	beq.w	800632a <_printf_float+0xb6>
 80065f2:	9a06      	ldr	r2, [sp, #24]
 80065f4:	f10b 0b01 	add.w	fp, fp, #1
 80065f8:	e7bb      	b.n	8006572 <_printf_float+0x2fe>
 80065fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	d1c0      	bne.n	800658a <_printf_float+0x316>
 8006608:	e68f      	b.n	800632a <_printf_float+0xb6>
 800660a:	9a06      	ldr	r2, [sp, #24]
 800660c:	464b      	mov	r3, r9
 800660e:	4442      	add	r2, r8
 8006610:	4631      	mov	r1, r6
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	d1c3      	bne.n	80065a2 <_printf_float+0x32e>
 800661a:	e686      	b.n	800632a <_printf_float+0xb6>
 800661c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006620:	f1ba 0f01 	cmp.w	sl, #1
 8006624:	dc01      	bgt.n	800662a <_printf_float+0x3b6>
 8006626:	07db      	lsls	r3, r3, #31
 8006628:	d536      	bpl.n	8006698 <_printf_float+0x424>
 800662a:	2301      	movs	r3, #1
 800662c:	4642      	mov	r2, r8
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae78 	beq.w	800632a <_printf_float+0xb6>
 800663a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f ae70 	beq.w	800632a <_printf_float+0xb6>
 800664a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800664e:	2200      	movs	r2, #0
 8006650:	2300      	movs	r3, #0
 8006652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006656:	f7fa fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 800665a:	b9c0      	cbnz	r0, 800668e <_printf_float+0x41a>
 800665c:	4653      	mov	r3, sl
 800665e:	f108 0201 	add.w	r2, r8, #1
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	d10c      	bne.n	8006686 <_printf_float+0x412>
 800666c:	e65d      	b.n	800632a <_printf_float+0xb6>
 800666e:	2301      	movs	r3, #1
 8006670:	465a      	mov	r2, fp
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	f43f ae56 	beq.w	800632a <_printf_float+0xb6>
 800667e:	f108 0801 	add.w	r8, r8, #1
 8006682:	45d0      	cmp	r8, sl
 8006684:	dbf3      	blt.n	800666e <_printf_float+0x3fa>
 8006686:	464b      	mov	r3, r9
 8006688:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800668c:	e6df      	b.n	800644e <_printf_float+0x1da>
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	f104 0b1a 	add.w	fp, r4, #26
 8006696:	e7f4      	b.n	8006682 <_printf_float+0x40e>
 8006698:	2301      	movs	r3, #1
 800669a:	4642      	mov	r2, r8
 800669c:	e7e1      	b.n	8006662 <_printf_float+0x3ee>
 800669e:	2301      	movs	r3, #1
 80066a0:	464a      	mov	r2, r9
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f ae3e 	beq.w	800632a <_printf_float+0xb6>
 80066ae:	f108 0801 	add.w	r8, r8, #1
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066b6:	1a5b      	subs	r3, r3, r1
 80066b8:	4543      	cmp	r3, r8
 80066ba:	dcf0      	bgt.n	800669e <_printf_float+0x42a>
 80066bc:	e6fc      	b.n	80064b8 <_printf_float+0x244>
 80066be:	f04f 0800 	mov.w	r8, #0
 80066c2:	f104 0919 	add.w	r9, r4, #25
 80066c6:	e7f4      	b.n	80066b2 <_printf_float+0x43e>

080066c8 <_printf_common>:
 80066c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066cc:	4616      	mov	r6, r2
 80066ce:	4698      	mov	r8, r3
 80066d0:	688a      	ldr	r2, [r1, #8]
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d8:	4293      	cmp	r3, r2
 80066da:	bfb8      	it	lt
 80066dc:	4613      	movlt	r3, r2
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066e4:	4607      	mov	r7, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	b10a      	cbz	r2, 80066ee <_printf_common+0x26>
 80066ea:	3301      	adds	r3, #1
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	0699      	lsls	r1, r3, #26
 80066f2:	bf42      	ittt	mi
 80066f4:	6833      	ldrmi	r3, [r6, #0]
 80066f6:	3302      	addmi	r3, #2
 80066f8:	6033      	strmi	r3, [r6, #0]
 80066fa:	6825      	ldr	r5, [r4, #0]
 80066fc:	f015 0506 	ands.w	r5, r5, #6
 8006700:	d106      	bne.n	8006710 <_printf_common+0x48>
 8006702:	f104 0a19 	add.w	sl, r4, #25
 8006706:	68e3      	ldr	r3, [r4, #12]
 8006708:	6832      	ldr	r2, [r6, #0]
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	42ab      	cmp	r3, r5
 800670e:	dc26      	bgt.n	800675e <_printf_common+0x96>
 8006710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	3b00      	subs	r3, #0
 8006718:	bf18      	it	ne
 800671a:	2301      	movne	r3, #1
 800671c:	0692      	lsls	r2, r2, #26
 800671e:	d42b      	bmi.n	8006778 <_printf_common+0xb0>
 8006720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006724:	4641      	mov	r1, r8
 8006726:	4638      	mov	r0, r7
 8006728:	47c8      	blx	r9
 800672a:	3001      	adds	r0, #1
 800672c:	d01e      	beq.n	800676c <_printf_common+0xa4>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	6922      	ldr	r2, [r4, #16]
 8006732:	f003 0306 	and.w	r3, r3, #6
 8006736:	2b04      	cmp	r3, #4
 8006738:	bf02      	ittt	eq
 800673a:	68e5      	ldreq	r5, [r4, #12]
 800673c:	6833      	ldreq	r3, [r6, #0]
 800673e:	1aed      	subeq	r5, r5, r3
 8006740:	68a3      	ldr	r3, [r4, #8]
 8006742:	bf0c      	ite	eq
 8006744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006748:	2500      	movne	r5, #0
 800674a:	4293      	cmp	r3, r2
 800674c:	bfc4      	itt	gt
 800674e:	1a9b      	subgt	r3, r3, r2
 8006750:	18ed      	addgt	r5, r5, r3
 8006752:	2600      	movs	r6, #0
 8006754:	341a      	adds	r4, #26
 8006756:	42b5      	cmp	r5, r6
 8006758:	d11a      	bne.n	8006790 <_printf_common+0xc8>
 800675a:	2000      	movs	r0, #0
 800675c:	e008      	b.n	8006770 <_printf_common+0xa8>
 800675e:	2301      	movs	r3, #1
 8006760:	4652      	mov	r2, sl
 8006762:	4641      	mov	r1, r8
 8006764:	4638      	mov	r0, r7
 8006766:	47c8      	blx	r9
 8006768:	3001      	adds	r0, #1
 800676a:	d103      	bne.n	8006774 <_printf_common+0xac>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	3501      	adds	r5, #1
 8006776:	e7c6      	b.n	8006706 <_printf_common+0x3e>
 8006778:	18e1      	adds	r1, r4, r3
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	2030      	movs	r0, #48	@ 0x30
 800677e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006782:	4422      	add	r2, r4
 8006784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800678c:	3302      	adds	r3, #2
 800678e:	e7c7      	b.n	8006720 <_printf_common+0x58>
 8006790:	2301      	movs	r3, #1
 8006792:	4622      	mov	r2, r4
 8006794:	4641      	mov	r1, r8
 8006796:	4638      	mov	r0, r7
 8006798:	47c8      	blx	r9
 800679a:	3001      	adds	r0, #1
 800679c:	d0e6      	beq.n	800676c <_printf_common+0xa4>
 800679e:	3601      	adds	r6, #1
 80067a0:	e7d9      	b.n	8006756 <_printf_common+0x8e>
	...

080067a4 <_printf_i>:
 80067a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a8:	7e0f      	ldrb	r7, [r1, #24]
 80067aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067ac:	2f78      	cmp	r7, #120	@ 0x78
 80067ae:	4691      	mov	r9, r2
 80067b0:	4680      	mov	r8, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	469a      	mov	sl, r3
 80067b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ba:	d807      	bhi.n	80067cc <_printf_i+0x28>
 80067bc:	2f62      	cmp	r7, #98	@ 0x62
 80067be:	d80a      	bhi.n	80067d6 <_printf_i+0x32>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	f000 80d1 	beq.w	8006968 <_printf_i+0x1c4>
 80067c6:	2f58      	cmp	r7, #88	@ 0x58
 80067c8:	f000 80b8 	beq.w	800693c <_printf_i+0x198>
 80067cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067d4:	e03a      	b.n	800684c <_printf_i+0xa8>
 80067d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067da:	2b15      	cmp	r3, #21
 80067dc:	d8f6      	bhi.n	80067cc <_printf_i+0x28>
 80067de:	a101      	add	r1, pc, #4	@ (adr r1, 80067e4 <_printf_i+0x40>)
 80067e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e4:	0800683d 	.word	0x0800683d
 80067e8:	08006851 	.word	0x08006851
 80067ec:	080067cd 	.word	0x080067cd
 80067f0:	080067cd 	.word	0x080067cd
 80067f4:	080067cd 	.word	0x080067cd
 80067f8:	080067cd 	.word	0x080067cd
 80067fc:	08006851 	.word	0x08006851
 8006800:	080067cd 	.word	0x080067cd
 8006804:	080067cd 	.word	0x080067cd
 8006808:	080067cd 	.word	0x080067cd
 800680c:	080067cd 	.word	0x080067cd
 8006810:	0800694f 	.word	0x0800694f
 8006814:	0800687b 	.word	0x0800687b
 8006818:	08006909 	.word	0x08006909
 800681c:	080067cd 	.word	0x080067cd
 8006820:	080067cd 	.word	0x080067cd
 8006824:	08006971 	.word	0x08006971
 8006828:	080067cd 	.word	0x080067cd
 800682c:	0800687b 	.word	0x0800687b
 8006830:	080067cd 	.word	0x080067cd
 8006834:	080067cd 	.word	0x080067cd
 8006838:	08006911 	.word	0x08006911
 800683c:	6833      	ldr	r3, [r6, #0]
 800683e:	1d1a      	adds	r2, r3, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6032      	str	r2, [r6, #0]
 8006844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800684c:	2301      	movs	r3, #1
 800684e:	e09c      	b.n	800698a <_printf_i+0x1e6>
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	1d19      	adds	r1, r3, #4
 8006856:	6031      	str	r1, [r6, #0]
 8006858:	0606      	lsls	r6, r0, #24
 800685a:	d501      	bpl.n	8006860 <_printf_i+0xbc>
 800685c:	681d      	ldr	r5, [r3, #0]
 800685e:	e003      	b.n	8006868 <_printf_i+0xc4>
 8006860:	0645      	lsls	r5, r0, #25
 8006862:	d5fb      	bpl.n	800685c <_printf_i+0xb8>
 8006864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006868:	2d00      	cmp	r5, #0
 800686a:	da03      	bge.n	8006874 <_printf_i+0xd0>
 800686c:	232d      	movs	r3, #45	@ 0x2d
 800686e:	426d      	negs	r5, r5
 8006870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006874:	4858      	ldr	r0, [pc, #352]	@ (80069d8 <_printf_i+0x234>)
 8006876:	230a      	movs	r3, #10
 8006878:	e011      	b.n	800689e <_printf_i+0xfa>
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	6833      	ldr	r3, [r6, #0]
 800687e:	0608      	lsls	r0, r1, #24
 8006880:	f853 5b04 	ldr.w	r5, [r3], #4
 8006884:	d402      	bmi.n	800688c <_printf_i+0xe8>
 8006886:	0649      	lsls	r1, r1, #25
 8006888:	bf48      	it	mi
 800688a:	b2ad      	uxthmi	r5, r5
 800688c:	2f6f      	cmp	r7, #111	@ 0x6f
 800688e:	4852      	ldr	r0, [pc, #328]	@ (80069d8 <_printf_i+0x234>)
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	bf14      	ite	ne
 8006894:	230a      	movne	r3, #10
 8006896:	2308      	moveq	r3, #8
 8006898:	2100      	movs	r1, #0
 800689a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800689e:	6866      	ldr	r6, [r4, #4]
 80068a0:	60a6      	str	r6, [r4, #8]
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	db05      	blt.n	80068b2 <_printf_i+0x10e>
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	432e      	orrs	r6, r5
 80068aa:	f021 0104 	bic.w	r1, r1, #4
 80068ae:	6021      	str	r1, [r4, #0]
 80068b0:	d04b      	beq.n	800694a <_printf_i+0x1a6>
 80068b2:	4616      	mov	r6, r2
 80068b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b8:	fb03 5711 	mls	r7, r3, r1, r5
 80068bc:	5dc7      	ldrb	r7, [r0, r7]
 80068be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068c2:	462f      	mov	r7, r5
 80068c4:	42bb      	cmp	r3, r7
 80068c6:	460d      	mov	r5, r1
 80068c8:	d9f4      	bls.n	80068b4 <_printf_i+0x110>
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d10b      	bne.n	80068e6 <_printf_i+0x142>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	07df      	lsls	r7, r3, #31
 80068d2:	d508      	bpl.n	80068e6 <_printf_i+0x142>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	6861      	ldr	r1, [r4, #4]
 80068d8:	4299      	cmp	r1, r3
 80068da:	bfde      	ittt	le
 80068dc:	2330      	movle	r3, #48	@ 0x30
 80068de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e6:	1b92      	subs	r2, r2, r6
 80068e8:	6122      	str	r2, [r4, #16]
 80068ea:	f8cd a000 	str.w	sl, [sp]
 80068ee:	464b      	mov	r3, r9
 80068f0:	aa03      	add	r2, sp, #12
 80068f2:	4621      	mov	r1, r4
 80068f4:	4640      	mov	r0, r8
 80068f6:	f7ff fee7 	bl	80066c8 <_printf_common>
 80068fa:	3001      	adds	r0, #1
 80068fc:	d14a      	bne.n	8006994 <_printf_i+0x1f0>
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	b004      	add	sp, #16
 8006904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	f043 0320 	orr.w	r3, r3, #32
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	4832      	ldr	r0, [pc, #200]	@ (80069dc <_printf_i+0x238>)
 8006912:	2778      	movs	r7, #120	@ 0x78
 8006914:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	6831      	ldr	r1, [r6, #0]
 800691c:	061f      	lsls	r7, r3, #24
 800691e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006922:	d402      	bmi.n	800692a <_printf_i+0x186>
 8006924:	065f      	lsls	r7, r3, #25
 8006926:	bf48      	it	mi
 8006928:	b2ad      	uxthmi	r5, r5
 800692a:	6031      	str	r1, [r6, #0]
 800692c:	07d9      	lsls	r1, r3, #31
 800692e:	bf44      	itt	mi
 8006930:	f043 0320 	orrmi.w	r3, r3, #32
 8006934:	6023      	strmi	r3, [r4, #0]
 8006936:	b11d      	cbz	r5, 8006940 <_printf_i+0x19c>
 8006938:	2310      	movs	r3, #16
 800693a:	e7ad      	b.n	8006898 <_printf_i+0xf4>
 800693c:	4826      	ldr	r0, [pc, #152]	@ (80069d8 <_printf_i+0x234>)
 800693e:	e7e9      	b.n	8006914 <_printf_i+0x170>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f023 0320 	bic.w	r3, r3, #32
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	e7f6      	b.n	8006938 <_printf_i+0x194>
 800694a:	4616      	mov	r6, r2
 800694c:	e7bd      	b.n	80068ca <_printf_i+0x126>
 800694e:	6833      	ldr	r3, [r6, #0]
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	6961      	ldr	r1, [r4, #20]
 8006954:	1d18      	adds	r0, r3, #4
 8006956:	6030      	str	r0, [r6, #0]
 8006958:	062e      	lsls	r6, r5, #24
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	d501      	bpl.n	8006962 <_printf_i+0x1be>
 800695e:	6019      	str	r1, [r3, #0]
 8006960:	e002      	b.n	8006968 <_printf_i+0x1c4>
 8006962:	0668      	lsls	r0, r5, #25
 8006964:	d5fb      	bpl.n	800695e <_printf_i+0x1ba>
 8006966:	8019      	strh	r1, [r3, #0]
 8006968:	2300      	movs	r3, #0
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	4616      	mov	r6, r2
 800696e:	e7bc      	b.n	80068ea <_printf_i+0x146>
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	6032      	str	r2, [r6, #0]
 8006976:	681e      	ldr	r6, [r3, #0]
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	2100      	movs	r1, #0
 800697c:	4630      	mov	r0, r6
 800697e:	f7f9 fc4f 	bl	8000220 <memchr>
 8006982:	b108      	cbz	r0, 8006988 <_printf_i+0x1e4>
 8006984:	1b80      	subs	r0, r0, r6
 8006986:	6060      	str	r0, [r4, #4]
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	2300      	movs	r3, #0
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006992:	e7aa      	b.n	80068ea <_printf_i+0x146>
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	4632      	mov	r2, r6
 8006998:	4649      	mov	r1, r9
 800699a:	4640      	mov	r0, r8
 800699c:	47d0      	blx	sl
 800699e:	3001      	adds	r0, #1
 80069a0:	d0ad      	beq.n	80068fe <_printf_i+0x15a>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	079b      	lsls	r3, r3, #30
 80069a6:	d413      	bmi.n	80069d0 <_printf_i+0x22c>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e7a6      	b.n	8006902 <_printf_i+0x15e>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4632      	mov	r2, r6
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	47d0      	blx	sl
 80069be:	3001      	adds	r0, #1
 80069c0:	d09d      	beq.n	80068fe <_printf_i+0x15a>
 80069c2:	3501      	adds	r5, #1
 80069c4:	68e3      	ldr	r3, [r4, #12]
 80069c6:	9903      	ldr	r1, [sp, #12]
 80069c8:	1a5b      	subs	r3, r3, r1
 80069ca:	42ab      	cmp	r3, r5
 80069cc:	dcf2      	bgt.n	80069b4 <_printf_i+0x210>
 80069ce:	e7eb      	b.n	80069a8 <_printf_i+0x204>
 80069d0:	2500      	movs	r5, #0
 80069d2:	f104 0619 	add.w	r6, r4, #25
 80069d6:	e7f5      	b.n	80069c4 <_printf_i+0x220>
 80069d8:	0800aa56 	.word	0x0800aa56
 80069dc:	0800aa67 	.word	0x0800aa67

080069e0 <_scanf_float>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	b087      	sub	sp, #28
 80069e6:	4691      	mov	r9, r2
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	688b      	ldr	r3, [r1, #8]
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80069f2:	bf81      	itttt	hi
 80069f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80069f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80069fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a00:	608b      	strhi	r3, [r1, #8]
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	460a      	mov	r2, r1
 8006a06:	f04f 0500 	mov.w	r5, #0
 8006a0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a0e:	f842 3b1c 	str.w	r3, [r2], #28
 8006a12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a16:	4680      	mov	r8, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	bf98      	it	ls
 8006a1c:	f04f 0b00 	movls.w	fp, #0
 8006a20:	9201      	str	r2, [sp, #4]
 8006a22:	4616      	mov	r6, r2
 8006a24:	46aa      	mov	sl, r5
 8006a26:	462f      	mov	r7, r5
 8006a28:	9502      	str	r5, [sp, #8]
 8006a2a:	68a2      	ldr	r2, [r4, #8]
 8006a2c:	b15a      	cbz	r2, 8006a46 <_scanf_float+0x66>
 8006a2e:	f8d9 3000 	ldr.w	r3, [r9]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a36:	d863      	bhi.n	8006b00 <_scanf_float+0x120>
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d83b      	bhi.n	8006ab4 <_scanf_float+0xd4>
 8006a3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a40:	b2c8      	uxtb	r0, r1
 8006a42:	280e      	cmp	r0, #14
 8006a44:	d939      	bls.n	8006aba <_scanf_float+0xda>
 8006a46:	b11f      	cbz	r7, 8006a50 <_scanf_float+0x70>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a54:	f1ba 0f01 	cmp.w	sl, #1
 8006a58:	f200 8114 	bhi.w	8006c84 <_scanf_float+0x2a4>
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	429e      	cmp	r6, r3
 8006a60:	f200 8105 	bhi.w	8006c6e <_scanf_float+0x28e>
 8006a64:	2001      	movs	r0, #1
 8006a66:	b007      	add	sp, #28
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006a70:	2a0d      	cmp	r2, #13
 8006a72:	d8e8      	bhi.n	8006a46 <_scanf_float+0x66>
 8006a74:	a101      	add	r1, pc, #4	@ (adr r1, 8006a7c <_scanf_float+0x9c>)
 8006a76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006bc5 	.word	0x08006bc5
 8006a80:	08006a47 	.word	0x08006a47
 8006a84:	08006a47 	.word	0x08006a47
 8006a88:	08006a47 	.word	0x08006a47
 8006a8c:	08006c21 	.word	0x08006c21
 8006a90:	08006bfb 	.word	0x08006bfb
 8006a94:	08006a47 	.word	0x08006a47
 8006a98:	08006a47 	.word	0x08006a47
 8006a9c:	08006bd3 	.word	0x08006bd3
 8006aa0:	08006a47 	.word	0x08006a47
 8006aa4:	08006a47 	.word	0x08006a47
 8006aa8:	08006a47 	.word	0x08006a47
 8006aac:	08006a47 	.word	0x08006a47
 8006ab0:	08006b8f 	.word	0x08006b8f
 8006ab4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ab8:	e7da      	b.n	8006a70 <_scanf_float+0x90>
 8006aba:	290e      	cmp	r1, #14
 8006abc:	d8c3      	bhi.n	8006a46 <_scanf_float+0x66>
 8006abe:	a001      	add	r0, pc, #4	@ (adr r0, 8006ac4 <_scanf_float+0xe4>)
 8006ac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ac4:	08006b7f 	.word	0x08006b7f
 8006ac8:	08006a47 	.word	0x08006a47
 8006acc:	08006b7f 	.word	0x08006b7f
 8006ad0:	08006c0f 	.word	0x08006c0f
 8006ad4:	08006a47 	.word	0x08006a47
 8006ad8:	08006b21 	.word	0x08006b21
 8006adc:	08006b65 	.word	0x08006b65
 8006ae0:	08006b65 	.word	0x08006b65
 8006ae4:	08006b65 	.word	0x08006b65
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b65 	.word	0x08006b65
 8006af0:	08006b65 	.word	0x08006b65
 8006af4:	08006b65 	.word	0x08006b65
 8006af8:	08006b65 	.word	0x08006b65
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b02:	d809      	bhi.n	8006b18 <_scanf_float+0x138>
 8006b04:	2b60      	cmp	r3, #96	@ 0x60
 8006b06:	d8b1      	bhi.n	8006a6c <_scanf_float+0x8c>
 8006b08:	2b54      	cmp	r3, #84	@ 0x54
 8006b0a:	d07b      	beq.n	8006c04 <_scanf_float+0x224>
 8006b0c:	2b59      	cmp	r3, #89	@ 0x59
 8006b0e:	d19a      	bne.n	8006a46 <_scanf_float+0x66>
 8006b10:	2d07      	cmp	r5, #7
 8006b12:	d198      	bne.n	8006a46 <_scanf_float+0x66>
 8006b14:	2508      	movs	r5, #8
 8006b16:	e02f      	b.n	8006b78 <_scanf_float+0x198>
 8006b18:	2b74      	cmp	r3, #116	@ 0x74
 8006b1a:	d073      	beq.n	8006c04 <_scanf_float+0x224>
 8006b1c:	2b79      	cmp	r3, #121	@ 0x79
 8006b1e:	e7f6      	b.n	8006b0e <_scanf_float+0x12e>
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	05c8      	lsls	r0, r1, #23
 8006b24:	d51e      	bpl.n	8006b64 <_scanf_float+0x184>
 8006b26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b2a:	6021      	str	r1, [r4, #0]
 8006b2c:	3701      	adds	r7, #1
 8006b2e:	f1bb 0f00 	cmp.w	fp, #0
 8006b32:	d003      	beq.n	8006b3c <_scanf_float+0x15c>
 8006b34:	3201      	adds	r2, #1
 8006b36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b3a:	60a2      	str	r2, [r4, #8]
 8006b3c:	68a3      	ldr	r3, [r4, #8]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	3301      	adds	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f8c9 3004 	str.w	r3, [r9, #4]
 8006b54:	f340 8082 	ble.w	8006c5c <_scanf_float+0x27c>
 8006b58:	f8d9 3000 	ldr.w	r3, [r9]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f8c9 3000 	str.w	r3, [r9]
 8006b62:	e762      	b.n	8006a2a <_scanf_float+0x4a>
 8006b64:	eb1a 0105 	adds.w	r1, sl, r5
 8006b68:	f47f af6d 	bne.w	8006a46 <_scanf_float+0x66>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	460d      	mov	r5, r1
 8006b76:	468a      	mov	sl, r1
 8006b78:	f806 3b01 	strb.w	r3, [r6], #1
 8006b7c:	e7de      	b.n	8006b3c <_scanf_float+0x15c>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	0610      	lsls	r0, r2, #24
 8006b82:	f57f af60 	bpl.w	8006a46 <_scanf_float+0x66>
 8006b86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	e7f4      	b.n	8006b78 <_scanf_float+0x198>
 8006b8e:	f1ba 0f00 	cmp.w	sl, #0
 8006b92:	d10c      	bne.n	8006bae <_scanf_float+0x1ce>
 8006b94:	b977      	cbnz	r7, 8006bb4 <_scanf_float+0x1d4>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ba0:	d108      	bne.n	8006bb4 <_scanf_float+0x1d4>
 8006ba2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	f04f 0a01 	mov.w	sl, #1
 8006bac:	e7e4      	b.n	8006b78 <_scanf_float+0x198>
 8006bae:	f1ba 0f02 	cmp.w	sl, #2
 8006bb2:	d050      	beq.n	8006c56 <_scanf_float+0x276>
 8006bb4:	2d01      	cmp	r5, #1
 8006bb6:	d002      	beq.n	8006bbe <_scanf_float+0x1de>
 8006bb8:	2d04      	cmp	r5, #4
 8006bba:	f47f af44 	bne.w	8006a46 <_scanf_float+0x66>
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	b2ed      	uxtb	r5, r5
 8006bc2:	e7d9      	b.n	8006b78 <_scanf_float+0x198>
 8006bc4:	f1ba 0f01 	cmp.w	sl, #1
 8006bc8:	f47f af3d 	bne.w	8006a46 <_scanf_float+0x66>
 8006bcc:	f04f 0a02 	mov.w	sl, #2
 8006bd0:	e7d2      	b.n	8006b78 <_scanf_float+0x198>
 8006bd2:	b975      	cbnz	r5, 8006bf2 <_scanf_float+0x212>
 8006bd4:	2f00      	cmp	r7, #0
 8006bd6:	f47f af37 	bne.w	8006a48 <_scanf_float+0x68>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006be0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006be4:	f040 8103 	bne.w	8006dee <_scanf_float+0x40e>
 8006be8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bec:	6022      	str	r2, [r4, #0]
 8006bee:	2501      	movs	r5, #1
 8006bf0:	e7c2      	b.n	8006b78 <_scanf_float+0x198>
 8006bf2:	2d03      	cmp	r5, #3
 8006bf4:	d0e3      	beq.n	8006bbe <_scanf_float+0x1de>
 8006bf6:	2d05      	cmp	r5, #5
 8006bf8:	e7df      	b.n	8006bba <_scanf_float+0x1da>
 8006bfa:	2d02      	cmp	r5, #2
 8006bfc:	f47f af23 	bne.w	8006a46 <_scanf_float+0x66>
 8006c00:	2503      	movs	r5, #3
 8006c02:	e7b9      	b.n	8006b78 <_scanf_float+0x198>
 8006c04:	2d06      	cmp	r5, #6
 8006c06:	f47f af1e 	bne.w	8006a46 <_scanf_float+0x66>
 8006c0a:	2507      	movs	r5, #7
 8006c0c:	e7b4      	b.n	8006b78 <_scanf_float+0x198>
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	0591      	lsls	r1, r2, #22
 8006c12:	f57f af18 	bpl.w	8006a46 <_scanf_float+0x66>
 8006c16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	9702      	str	r7, [sp, #8]
 8006c1e:	e7ab      	b.n	8006b78 <_scanf_float+0x198>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006c26:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c2a:	d005      	beq.n	8006c38 <_scanf_float+0x258>
 8006c2c:	0550      	lsls	r0, r2, #21
 8006c2e:	f57f af0a 	bpl.w	8006a46 <_scanf_float+0x66>
 8006c32:	2f00      	cmp	r7, #0
 8006c34:	f000 80db 	beq.w	8006dee <_scanf_float+0x40e>
 8006c38:	0591      	lsls	r1, r2, #22
 8006c3a:	bf58      	it	pl
 8006c3c:	9902      	ldrpl	r1, [sp, #8]
 8006c3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c42:	bf58      	it	pl
 8006c44:	1a79      	subpl	r1, r7, r1
 8006c46:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006c4a:	bf58      	it	pl
 8006c4c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	2700      	movs	r7, #0
 8006c54:	e790      	b.n	8006b78 <_scanf_float+0x198>
 8006c56:	f04f 0a03 	mov.w	sl, #3
 8006c5a:	e78d      	b.n	8006b78 <_scanf_float+0x198>
 8006c5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c60:	4649      	mov	r1, r9
 8006c62:	4640      	mov	r0, r8
 8006c64:	4798      	blx	r3
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f43f aedf 	beq.w	8006a2a <_scanf_float+0x4a>
 8006c6c:	e6eb      	b.n	8006a46 <_scanf_float+0x66>
 8006c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c76:	464a      	mov	r2, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4798      	blx	r3
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	e6eb      	b.n	8006a5c <_scanf_float+0x7c>
 8006c84:	1e6b      	subs	r3, r5, #1
 8006c86:	2b06      	cmp	r3, #6
 8006c88:	d824      	bhi.n	8006cd4 <_scanf_float+0x2f4>
 8006c8a:	2d02      	cmp	r5, #2
 8006c8c:	d836      	bhi.n	8006cfc <_scanf_float+0x31c>
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	429e      	cmp	r6, r3
 8006c92:	f67f aee7 	bls.w	8006a64 <_scanf_float+0x84>
 8006c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c9e:	464a      	mov	r2, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4798      	blx	r3
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	e7f0      	b.n	8006c8e <_scanf_float+0x2ae>
 8006cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006cb4:	464a      	mov	r2, r9
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4798      	blx	r3
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8006cc8:	f1ba 0f02 	cmp.w	sl, #2
 8006ccc:	d1ee      	bne.n	8006cac <_scanf_float+0x2cc>
 8006cce:	3d03      	subs	r5, #3
 8006cd0:	b2ed      	uxtb	r5, r5
 8006cd2:	1b76      	subs	r6, r6, r5
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	05da      	lsls	r2, r3, #23
 8006cd8:	d530      	bpl.n	8006d3c <_scanf_float+0x35c>
 8006cda:	055b      	lsls	r3, r3, #21
 8006cdc:	d511      	bpl.n	8006d02 <_scanf_float+0x322>
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	429e      	cmp	r6, r3
 8006ce2:	f67f aebf 	bls.w	8006a64 <_scanf_float+0x84>
 8006ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cee:	464a      	mov	r2, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4798      	blx	r3
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	e7f0      	b.n	8006cde <_scanf_float+0x2fe>
 8006cfc:	46aa      	mov	sl, r5
 8006cfe:	46b3      	mov	fp, r6
 8006d00:	e7de      	b.n	8006cc0 <_scanf_float+0x2e0>
 8006d02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	2965      	cmp	r1, #101	@ 0x65
 8006d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	d00c      	beq.n	8006d30 <_scanf_float+0x350>
 8006d16:	2945      	cmp	r1, #69	@ 0x45
 8006d18:	d00a      	beq.n	8006d30 <_scanf_float+0x350>
 8006d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d1e:	464a      	mov	r2, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	4798      	blx	r3
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	1eb5      	subs	r5, r6, #2
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d34:	464a      	mov	r2, r9
 8006d36:	4640      	mov	r0, r8
 8006d38:	4798      	blx	r3
 8006d3a:	462e      	mov	r6, r5
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	f012 0210 	ands.w	r2, r2, #16
 8006d42:	d001      	beq.n	8006d48 <_scanf_float+0x368>
 8006d44:	2000      	movs	r0, #0
 8006d46:	e68e      	b.n	8006a66 <_scanf_float+0x86>
 8006d48:	7032      	strb	r2, [r6, #0]
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d54:	d125      	bne.n	8006da2 <_scanf_float+0x3c2>
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	429f      	cmp	r7, r3
 8006d5a:	d00a      	beq.n	8006d72 <_scanf_float+0x392>
 8006d5c:	1bda      	subs	r2, r3, r7
 8006d5e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d62:	429e      	cmp	r6, r3
 8006d64:	bf28      	it	cs
 8006d66:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d6a:	4922      	ldr	r1, [pc, #136]	@ (8006df4 <_scanf_float+0x414>)
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f000 f965 	bl	800703c <siprintf>
 8006d72:	9901      	ldr	r1, [sp, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	4640      	mov	r0, r8
 8006d78:	f002 fcf2 	bl	8009760 <_strtod_r>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f011 0f02 	tst.w	r1, #2
 8006d86:	ec57 6b10 	vmov	r6, r7, d0
 8006d8a:	f103 0204 	add.w	r2, r3, #4
 8006d8e:	d015      	beq.n	8006dbc <_scanf_float+0x3dc>
 8006d90:	9903      	ldr	r1, [sp, #12]
 8006d92:	600a      	str	r2, [r1, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	e9c3 6700 	strd	r6, r7, [r3]
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60e3      	str	r3, [r4, #12]
 8006da0:	e7d0      	b.n	8006d44 <_scanf_float+0x364>
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0e4      	beq.n	8006d72 <_scanf_float+0x392>
 8006da8:	9905      	ldr	r1, [sp, #20]
 8006daa:	230a      	movs	r3, #10
 8006dac:	3101      	adds	r1, #1
 8006dae:	4640      	mov	r0, r8
 8006db0:	f002 fd56 	bl	8009860 <_strtol_r>
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	9e05      	ldr	r6, [sp, #20]
 8006db8:	1ac2      	subs	r2, r0, r3
 8006dba:	e7d0      	b.n	8006d5e <_scanf_float+0x37e>
 8006dbc:	f011 0f04 	tst.w	r1, #4
 8006dc0:	9903      	ldr	r1, [sp, #12]
 8006dc2:	600a      	str	r2, [r1, #0]
 8006dc4:	d1e6      	bne.n	8006d94 <_scanf_float+0x3b4>
 8006dc6:	681d      	ldr	r5, [r3, #0]
 8006dc8:	4632      	mov	r2, r6
 8006dca:	463b      	mov	r3, r7
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7f9 fed4 	bl	8000b7c <__aeabi_dcmpun>
 8006dd4:	b128      	cbz	r0, 8006de2 <_scanf_float+0x402>
 8006dd6:	4808      	ldr	r0, [pc, #32]	@ (8006df8 <_scanf_float+0x418>)
 8006dd8:	f000 fab8 	bl	800734c <nanf>
 8006ddc:	ed85 0a00 	vstr	s0, [r5]
 8006de0:	e7db      	b.n	8006d9a <_scanf_float+0x3ba>
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 ff27 	bl	8000c38 <__aeabi_d2f>
 8006dea:	6028      	str	r0, [r5, #0]
 8006dec:	e7d5      	b.n	8006d9a <_scanf_float+0x3ba>
 8006dee:	2700      	movs	r7, #0
 8006df0:	e62e      	b.n	8006a50 <_scanf_float+0x70>
 8006df2:	bf00      	nop
 8006df4:	0800aa78 	.word	0x0800aa78
 8006df8:	0800abb9 	.word	0x0800abb9

08006dfc <std>:
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	e9c0 3300 	strd	r3, r3, [r0]
 8006e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e0a:	6083      	str	r3, [r0, #8]
 8006e0c:	8181      	strh	r1, [r0, #12]
 8006e0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e10:	81c2      	strh	r2, [r0, #14]
 8006e12:	6183      	str	r3, [r0, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2208      	movs	r2, #8
 8006e18:	305c      	adds	r0, #92	@ 0x5c
 8006e1a:	f000 fa09 	bl	8007230 <memset>
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <std+0x58>)
 8006e20:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e22:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <std+0x5c>)
 8006e24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <std+0x60>)
 8006e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <std+0x64>)
 8006e2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <std+0x68>)
 8006e30:	6224      	str	r4, [r4, #32]
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d006      	beq.n	8006e44 <std+0x48>
 8006e36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e3a:	4294      	cmp	r4, r2
 8006e3c:	d002      	beq.n	8006e44 <std+0x48>
 8006e3e:	33d0      	adds	r3, #208	@ 0xd0
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d105      	bne.n	8006e50 <std+0x54>
 8006e44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4c:	f000 ba6c 	b.w	8007328 <__retarget_lock_init_recursive>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	08007081 	.word	0x08007081
 8006e58:	080070a3 	.word	0x080070a3
 8006e5c:	080070db 	.word	0x080070db
 8006e60:	080070ff 	.word	0x080070ff
 8006e64:	20000430 	.word	0x20000430

08006e68 <stdio_exit_handler>:
 8006e68:	4a02      	ldr	r2, [pc, #8]	@ (8006e74 <stdio_exit_handler+0xc>)
 8006e6a:	4903      	ldr	r1, [pc, #12]	@ (8006e78 <stdio_exit_handler+0x10>)
 8006e6c:	4803      	ldr	r0, [pc, #12]	@ (8006e7c <stdio_exit_handler+0x14>)
 8006e6e:	f000 b869 	b.w	8006f44 <_fwalk_sglue>
 8006e72:	bf00      	nop
 8006e74:	20000020 	.word	0x20000020
 8006e78:	08009c1d 	.word	0x08009c1d
 8006e7c:	20000030 	.word	0x20000030

08006e80 <cleanup_stdio>:
 8006e80:	6841      	ldr	r1, [r0, #4]
 8006e82:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <cleanup_stdio+0x34>)
 8006e84:	4299      	cmp	r1, r3
 8006e86:	b510      	push	{r4, lr}
 8006e88:	4604      	mov	r4, r0
 8006e8a:	d001      	beq.n	8006e90 <cleanup_stdio+0x10>
 8006e8c:	f002 fec6 	bl	8009c1c <_fflush_r>
 8006e90:	68a1      	ldr	r1, [r4, #8]
 8006e92:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <cleanup_stdio+0x38>)
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <cleanup_stdio+0x1e>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f002 febf 	bl	8009c1c <_fflush_r>
 8006e9e:	68e1      	ldr	r1, [r4, #12]
 8006ea0:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <cleanup_stdio+0x3c>)
 8006ea2:	4299      	cmp	r1, r3
 8006ea4:	d004      	beq.n	8006eb0 <cleanup_stdio+0x30>
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eac:	f002 beb6 	b.w	8009c1c <_fflush_r>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000430 	.word	0x20000430
 8006eb8:	20000498 	.word	0x20000498
 8006ebc:	20000500 	.word	0x20000500

08006ec0 <global_stdio_init.part.0>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <global_stdio_init.part.0+0x30>)
 8006ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ef4 <global_stdio_init.part.0+0x34>)
 8006ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef8 <global_stdio_init.part.0+0x38>)
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2104      	movs	r1, #4
 8006ed0:	f7ff ff94 	bl	8006dfc <std>
 8006ed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2109      	movs	r1, #9
 8006edc:	f7ff ff8e 	bl	8006dfc <std>
 8006ee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eea:	2112      	movs	r1, #18
 8006eec:	f7ff bf86 	b.w	8006dfc <std>
 8006ef0:	20000568 	.word	0x20000568
 8006ef4:	20000430 	.word	0x20000430
 8006ef8:	08006e69 	.word	0x08006e69

08006efc <__sfp_lock_acquire>:
 8006efc:	4801      	ldr	r0, [pc, #4]	@ (8006f04 <__sfp_lock_acquire+0x8>)
 8006efe:	f000 ba14 	b.w	800732a <__retarget_lock_acquire_recursive>
 8006f02:	bf00      	nop
 8006f04:	20000571 	.word	0x20000571

08006f08 <__sfp_lock_release>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__sfp_lock_release+0x8>)
 8006f0a:	f000 ba0f 	b.w	800732c <__retarget_lock_release_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000571 	.word	0x20000571

08006f14 <__sinit>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4604      	mov	r4, r0
 8006f18:	f7ff fff0 	bl	8006efc <__sfp_lock_acquire>
 8006f1c:	6a23      	ldr	r3, [r4, #32]
 8006f1e:	b11b      	cbz	r3, 8006f28 <__sinit+0x14>
 8006f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f24:	f7ff bff0 	b.w	8006f08 <__sfp_lock_release>
 8006f28:	4b04      	ldr	r3, [pc, #16]	@ (8006f3c <__sinit+0x28>)
 8006f2a:	6223      	str	r3, [r4, #32]
 8006f2c:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <__sinit+0x2c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f5      	bne.n	8006f20 <__sinit+0xc>
 8006f34:	f7ff ffc4 	bl	8006ec0 <global_stdio_init.part.0>
 8006f38:	e7f2      	b.n	8006f20 <__sinit+0xc>
 8006f3a:	bf00      	nop
 8006f3c:	08006e81 	.word	0x08006e81
 8006f40:	20000568 	.word	0x20000568

08006f44 <_fwalk_sglue>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4607      	mov	r7, r0
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f54:	f1b9 0901 	subs.w	r9, r9, #1
 8006f58:	d505      	bpl.n	8006f66 <_fwalk_sglue+0x22>
 8006f5a:	6824      	ldr	r4, [r4, #0]
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	d1f7      	bne.n	8006f50 <_fwalk_sglue+0xc>
 8006f60:	4630      	mov	r0, r6
 8006f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d907      	bls.n	8006f7c <_fwalk_sglue+0x38>
 8006f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f70:	3301      	adds	r3, #1
 8006f72:	d003      	beq.n	8006f7c <_fwalk_sglue+0x38>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4638      	mov	r0, r7
 8006f78:	47c0      	blx	r8
 8006f7a:	4306      	orrs	r6, r0
 8006f7c:	3568      	adds	r5, #104	@ 0x68
 8006f7e:	e7e9      	b.n	8006f54 <_fwalk_sglue+0x10>

08006f80 <_puts_r>:
 8006f80:	6a03      	ldr	r3, [r0, #32]
 8006f82:	b570      	push	{r4, r5, r6, lr}
 8006f84:	6884      	ldr	r4, [r0, #8]
 8006f86:	4605      	mov	r5, r0
 8006f88:	460e      	mov	r6, r1
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_puts_r+0x10>
 8006f8c:	f7ff ffc2 	bl	8006f14 <__sinit>
 8006f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f9e:	f000 f9c4 	bl	800732a <__retarget_lock_acquire_recursive>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	0719      	lsls	r1, r3, #28
 8006fa6:	d502      	bpl.n	8006fae <_puts_r+0x2e>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d135      	bne.n	800701a <_puts_r+0x9a>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 f8e7 	bl	8007184 <__swsetup_r>
 8006fb6:	b380      	cbz	r0, 800701a <_puts_r+0x9a>
 8006fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fbe:	07da      	lsls	r2, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_puts_r+0x4e>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	059b      	lsls	r3, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_puts_r+0x4e>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fca:	f000 f9af 	bl	800732c <__retarget_lock_release_recursive>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da04      	bge.n	8006fe0 <_puts_r+0x60>
 8006fd6:	69a2      	ldr	r2, [r4, #24]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	dc17      	bgt.n	800700c <_puts_r+0x8c>
 8006fdc:	290a      	cmp	r1, #10
 8006fde:	d015      	beq.n	800700c <_puts_r+0x8c>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	6022      	str	r2, [r4, #0]
 8006fe6:	7019      	strb	r1, [r3, #0]
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d1ed      	bne.n	8006fd2 <_puts_r+0x52>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da11      	bge.n	800701e <_puts_r+0x9e>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	210a      	movs	r1, #10
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f881 	bl	8007106 <__swbuf_r>
 8007004:	3001      	adds	r0, #1
 8007006:	d0d7      	beq.n	8006fb8 <_puts_r+0x38>
 8007008:	250a      	movs	r5, #10
 800700a:	e7d7      	b.n	8006fbc <_puts_r+0x3c>
 800700c:	4622      	mov	r2, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f879 	bl	8007106 <__swbuf_r>
 8007014:	3001      	adds	r0, #1
 8007016:	d1e7      	bne.n	8006fe8 <_puts_r+0x68>
 8007018:	e7ce      	b.n	8006fb8 <_puts_r+0x38>
 800701a:	3e01      	subs	r6, #1
 800701c:	e7e4      	b.n	8006fe8 <_puts_r+0x68>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	220a      	movs	r2, #10
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e7ee      	b.n	8007008 <_puts_r+0x88>
	...

0800702c <puts>:
 800702c:	4b02      	ldr	r3, [pc, #8]	@ (8007038 <puts+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f7ff bfa5 	b.w	8006f80 <_puts_r>
 8007036:	bf00      	nop
 8007038:	2000002c 	.word	0x2000002c

0800703c <siprintf>:
 800703c:	b40e      	push	{r1, r2, r3}
 800703e:	b510      	push	{r4, lr}
 8007040:	b09d      	sub	sp, #116	@ 0x74
 8007042:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9006      	str	r0, [sp, #24]
 8007048:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800704c:	480a      	ldr	r0, [pc, #40]	@ (8007078 <siprintf+0x3c>)
 800704e:	9107      	str	r1, [sp, #28]
 8007050:	9104      	str	r1, [sp, #16]
 8007052:	490a      	ldr	r1, [pc, #40]	@ (800707c <siprintf+0x40>)
 8007054:	f853 2b04 	ldr.w	r2, [r3], #4
 8007058:	9105      	str	r1, [sp, #20]
 800705a:	2400      	movs	r4, #0
 800705c:	a902      	add	r1, sp, #8
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007064:	f002 fc5a 	bl	800991c <_svfiprintf_r>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	701c      	strb	r4, [r3, #0]
 800706c:	b01d      	add	sp, #116	@ 0x74
 800706e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007072:	b003      	add	sp, #12
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000002c 	.word	0x2000002c
 800707c:	ffff0208 	.word	0xffff0208

08007080 <__sread>:
 8007080:	b510      	push	{r4, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	f000 f900 	bl	800728c <_read_r>
 800708c:	2800      	cmp	r0, #0
 800708e:	bfab      	itete	ge
 8007090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007092:	89a3      	ldrhlt	r3, [r4, #12]
 8007094:	181b      	addge	r3, r3, r0
 8007096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800709a:	bfac      	ite	ge
 800709c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800709e:	81a3      	strhlt	r3, [r4, #12]
 80070a0:	bd10      	pop	{r4, pc}

080070a2 <__swrite>:
 80070a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	461f      	mov	r7, r3
 80070a8:	898b      	ldrh	r3, [r1, #12]
 80070aa:	05db      	lsls	r3, r3, #23
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	4616      	mov	r6, r2
 80070b2:	d505      	bpl.n	80070c0 <__swrite+0x1e>
 80070b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b8:	2302      	movs	r3, #2
 80070ba:	2200      	movs	r2, #0
 80070bc:	f000 f8d4 	bl	8007268 <_lseek_r>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ca:	81a3      	strh	r3, [r4, #12]
 80070cc:	4632      	mov	r2, r6
 80070ce:	463b      	mov	r3, r7
 80070d0:	4628      	mov	r0, r5
 80070d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	f000 b8eb 	b.w	80072b0 <_write_r>

080070da <__sseek>:
 80070da:	b510      	push	{r4, lr}
 80070dc:	460c      	mov	r4, r1
 80070de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e2:	f000 f8c1 	bl	8007268 <_lseek_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	bf15      	itete	ne
 80070ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070f6:	81a3      	strheq	r3, [r4, #12]
 80070f8:	bf18      	it	ne
 80070fa:	81a3      	strhne	r3, [r4, #12]
 80070fc:	bd10      	pop	{r4, pc}

080070fe <__sclose>:
 80070fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007102:	f000 b8a1 	b.w	8007248 <_close_r>

08007106 <__swbuf_r>:
 8007106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007108:	460e      	mov	r6, r1
 800710a:	4614      	mov	r4, r2
 800710c:	4605      	mov	r5, r0
 800710e:	b118      	cbz	r0, 8007118 <__swbuf_r+0x12>
 8007110:	6a03      	ldr	r3, [r0, #32]
 8007112:	b90b      	cbnz	r3, 8007118 <__swbuf_r+0x12>
 8007114:	f7ff fefe 	bl	8006f14 <__sinit>
 8007118:	69a3      	ldr	r3, [r4, #24]
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	071a      	lsls	r2, r3, #28
 8007120:	d501      	bpl.n	8007126 <__swbuf_r+0x20>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	b943      	cbnz	r3, 8007138 <__swbuf_r+0x32>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f82b 	bl	8007184 <__swsetup_r>
 800712e:	b118      	cbz	r0, 8007138 <__swbuf_r+0x32>
 8007130:	f04f 37ff 	mov.w	r7, #4294967295
 8007134:	4638      	mov	r0, r7
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	6922      	ldr	r2, [r4, #16]
 800713c:	1a98      	subs	r0, r3, r2
 800713e:	6963      	ldr	r3, [r4, #20]
 8007140:	b2f6      	uxtb	r6, r6
 8007142:	4283      	cmp	r3, r0
 8007144:	4637      	mov	r7, r6
 8007146:	dc05      	bgt.n	8007154 <__swbuf_r+0x4e>
 8007148:	4621      	mov	r1, r4
 800714a:	4628      	mov	r0, r5
 800714c:	f002 fd66 	bl	8009c1c <_fflush_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	d1ed      	bne.n	8007130 <__swbuf_r+0x2a>
 8007154:	68a3      	ldr	r3, [r4, #8]
 8007156:	3b01      	subs	r3, #1
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	701e      	strb	r6, [r3, #0]
 8007162:	6962      	ldr	r2, [r4, #20]
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	429a      	cmp	r2, r3
 8007168:	d004      	beq.n	8007174 <__swbuf_r+0x6e>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	07db      	lsls	r3, r3, #31
 800716e:	d5e1      	bpl.n	8007134 <__swbuf_r+0x2e>
 8007170:	2e0a      	cmp	r6, #10
 8007172:	d1df      	bne.n	8007134 <__swbuf_r+0x2e>
 8007174:	4621      	mov	r1, r4
 8007176:	4628      	mov	r0, r5
 8007178:	f002 fd50 	bl	8009c1c <_fflush_r>
 800717c:	2800      	cmp	r0, #0
 800717e:	d0d9      	beq.n	8007134 <__swbuf_r+0x2e>
 8007180:	e7d6      	b.n	8007130 <__swbuf_r+0x2a>
	...

08007184 <__swsetup_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <__swsetup_r+0xa8>)
 8007188:	4605      	mov	r5, r0
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	460c      	mov	r4, r1
 800718e:	b118      	cbz	r0, 8007198 <__swsetup_r+0x14>
 8007190:	6a03      	ldr	r3, [r0, #32]
 8007192:	b90b      	cbnz	r3, 8007198 <__swsetup_r+0x14>
 8007194:	f7ff febe 	bl	8006f14 <__sinit>
 8007198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719c:	0719      	lsls	r1, r3, #28
 800719e:	d422      	bmi.n	80071e6 <__swsetup_r+0x62>
 80071a0:	06da      	lsls	r2, r3, #27
 80071a2:	d407      	bmi.n	80071b4 <__swsetup_r+0x30>
 80071a4:	2209      	movs	r2, #9
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	f04f 30ff 	mov.w	r0, #4294967295
 80071b2:	e033      	b.n	800721c <__swsetup_r+0x98>
 80071b4:	0758      	lsls	r0, r3, #29
 80071b6:	d512      	bpl.n	80071de <__swsetup_r+0x5a>
 80071b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ba:	b141      	cbz	r1, 80071ce <__swsetup_r+0x4a>
 80071bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c0:	4299      	cmp	r1, r3
 80071c2:	d002      	beq.n	80071ca <__swsetup_r+0x46>
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 ff1f 	bl	8008008 <_free_r>
 80071ca:	2300      	movs	r3, #0
 80071cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	2300      	movs	r3, #0
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	b94b      	cbnz	r3, 80071fe <__swsetup_r+0x7a>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f4:	d003      	beq.n	80071fe <__swsetup_r+0x7a>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f002 fd5d 	bl	8009cb8 <__smakebuf_r>
 80071fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007202:	f013 0201 	ands.w	r2, r3, #1
 8007206:	d00a      	beq.n	800721e <__swsetup_r+0x9a>
 8007208:	2200      	movs	r2, #0
 800720a:	60a2      	str	r2, [r4, #8]
 800720c:	6962      	ldr	r2, [r4, #20]
 800720e:	4252      	negs	r2, r2
 8007210:	61a2      	str	r2, [r4, #24]
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	b942      	cbnz	r2, 8007228 <__swsetup_r+0xa4>
 8007216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800721a:	d1c5      	bne.n	80071a8 <__swsetup_r+0x24>
 800721c:	bd38      	pop	{r3, r4, r5, pc}
 800721e:	0799      	lsls	r1, r3, #30
 8007220:	bf58      	it	pl
 8007222:	6962      	ldrpl	r2, [r4, #20]
 8007224:	60a2      	str	r2, [r4, #8]
 8007226:	e7f4      	b.n	8007212 <__swsetup_r+0x8e>
 8007228:	2000      	movs	r0, #0
 800722a:	e7f7      	b.n	800721c <__swsetup_r+0x98>
 800722c:	2000002c 	.word	0x2000002c

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <_localeconv_r>:
 8007240:	4800      	ldr	r0, [pc, #0]	@ (8007244 <_localeconv_r+0x4>)
 8007242:	4770      	bx	lr
 8007244:	2000016c 	.word	0x2000016c

08007248 <_close_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d06      	ldr	r5, [pc, #24]	@ (8007264 <_close_r+0x1c>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f7fa fcae 	bl	8001bb4 <_close>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_close_r+0x1a>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_close_r+0x1a>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	2000056c 	.word	0x2000056c

08007268 <_lseek_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	@ (8007288 <_lseek_r+0x20>)
 800726c:	4604      	mov	r4, r0
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	2200      	movs	r2, #0
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f7fa fcc3 	bl	8001c02 <_lseek>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_lseek_r+0x1e>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_lseek_r+0x1e>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	2000056c 	.word	0x2000056c

0800728c <_read_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	@ (80072ac <_read_r+0x20>)
 8007290:	4604      	mov	r4, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7fa fc51 	bl	8001b42 <_read>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_read_r+0x1e>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_read_r+0x1e>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	2000056c 	.word	0x2000056c

080072b0 <_write_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	@ (80072d0 <_write_r+0x20>)
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	602a      	str	r2, [r5, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7fa fc5c 	bl	8001b7c <_write>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_write_r+0x1e>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_write_r+0x1e>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	2000056c 	.word	0x2000056c

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	@ (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	2000002c 	.word	0x2000002c

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	@ (800731c <__libc_init_array+0x3c>)
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2600      	movs	r6, #0
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007324 <__libc_init_array+0x44>)
 80072f4:	f003 fae2 	bl	800a8bc <_init>
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2600      	movs	r6, #0
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	0800ae74 	.word	0x0800ae74
 800731c:	0800ae74 	.word	0x0800ae74
 8007320:	0800ae74 	.word	0x0800ae74
 8007324:	0800ae78 	.word	0x0800ae78

08007328 <__retarget_lock_init_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_acquire_recursive>:
 800732a:	4770      	bx	lr

0800732c <__retarget_lock_release_recursive>:
 800732c:	4770      	bx	lr

0800732e <memcpy>:
 800732e:	440a      	add	r2, r1
 8007330:	4291      	cmp	r1, r2
 8007332:	f100 33ff 	add.w	r3, r0, #4294967295
 8007336:	d100      	bne.n	800733a <memcpy+0xc>
 8007338:	4770      	bx	lr
 800733a:	b510      	push	{r4, lr}
 800733c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007344:	4291      	cmp	r1, r2
 8007346:	d1f9      	bne.n	800733c <memcpy+0xe>
 8007348:	bd10      	pop	{r4, pc}
	...

0800734c <nanf>:
 800734c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007354 <nanf+0x8>
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	7fc00000 	.word	0x7fc00000

08007358 <quorem>:
 8007358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	6903      	ldr	r3, [r0, #16]
 800735e:	690c      	ldr	r4, [r1, #16]
 8007360:	42a3      	cmp	r3, r4
 8007362:	4607      	mov	r7, r0
 8007364:	db7e      	blt.n	8007464 <quorem+0x10c>
 8007366:	3c01      	subs	r4, #1
 8007368:	f101 0814 	add.w	r8, r1, #20
 800736c:	00a3      	lsls	r3, r4, #2
 800736e:	f100 0514 	add.w	r5, r0, #20
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800737e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007382:	3301      	adds	r3, #1
 8007384:	429a      	cmp	r2, r3
 8007386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800738a:	fbb2 f6f3 	udiv	r6, r2, r3
 800738e:	d32e      	bcc.n	80073ee <quorem+0x96>
 8007390:	f04f 0a00 	mov.w	sl, #0
 8007394:	46c4      	mov	ip, r8
 8007396:	46ae      	mov	lr, r5
 8007398:	46d3      	mov	fp, sl
 800739a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800739e:	b298      	uxth	r0, r3
 80073a0:	fb06 a000 	mla	r0, r6, r0, sl
 80073a4:	0c02      	lsrs	r2, r0, #16
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	fb06 2303 	mla	r3, r6, r3, r2
 80073ac:	f8de 2000 	ldr.w	r2, [lr]
 80073b0:	b280      	uxth	r0, r0
 80073b2:	b292      	uxth	r2, r2
 80073b4:	1a12      	subs	r2, r2, r0
 80073b6:	445a      	add	r2, fp
 80073b8:	f8de 0000 	ldr.w	r0, [lr]
 80073bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80073c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80073ca:	b292      	uxth	r2, r2
 80073cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073d0:	45e1      	cmp	r9, ip
 80073d2:	f84e 2b04 	str.w	r2, [lr], #4
 80073d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80073da:	d2de      	bcs.n	800739a <quorem+0x42>
 80073dc:	9b00      	ldr	r3, [sp, #0]
 80073de:	58eb      	ldr	r3, [r5, r3]
 80073e0:	b92b      	cbnz	r3, 80073ee <quorem+0x96>
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	429d      	cmp	r5, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	d32f      	bcc.n	800744c <quorem+0xf4>
 80073ec:	613c      	str	r4, [r7, #16]
 80073ee:	4638      	mov	r0, r7
 80073f0:	f001 f9c6 	bl	8008780 <__mcmp>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	db25      	blt.n	8007444 <quorem+0xec>
 80073f8:	4629      	mov	r1, r5
 80073fa:	2000      	movs	r0, #0
 80073fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007400:	f8d1 c000 	ldr.w	ip, [r1]
 8007404:	fa1f fe82 	uxth.w	lr, r2
 8007408:	fa1f f38c 	uxth.w	r3, ip
 800740c:	eba3 030e 	sub.w	r3, r3, lr
 8007410:	4403      	add	r3, r0
 8007412:	0c12      	lsrs	r2, r2, #16
 8007414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007422:	45c1      	cmp	r9, r8
 8007424:	f841 3b04 	str.w	r3, [r1], #4
 8007428:	ea4f 4022 	mov.w	r0, r2, asr #16
 800742c:	d2e6      	bcs.n	80073fc <quorem+0xa4>
 800742e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007436:	b922      	cbnz	r2, 8007442 <quorem+0xea>
 8007438:	3b04      	subs	r3, #4
 800743a:	429d      	cmp	r5, r3
 800743c:	461a      	mov	r2, r3
 800743e:	d30b      	bcc.n	8007458 <quorem+0x100>
 8007440:	613c      	str	r4, [r7, #16]
 8007442:	3601      	adds	r6, #1
 8007444:	4630      	mov	r0, r6
 8007446:	b003      	add	sp, #12
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	3b04      	subs	r3, #4
 8007450:	2a00      	cmp	r2, #0
 8007452:	d1cb      	bne.n	80073ec <quorem+0x94>
 8007454:	3c01      	subs	r4, #1
 8007456:	e7c6      	b.n	80073e6 <quorem+0x8e>
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	3b04      	subs	r3, #4
 800745c:	2a00      	cmp	r2, #0
 800745e:	d1ef      	bne.n	8007440 <quorem+0xe8>
 8007460:	3c01      	subs	r4, #1
 8007462:	e7ea      	b.n	800743a <quorem+0xe2>
 8007464:	2000      	movs	r0, #0
 8007466:	e7ee      	b.n	8007446 <quorem+0xee>

08007468 <_dtoa_r>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	69c7      	ldr	r7, [r0, #28]
 800746e:	b097      	sub	sp, #92	@ 0x5c
 8007470:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007474:	ec55 4b10 	vmov	r4, r5, d0
 8007478:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800747a:	9107      	str	r1, [sp, #28]
 800747c:	4681      	mov	r9, r0
 800747e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007480:	9311      	str	r3, [sp, #68]	@ 0x44
 8007482:	b97f      	cbnz	r7, 80074a4 <_dtoa_r+0x3c>
 8007484:	2010      	movs	r0, #16
 8007486:	f000 fe09 	bl	800809c <malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007490:	b920      	cbnz	r0, 800749c <_dtoa_r+0x34>
 8007492:	4ba9      	ldr	r3, [pc, #676]	@ (8007738 <_dtoa_r+0x2d0>)
 8007494:	21ef      	movs	r1, #239	@ 0xef
 8007496:	48a9      	ldr	r0, [pc, #676]	@ (800773c <_dtoa_r+0x2d4>)
 8007498:	f002 fcb2 	bl	8009e00 <__assert_func>
 800749c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074a0:	6007      	str	r7, [r0, #0]
 80074a2:	60c7      	str	r7, [r0, #12]
 80074a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074a8:	6819      	ldr	r1, [r3, #0]
 80074aa:	b159      	cbz	r1, 80074c4 <_dtoa_r+0x5c>
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	604a      	str	r2, [r1, #4]
 80074b0:	2301      	movs	r3, #1
 80074b2:	4093      	lsls	r3, r2
 80074b4:	608b      	str	r3, [r1, #8]
 80074b6:	4648      	mov	r0, r9
 80074b8:	f000 fee6 	bl	8008288 <_Bfree>
 80074bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	1e2b      	subs	r3, r5, #0
 80074c6:	bfb9      	ittee	lt
 80074c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074cc:	9305      	strlt	r3, [sp, #20]
 80074ce:	2300      	movge	r3, #0
 80074d0:	6033      	strge	r3, [r6, #0]
 80074d2:	9f05      	ldr	r7, [sp, #20]
 80074d4:	4b9a      	ldr	r3, [pc, #616]	@ (8007740 <_dtoa_r+0x2d8>)
 80074d6:	bfbc      	itt	lt
 80074d8:	2201      	movlt	r2, #1
 80074da:	6032      	strlt	r2, [r6, #0]
 80074dc:	43bb      	bics	r3, r7
 80074de:	d112      	bne.n	8007506 <_dtoa_r+0x9e>
 80074e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80074e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ec:	4323      	orrs	r3, r4
 80074ee:	f000 855a 	beq.w	8007fa6 <_dtoa_r+0xb3e>
 80074f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007754 <_dtoa_r+0x2ec>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 855c 	beq.w	8007fb6 <_dtoa_r+0xb4e>
 80074fe:	f10a 0303 	add.w	r3, sl, #3
 8007502:	f000 bd56 	b.w	8007fb2 <_dtoa_r+0xb4a>
 8007506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800750a:	2200      	movs	r2, #0
 800750c:	ec51 0b17 	vmov	r0, r1, d7
 8007510:	2300      	movs	r3, #0
 8007512:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007516:	f7f9 faff 	bl	8000b18 <__aeabi_dcmpeq>
 800751a:	4680      	mov	r8, r0
 800751c:	b158      	cbz	r0, 8007536 <_dtoa_r+0xce>
 800751e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007520:	2301      	movs	r3, #1
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007526:	b113      	cbz	r3, 800752e <_dtoa_r+0xc6>
 8007528:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800752a:	4b86      	ldr	r3, [pc, #536]	@ (8007744 <_dtoa_r+0x2dc>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007758 <_dtoa_r+0x2f0>
 8007532:	f000 bd40 	b.w	8007fb6 <_dtoa_r+0xb4e>
 8007536:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800753a:	aa14      	add	r2, sp, #80	@ 0x50
 800753c:	a915      	add	r1, sp, #84	@ 0x54
 800753e:	4648      	mov	r0, r9
 8007540:	f001 fa3e 	bl	80089c0 <__d2b>
 8007544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007548:	9002      	str	r0, [sp, #8]
 800754a:	2e00      	cmp	r6, #0
 800754c:	d078      	beq.n	8007640 <_dtoa_r+0x1d8>
 800754e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007550:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800755c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007568:	4619      	mov	r1, r3
 800756a:	2200      	movs	r2, #0
 800756c:	4b76      	ldr	r3, [pc, #472]	@ (8007748 <_dtoa_r+0x2e0>)
 800756e:	f7f8 feb3 	bl	80002d8 <__aeabi_dsub>
 8007572:	a36b      	add	r3, pc, #428	@ (adr r3, 8007720 <_dtoa_r+0x2b8>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f7f9 f866 	bl	8000648 <__aeabi_dmul>
 800757c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007728 <_dtoa_r+0x2c0>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 feab 	bl	80002dc <__adddf3>
 8007586:	4604      	mov	r4, r0
 8007588:	4630      	mov	r0, r6
 800758a:	460d      	mov	r5, r1
 800758c:	f7f8 fff2 	bl	8000574 <__aeabi_i2d>
 8007590:	a367      	add	r3, pc, #412	@ (adr r3, 8007730 <_dtoa_r+0x2c8>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f9 f857 	bl	8000648 <__aeabi_dmul>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f8 fe9b 	bl	80002dc <__adddf3>
 80075a6:	4604      	mov	r4, r0
 80075a8:	460d      	mov	r5, r1
 80075aa:	f7f9 fafd 	bl	8000ba8 <__aeabi_d2iz>
 80075ae:	2200      	movs	r2, #0
 80075b0:	4607      	mov	r7, r0
 80075b2:	2300      	movs	r3, #0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f9 fab8 	bl	8000b2c <__aeabi_dcmplt>
 80075bc:	b140      	cbz	r0, 80075d0 <_dtoa_r+0x168>
 80075be:	4638      	mov	r0, r7
 80075c0:	f7f8 ffd8 	bl	8000574 <__aeabi_i2d>
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	f7f9 faa6 	bl	8000b18 <__aeabi_dcmpeq>
 80075cc:	b900      	cbnz	r0, 80075d0 <_dtoa_r+0x168>
 80075ce:	3f01      	subs	r7, #1
 80075d0:	2f16      	cmp	r7, #22
 80075d2:	d852      	bhi.n	800767a <_dtoa_r+0x212>
 80075d4:	4b5d      	ldr	r3, [pc, #372]	@ (800774c <_dtoa_r+0x2e4>)
 80075d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075e2:	f7f9 faa3 	bl	8000b2c <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d049      	beq.n	800767e <_dtoa_r+0x216>
 80075ea:	3f01      	subs	r7, #1
 80075ec:	2300      	movs	r3, #0
 80075ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80075f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075f2:	1b9b      	subs	r3, r3, r6
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	bf45      	ittet	mi
 80075f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80075fc:	9300      	strmi	r3, [sp, #0]
 80075fe:	2300      	movpl	r3, #0
 8007600:	2300      	movmi	r3, #0
 8007602:	9206      	str	r2, [sp, #24]
 8007604:	bf54      	ite	pl
 8007606:	9300      	strpl	r3, [sp, #0]
 8007608:	9306      	strmi	r3, [sp, #24]
 800760a:	2f00      	cmp	r7, #0
 800760c:	db39      	blt.n	8007682 <_dtoa_r+0x21a>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	970d      	str	r7, [sp, #52]	@ 0x34
 8007612:	443b      	add	r3, r7
 8007614:	9306      	str	r3, [sp, #24]
 8007616:	2300      	movs	r3, #0
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	9b07      	ldr	r3, [sp, #28]
 800761c:	2b09      	cmp	r3, #9
 800761e:	d863      	bhi.n	80076e8 <_dtoa_r+0x280>
 8007620:	2b05      	cmp	r3, #5
 8007622:	bfc4      	itt	gt
 8007624:	3b04      	subgt	r3, #4
 8007626:	9307      	strgt	r3, [sp, #28]
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	f1a3 0302 	sub.w	r3, r3, #2
 800762e:	bfcc      	ite	gt
 8007630:	2400      	movgt	r4, #0
 8007632:	2401      	movle	r4, #1
 8007634:	2b03      	cmp	r3, #3
 8007636:	d863      	bhi.n	8007700 <_dtoa_r+0x298>
 8007638:	e8df f003 	tbb	[pc, r3]
 800763c:	2b375452 	.word	0x2b375452
 8007640:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007644:	441e      	add	r6, r3
 8007646:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800764a:	2b20      	cmp	r3, #32
 800764c:	bfc1      	itttt	gt
 800764e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007652:	409f      	lslgt	r7, r3
 8007654:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007658:	fa24 f303 	lsrgt.w	r3, r4, r3
 800765c:	bfd6      	itet	le
 800765e:	f1c3 0320 	rsble	r3, r3, #32
 8007662:	ea47 0003 	orrgt.w	r0, r7, r3
 8007666:	fa04 f003 	lslle.w	r0, r4, r3
 800766a:	f7f8 ff73 	bl	8000554 <__aeabi_ui2d>
 800766e:	2201      	movs	r2, #1
 8007670:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007674:	3e01      	subs	r6, #1
 8007676:	9212      	str	r2, [sp, #72]	@ 0x48
 8007678:	e776      	b.n	8007568 <_dtoa_r+0x100>
 800767a:	2301      	movs	r3, #1
 800767c:	e7b7      	b.n	80075ee <_dtoa_r+0x186>
 800767e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007680:	e7b6      	b.n	80075f0 <_dtoa_r+0x188>
 8007682:	9b00      	ldr	r3, [sp, #0]
 8007684:	1bdb      	subs	r3, r3, r7
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	427b      	negs	r3, r7
 800768a:	9308      	str	r3, [sp, #32]
 800768c:	2300      	movs	r3, #0
 800768e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007690:	e7c3      	b.n	800761a <_dtoa_r+0x1b2>
 8007692:	2301      	movs	r3, #1
 8007694:	9309      	str	r3, [sp, #36]	@ 0x24
 8007696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007698:	eb07 0b03 	add.w	fp, r7, r3
 800769c:	f10b 0301 	add.w	r3, fp, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	9303      	str	r3, [sp, #12]
 80076a4:	bfb8      	it	lt
 80076a6:	2301      	movlt	r3, #1
 80076a8:	e006      	b.n	80076b8 <_dtoa_r+0x250>
 80076aa:	2301      	movs	r3, #1
 80076ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dd28      	ble.n	8007706 <_dtoa_r+0x29e>
 80076b4:	469b      	mov	fp, r3
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80076bc:	2100      	movs	r1, #0
 80076be:	2204      	movs	r2, #4
 80076c0:	f102 0514 	add.w	r5, r2, #20
 80076c4:	429d      	cmp	r5, r3
 80076c6:	d926      	bls.n	8007716 <_dtoa_r+0x2ae>
 80076c8:	6041      	str	r1, [r0, #4]
 80076ca:	4648      	mov	r0, r9
 80076cc:	f000 fd9c 	bl	8008208 <_Balloc>
 80076d0:	4682      	mov	sl, r0
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d142      	bne.n	800775c <_dtoa_r+0x2f4>
 80076d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007750 <_dtoa_r+0x2e8>)
 80076d8:	4602      	mov	r2, r0
 80076da:	f240 11af 	movw	r1, #431	@ 0x1af
 80076de:	e6da      	b.n	8007496 <_dtoa_r+0x2e>
 80076e0:	2300      	movs	r3, #0
 80076e2:	e7e3      	b.n	80076ac <_dtoa_r+0x244>
 80076e4:	2300      	movs	r3, #0
 80076e6:	e7d5      	b.n	8007694 <_dtoa_r+0x22c>
 80076e8:	2401      	movs	r4, #1
 80076ea:	2300      	movs	r3, #0
 80076ec:	9307      	str	r3, [sp, #28]
 80076ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80076f0:	f04f 3bff 	mov.w	fp, #4294967295
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80076fa:	2312      	movs	r3, #18
 80076fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80076fe:	e7db      	b.n	80076b8 <_dtoa_r+0x250>
 8007700:	2301      	movs	r3, #1
 8007702:	9309      	str	r3, [sp, #36]	@ 0x24
 8007704:	e7f4      	b.n	80076f0 <_dtoa_r+0x288>
 8007706:	f04f 0b01 	mov.w	fp, #1
 800770a:	f8cd b00c 	str.w	fp, [sp, #12]
 800770e:	465b      	mov	r3, fp
 8007710:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007714:	e7d0      	b.n	80076b8 <_dtoa_r+0x250>
 8007716:	3101      	adds	r1, #1
 8007718:	0052      	lsls	r2, r2, #1
 800771a:	e7d1      	b.n	80076c0 <_dtoa_r+0x258>
 800771c:	f3af 8000 	nop.w
 8007720:	636f4361 	.word	0x636f4361
 8007724:	3fd287a7 	.word	0x3fd287a7
 8007728:	8b60c8b3 	.word	0x8b60c8b3
 800772c:	3fc68a28 	.word	0x3fc68a28
 8007730:	509f79fb 	.word	0x509f79fb
 8007734:	3fd34413 	.word	0x3fd34413
 8007738:	0800aa8a 	.word	0x0800aa8a
 800773c:	0800aaa1 	.word	0x0800aaa1
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	0800aa55 	.word	0x0800aa55
 8007748:	3ff80000 	.word	0x3ff80000
 800774c:	0800ac50 	.word	0x0800ac50
 8007750:	0800aaf9 	.word	0x0800aaf9
 8007754:	0800aa86 	.word	0x0800aa86
 8007758:	0800aa54 	.word	0x0800aa54
 800775c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007760:	6018      	str	r0, [r3, #0]
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	2b0e      	cmp	r3, #14
 8007766:	f200 80a1 	bhi.w	80078ac <_dtoa_r+0x444>
 800776a:	2c00      	cmp	r4, #0
 800776c:	f000 809e 	beq.w	80078ac <_dtoa_r+0x444>
 8007770:	2f00      	cmp	r7, #0
 8007772:	dd33      	ble.n	80077dc <_dtoa_r+0x374>
 8007774:	4b9c      	ldr	r3, [pc, #624]	@ (80079e8 <_dtoa_r+0x580>)
 8007776:	f007 020f 	and.w	r2, r7, #15
 800777a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800777e:	ed93 7b00 	vldr	d7, [r3]
 8007782:	05f8      	lsls	r0, r7, #23
 8007784:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800778c:	d516      	bpl.n	80077bc <_dtoa_r+0x354>
 800778e:	4b97      	ldr	r3, [pc, #604]	@ (80079ec <_dtoa_r+0x584>)
 8007790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007798:	f7f9 f880 	bl	800089c <__aeabi_ddiv>
 800779c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a0:	f004 040f 	and.w	r4, r4, #15
 80077a4:	2603      	movs	r6, #3
 80077a6:	4d91      	ldr	r5, [pc, #580]	@ (80079ec <_dtoa_r+0x584>)
 80077a8:	b954      	cbnz	r4, 80077c0 <_dtoa_r+0x358>
 80077aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b2:	f7f9 f873 	bl	800089c <__aeabi_ddiv>
 80077b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ba:	e028      	b.n	800780e <_dtoa_r+0x3a6>
 80077bc:	2602      	movs	r6, #2
 80077be:	e7f2      	b.n	80077a6 <_dtoa_r+0x33e>
 80077c0:	07e1      	lsls	r1, r4, #31
 80077c2:	d508      	bpl.n	80077d6 <_dtoa_r+0x36e>
 80077c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077cc:	f7f8 ff3c 	bl	8000648 <__aeabi_dmul>
 80077d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077d4:	3601      	adds	r6, #1
 80077d6:	1064      	asrs	r4, r4, #1
 80077d8:	3508      	adds	r5, #8
 80077da:	e7e5      	b.n	80077a8 <_dtoa_r+0x340>
 80077dc:	f000 80af 	beq.w	800793e <_dtoa_r+0x4d6>
 80077e0:	427c      	negs	r4, r7
 80077e2:	4b81      	ldr	r3, [pc, #516]	@ (80079e8 <_dtoa_r+0x580>)
 80077e4:	4d81      	ldr	r5, [pc, #516]	@ (80079ec <_dtoa_r+0x584>)
 80077e6:	f004 020f 	and.w	r2, r4, #15
 80077ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077f6:	f7f8 ff27 	bl	8000648 <__aeabi_dmul>
 80077fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077fe:	1124      	asrs	r4, r4, #4
 8007800:	2300      	movs	r3, #0
 8007802:	2602      	movs	r6, #2
 8007804:	2c00      	cmp	r4, #0
 8007806:	f040 808f 	bne.w	8007928 <_dtoa_r+0x4c0>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1d3      	bne.n	80077b6 <_dtoa_r+0x34e>
 800780e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007810:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8094 	beq.w	8007942 <_dtoa_r+0x4da>
 800781a:	4b75      	ldr	r3, [pc, #468]	@ (80079f0 <_dtoa_r+0x588>)
 800781c:	2200      	movs	r2, #0
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f983 	bl	8000b2c <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	f000 808b 	beq.w	8007942 <_dtoa_r+0x4da>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 8087 	beq.w	8007942 <_dtoa_r+0x4da>
 8007834:	f1bb 0f00 	cmp.w	fp, #0
 8007838:	dd34      	ble.n	80078a4 <_dtoa_r+0x43c>
 800783a:	4620      	mov	r0, r4
 800783c:	4b6d      	ldr	r3, [pc, #436]	@ (80079f4 <_dtoa_r+0x58c>)
 800783e:	2200      	movs	r2, #0
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 ff01 	bl	8000648 <__aeabi_dmul>
 8007846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784a:	f107 38ff 	add.w	r8, r7, #4294967295
 800784e:	3601      	adds	r6, #1
 8007850:	465c      	mov	r4, fp
 8007852:	4630      	mov	r0, r6
 8007854:	f7f8 fe8e 	bl	8000574 <__aeabi_i2d>
 8007858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785c:	f7f8 fef4 	bl	8000648 <__aeabi_dmul>
 8007860:	4b65      	ldr	r3, [pc, #404]	@ (80079f8 <_dtoa_r+0x590>)
 8007862:	2200      	movs	r2, #0
 8007864:	f7f8 fd3a 	bl	80002dc <__adddf3>
 8007868:	4605      	mov	r5, r0
 800786a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800786e:	2c00      	cmp	r4, #0
 8007870:	d16a      	bne.n	8007948 <_dtoa_r+0x4e0>
 8007872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007876:	4b61      	ldr	r3, [pc, #388]	@ (80079fc <_dtoa_r+0x594>)
 8007878:	2200      	movs	r2, #0
 800787a:	f7f8 fd2d 	bl	80002d8 <__aeabi_dsub>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007886:	462a      	mov	r2, r5
 8007888:	4633      	mov	r3, r6
 800788a:	f7f9 f96d 	bl	8000b68 <__aeabi_dcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	f040 8298 	bne.w	8007dc4 <_dtoa_r+0x95c>
 8007894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007898:	462a      	mov	r2, r5
 800789a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800789e:	f7f9 f945 	bl	8000b2c <__aeabi_dcmplt>
 80078a2:	bb38      	cbnz	r0, 80078f4 <_dtoa_r+0x48c>
 80078a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80078a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f2c0 8157 	blt.w	8007b62 <_dtoa_r+0x6fa>
 80078b4:	2f0e      	cmp	r7, #14
 80078b6:	f300 8154 	bgt.w	8007b62 <_dtoa_r+0x6fa>
 80078ba:	4b4b      	ldr	r3, [pc, #300]	@ (80079e8 <_dtoa_r+0x580>)
 80078bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078c0:	ed93 7b00 	vldr	d7, [r3]
 80078c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	ed8d 7b00 	vstr	d7, [sp]
 80078cc:	f280 80e5 	bge.w	8007a9a <_dtoa_r+0x632>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f300 80e1 	bgt.w	8007a9a <_dtoa_r+0x632>
 80078d8:	d10c      	bne.n	80078f4 <_dtoa_r+0x48c>
 80078da:	4b48      	ldr	r3, [pc, #288]	@ (80079fc <_dtoa_r+0x594>)
 80078dc:	2200      	movs	r2, #0
 80078de:	ec51 0b17 	vmov	r0, r1, d7
 80078e2:	f7f8 feb1 	bl	8000648 <__aeabi_dmul>
 80078e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ea:	f7f9 f933 	bl	8000b54 <__aeabi_dcmpge>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f000 8266 	beq.w	8007dc0 <_dtoa_r+0x958>
 80078f4:	2400      	movs	r4, #0
 80078f6:	4625      	mov	r5, r4
 80078f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078fa:	4656      	mov	r6, sl
 80078fc:	ea6f 0803 	mvn.w	r8, r3
 8007900:	2700      	movs	r7, #0
 8007902:	4621      	mov	r1, r4
 8007904:	4648      	mov	r0, r9
 8007906:	f000 fcbf 	bl	8008288 <_Bfree>
 800790a:	2d00      	cmp	r5, #0
 800790c:	f000 80bd 	beq.w	8007a8a <_dtoa_r+0x622>
 8007910:	b12f      	cbz	r7, 800791e <_dtoa_r+0x4b6>
 8007912:	42af      	cmp	r7, r5
 8007914:	d003      	beq.n	800791e <_dtoa_r+0x4b6>
 8007916:	4639      	mov	r1, r7
 8007918:	4648      	mov	r0, r9
 800791a:	f000 fcb5 	bl	8008288 <_Bfree>
 800791e:	4629      	mov	r1, r5
 8007920:	4648      	mov	r0, r9
 8007922:	f000 fcb1 	bl	8008288 <_Bfree>
 8007926:	e0b0      	b.n	8007a8a <_dtoa_r+0x622>
 8007928:	07e2      	lsls	r2, r4, #31
 800792a:	d505      	bpl.n	8007938 <_dtoa_r+0x4d0>
 800792c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007930:	f7f8 fe8a 	bl	8000648 <__aeabi_dmul>
 8007934:	3601      	adds	r6, #1
 8007936:	2301      	movs	r3, #1
 8007938:	1064      	asrs	r4, r4, #1
 800793a:	3508      	adds	r5, #8
 800793c:	e762      	b.n	8007804 <_dtoa_r+0x39c>
 800793e:	2602      	movs	r6, #2
 8007940:	e765      	b.n	800780e <_dtoa_r+0x3a6>
 8007942:	9c03      	ldr	r4, [sp, #12]
 8007944:	46b8      	mov	r8, r7
 8007946:	e784      	b.n	8007852 <_dtoa_r+0x3ea>
 8007948:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <_dtoa_r+0x580>)
 800794a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800794c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007954:	4454      	add	r4, sl
 8007956:	2900      	cmp	r1, #0
 8007958:	d054      	beq.n	8007a04 <_dtoa_r+0x59c>
 800795a:	4929      	ldr	r1, [pc, #164]	@ (8007a00 <_dtoa_r+0x598>)
 800795c:	2000      	movs	r0, #0
 800795e:	f7f8 ff9d 	bl	800089c <__aeabi_ddiv>
 8007962:	4633      	mov	r3, r6
 8007964:	462a      	mov	r2, r5
 8007966:	f7f8 fcb7 	bl	80002d8 <__aeabi_dsub>
 800796a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800796e:	4656      	mov	r6, sl
 8007970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007974:	f7f9 f918 	bl	8000ba8 <__aeabi_d2iz>
 8007978:	4605      	mov	r5, r0
 800797a:	f7f8 fdfb 	bl	8000574 <__aeabi_i2d>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007986:	f7f8 fca7 	bl	80002d8 <__aeabi_dsub>
 800798a:	3530      	adds	r5, #48	@ 0x30
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007994:	f806 5b01 	strb.w	r5, [r6], #1
 8007998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800799c:	f7f9 f8c6 	bl	8000b2c <__aeabi_dcmplt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d172      	bne.n	8007a8a <_dtoa_r+0x622>
 80079a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a8:	4911      	ldr	r1, [pc, #68]	@ (80079f0 <_dtoa_r+0x588>)
 80079aa:	2000      	movs	r0, #0
 80079ac:	f7f8 fc94 	bl	80002d8 <__aeabi_dsub>
 80079b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079b4:	f7f9 f8ba 	bl	8000b2c <__aeabi_dcmplt>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f040 80b4 	bne.w	8007b26 <_dtoa_r+0x6be>
 80079be:	42a6      	cmp	r6, r4
 80079c0:	f43f af70 	beq.w	80078a4 <_dtoa_r+0x43c>
 80079c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079c8:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <_dtoa_r+0x58c>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fe3c 	bl	8000648 <__aeabi_dmul>
 80079d0:	4b08      	ldr	r3, [pc, #32]	@ (80079f4 <_dtoa_r+0x58c>)
 80079d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079d6:	2200      	movs	r2, #0
 80079d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079dc:	f7f8 fe34 	bl	8000648 <__aeabi_dmul>
 80079e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079e4:	e7c4      	b.n	8007970 <_dtoa_r+0x508>
 80079e6:	bf00      	nop
 80079e8:	0800ac50 	.word	0x0800ac50
 80079ec:	0800ac28 	.word	0x0800ac28
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	40240000 	.word	0x40240000
 80079f8:	401c0000 	.word	0x401c0000
 80079fc:	40140000 	.word	0x40140000
 8007a00:	3fe00000 	.word	0x3fe00000
 8007a04:	4631      	mov	r1, r6
 8007a06:	4628      	mov	r0, r5
 8007a08:	f7f8 fe1e 	bl	8000648 <__aeabi_dmul>
 8007a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007a12:	4656      	mov	r6, sl
 8007a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a18:	f7f9 f8c6 	bl	8000ba8 <__aeabi_d2iz>
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	f7f8 fda9 	bl	8000574 <__aeabi_i2d>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a2a:	f7f8 fc55 	bl	80002d8 <__aeabi_dsub>
 8007a2e:	3530      	adds	r5, #48	@ 0x30
 8007a30:	f806 5b01 	strb.w	r5, [r6], #1
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	d124      	bne.n	8007a8e <_dtoa_r+0x626>
 8007a44:	4baf      	ldr	r3, [pc, #700]	@ (8007d04 <_dtoa_r+0x89c>)
 8007a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a4a:	f7f8 fc47 	bl	80002dc <__adddf3>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a56:	f7f9 f887 	bl	8000b68 <__aeabi_dcmpgt>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d163      	bne.n	8007b26 <_dtoa_r+0x6be>
 8007a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a62:	49a8      	ldr	r1, [pc, #672]	@ (8007d04 <_dtoa_r+0x89c>)
 8007a64:	2000      	movs	r0, #0
 8007a66:	f7f8 fc37 	bl	80002d8 <__aeabi_dsub>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a72:	f7f9 f85b 	bl	8000b2c <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f43f af14 	beq.w	80078a4 <_dtoa_r+0x43c>
 8007a7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007a7e:	1e73      	subs	r3, r6, #1
 8007a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a86:	2b30      	cmp	r3, #48	@ 0x30
 8007a88:	d0f8      	beq.n	8007a7c <_dtoa_r+0x614>
 8007a8a:	4647      	mov	r7, r8
 8007a8c:	e03b      	b.n	8007b06 <_dtoa_r+0x69e>
 8007a8e:	4b9e      	ldr	r3, [pc, #632]	@ (8007d08 <_dtoa_r+0x8a0>)
 8007a90:	f7f8 fdda 	bl	8000648 <__aeabi_dmul>
 8007a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a98:	e7bc      	b.n	8007a14 <_dtoa_r+0x5ac>
 8007a9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007a9e:	4656      	mov	r6, sl
 8007aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fef8 	bl	800089c <__aeabi_ddiv>
 8007aac:	f7f9 f87c 	bl	8000ba8 <__aeabi_d2iz>
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	f7f8 fd5f 	bl	8000574 <__aeabi_i2d>
 8007ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aba:	f7f8 fdc5 	bl	8000648 <__aeabi_dmul>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007aca:	f7f8 fc05 	bl	80002d8 <__aeabi_dsub>
 8007ace:	f806 4b01 	strb.w	r4, [r6], #1
 8007ad2:	9d03      	ldr	r5, [sp, #12]
 8007ad4:	eba6 040a 	sub.w	r4, r6, sl
 8007ad8:	42a5      	cmp	r5, r4
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	d133      	bne.n	8007b48 <_dtoa_r+0x6e0>
 8007ae0:	f7f8 fbfc 	bl	80002dc <__adddf3>
 8007ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	f7f9 f83c 	bl	8000b68 <__aeabi_dcmpgt>
 8007af0:	b9c0      	cbnz	r0, 8007b24 <_dtoa_r+0x6bc>
 8007af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f9 f80d 	bl	8000b18 <__aeabi_dcmpeq>
 8007afe:	b110      	cbz	r0, 8007b06 <_dtoa_r+0x69e>
 8007b00:	f018 0f01 	tst.w	r8, #1
 8007b04:	d10e      	bne.n	8007b24 <_dtoa_r+0x6bc>
 8007b06:	9902      	ldr	r1, [sp, #8]
 8007b08:	4648      	mov	r0, r9
 8007b0a:	f000 fbbd 	bl	8008288 <_Bfree>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	7033      	strb	r3, [r6, #0]
 8007b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b14:	3701      	adds	r7, #1
 8007b16:	601f      	str	r7, [r3, #0]
 8007b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 824b 	beq.w	8007fb6 <_dtoa_r+0xb4e>
 8007b20:	601e      	str	r6, [r3, #0]
 8007b22:	e248      	b.n	8007fb6 <_dtoa_r+0xb4e>
 8007b24:	46b8      	mov	r8, r7
 8007b26:	4633      	mov	r3, r6
 8007b28:	461e      	mov	r6, r3
 8007b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2e:	2a39      	cmp	r2, #57	@ 0x39
 8007b30:	d106      	bne.n	8007b40 <_dtoa_r+0x6d8>
 8007b32:	459a      	cmp	sl, r3
 8007b34:	d1f8      	bne.n	8007b28 <_dtoa_r+0x6c0>
 8007b36:	2230      	movs	r2, #48	@ 0x30
 8007b38:	f108 0801 	add.w	r8, r8, #1
 8007b3c:	f88a 2000 	strb.w	r2, [sl]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	3201      	adds	r2, #1
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e7a0      	b.n	8007a8a <_dtoa_r+0x622>
 8007b48:	4b6f      	ldr	r3, [pc, #444]	@ (8007d08 <_dtoa_r+0x8a0>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fd7c 	bl	8000648 <__aeabi_dmul>
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4604      	mov	r4, r0
 8007b56:	460d      	mov	r5, r1
 8007b58:	f7f8 ffde 	bl	8000b18 <__aeabi_dcmpeq>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d09f      	beq.n	8007aa0 <_dtoa_r+0x638>
 8007b60:	e7d1      	b.n	8007b06 <_dtoa_r+0x69e>
 8007b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	f000 80ea 	beq.w	8007d3e <_dtoa_r+0x8d6>
 8007b6a:	9a07      	ldr	r2, [sp, #28]
 8007b6c:	2a01      	cmp	r2, #1
 8007b6e:	f300 80cd 	bgt.w	8007d0c <_dtoa_r+0x8a4>
 8007b72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	f000 80c1 	beq.w	8007cfc <_dtoa_r+0x894>
 8007b7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b7e:	9c08      	ldr	r4, [sp, #32]
 8007b80:	9e00      	ldr	r6, [sp, #0]
 8007b82:	9a00      	ldr	r2, [sp, #0]
 8007b84:	441a      	add	r2, r3
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	9a06      	ldr	r2, [sp, #24]
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	441a      	add	r2, r3
 8007b8e:	4648      	mov	r0, r9
 8007b90:	9206      	str	r2, [sp, #24]
 8007b92:	f000 fc77 	bl	8008484 <__i2b>
 8007b96:	4605      	mov	r5, r0
 8007b98:	b166      	cbz	r6, 8007bb4 <_dtoa_r+0x74c>
 8007b9a:	9b06      	ldr	r3, [sp, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dd09      	ble.n	8007bb4 <_dtoa_r+0x74c>
 8007ba0:	42b3      	cmp	r3, r6
 8007ba2:	9a00      	ldr	r2, [sp, #0]
 8007ba4:	bfa8      	it	ge
 8007ba6:	4633      	movge	r3, r6
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	9200      	str	r2, [sp, #0]
 8007bac:	9a06      	ldr	r2, [sp, #24]
 8007bae:	1af6      	subs	r6, r6, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	9306      	str	r3, [sp, #24]
 8007bb4:	9b08      	ldr	r3, [sp, #32]
 8007bb6:	b30b      	cbz	r3, 8007bfc <_dtoa_r+0x794>
 8007bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80c6 	beq.w	8007d4c <_dtoa_r+0x8e4>
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	f000 80c0 	beq.w	8007d46 <_dtoa_r+0x8de>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4648      	mov	r0, r9
 8007bcc:	f000 fd12 	bl	80085f4 <__pow5mult>
 8007bd0:	9a02      	ldr	r2, [sp, #8]
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	f000 fc6a 	bl	80084b0 <__multiply>
 8007bdc:	9902      	ldr	r1, [sp, #8]
 8007bde:	4680      	mov	r8, r0
 8007be0:	4648      	mov	r0, r9
 8007be2:	f000 fb51 	bl	8008288 <_Bfree>
 8007be6:	9b08      	ldr	r3, [sp, #32]
 8007be8:	1b1b      	subs	r3, r3, r4
 8007bea:	9308      	str	r3, [sp, #32]
 8007bec:	f000 80b1 	beq.w	8007d52 <_dtoa_r+0x8ea>
 8007bf0:	9a08      	ldr	r2, [sp, #32]
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f000 fcfd 	bl	80085f4 <__pow5mult>
 8007bfa:	9002      	str	r0, [sp, #8]
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4648      	mov	r0, r9
 8007c00:	f000 fc40 	bl	8008484 <__i2b>
 8007c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c06:	4604      	mov	r4, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 81d8 	beq.w	8007fbe <_dtoa_r+0xb56>
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4601      	mov	r1, r0
 8007c12:	4648      	mov	r0, r9
 8007c14:	f000 fcee 	bl	80085f4 <__pow5mult>
 8007c18:	9b07      	ldr	r3, [sp, #28]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	f300 809f 	bgt.w	8007d60 <_dtoa_r+0x8f8>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 8097 	bne.w	8007d58 <_dtoa_r+0x8f0>
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 8093 	bne.w	8007d5c <_dtoa_r+0x8f4>
 8007c36:	9b05      	ldr	r3, [sp, #20]
 8007c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c3c:	0d1b      	lsrs	r3, r3, #20
 8007c3e:	051b      	lsls	r3, r3, #20
 8007c40:	b133      	cbz	r3, 8007c50 <_dtoa_r+0x7e8>
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	9b06      	ldr	r3, [sp, #24]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	9306      	str	r3, [sp, #24]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 81b8 	beq.w	8007fca <_dtoa_r+0xb62>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c60:	6918      	ldr	r0, [r3, #16]
 8007c62:	f000 fbc3 	bl	80083ec <__hi0bits>
 8007c66:	f1c0 0020 	rsb	r0, r0, #32
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	4418      	add	r0, r3
 8007c6e:	f010 001f 	ands.w	r0, r0, #31
 8007c72:	f000 8082 	beq.w	8007d7a <_dtoa_r+0x912>
 8007c76:	f1c0 0320 	rsb	r3, r0, #32
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	dd73      	ble.n	8007d66 <_dtoa_r+0x8fe>
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	f1c0 001c 	rsb	r0, r0, #28
 8007c84:	4403      	add	r3, r0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	9b06      	ldr	r3, [sp, #24]
 8007c8a:	4403      	add	r3, r0
 8007c8c:	4406      	add	r6, r0
 8007c8e:	9306      	str	r3, [sp, #24]
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd05      	ble.n	8007ca2 <_dtoa_r+0x83a>
 8007c96:	9902      	ldr	r1, [sp, #8]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4648      	mov	r0, r9
 8007c9c:	f000 fd04 	bl	80086a8 <__lshift>
 8007ca0:	9002      	str	r0, [sp, #8]
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd05      	ble.n	8007cb4 <_dtoa_r+0x84c>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	461a      	mov	r2, r3
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fcfb 	bl	80086a8 <__lshift>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d061      	beq.n	8007d7e <_dtoa_r+0x916>
 8007cba:	9802      	ldr	r0, [sp, #8]
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f000 fd5f 	bl	8008780 <__mcmp>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	da5b      	bge.n	8007d7e <_dtoa_r+0x916>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9902      	ldr	r1, [sp, #8]
 8007cca:	220a      	movs	r2, #10
 8007ccc:	4648      	mov	r0, r9
 8007cce:	f000 fafd 	bl	80082cc <__multadd>
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	9002      	str	r0, [sp, #8]
 8007cd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8177 	beq.w	8007fce <_dtoa_r+0xb66>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	4648      	mov	r0, r9
 8007ce8:	f000 faf0 	bl	80082cc <__multadd>
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	dc6f      	bgt.n	8007dd4 <_dtoa_r+0x96c>
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	dc49      	bgt.n	8007d8e <_dtoa_r+0x926>
 8007cfa:	e06b      	b.n	8007dd4 <_dtoa_r+0x96c>
 8007cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d02:	e73c      	b.n	8007b7e <_dtoa_r+0x716>
 8007d04:	3fe00000 	.word	0x3fe00000
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	1e5c      	subs	r4, r3, #1
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	db09      	blt.n	8007d2a <_dtoa_r+0x8c2>
 8007d16:	1b1c      	subs	r4, r3, r4
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f6bf af30 	bge.w	8007b80 <_dtoa_r+0x718>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	9a03      	ldr	r2, [sp, #12]
 8007d24:	1a9e      	subs	r6, r3, r2
 8007d26:	2300      	movs	r3, #0
 8007d28:	e72b      	b.n	8007b82 <_dtoa_r+0x71a>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d2e:	9408      	str	r4, [sp, #32]
 8007d30:	1ae3      	subs	r3, r4, r3
 8007d32:	441a      	add	r2, r3
 8007d34:	9e00      	ldr	r6, [sp, #0]
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d3a:	2400      	movs	r4, #0
 8007d3c:	e721      	b.n	8007b82 <_dtoa_r+0x71a>
 8007d3e:	9c08      	ldr	r4, [sp, #32]
 8007d40:	9e00      	ldr	r6, [sp, #0]
 8007d42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007d44:	e728      	b.n	8007b98 <_dtoa_r+0x730>
 8007d46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d4a:	e751      	b.n	8007bf0 <_dtoa_r+0x788>
 8007d4c:	9a08      	ldr	r2, [sp, #32]
 8007d4e:	9902      	ldr	r1, [sp, #8]
 8007d50:	e750      	b.n	8007bf4 <_dtoa_r+0x78c>
 8007d52:	f8cd 8008 	str.w	r8, [sp, #8]
 8007d56:	e751      	b.n	8007bfc <_dtoa_r+0x794>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e779      	b.n	8007c50 <_dtoa_r+0x7e8>
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	e777      	b.n	8007c50 <_dtoa_r+0x7e8>
 8007d60:	2300      	movs	r3, #0
 8007d62:	9308      	str	r3, [sp, #32]
 8007d64:	e779      	b.n	8007c5a <_dtoa_r+0x7f2>
 8007d66:	d093      	beq.n	8007c90 <_dtoa_r+0x828>
 8007d68:	9a00      	ldr	r2, [sp, #0]
 8007d6a:	331c      	adds	r3, #28
 8007d6c:	441a      	add	r2, r3
 8007d6e:	9200      	str	r2, [sp, #0]
 8007d70:	9a06      	ldr	r2, [sp, #24]
 8007d72:	441a      	add	r2, r3
 8007d74:	441e      	add	r6, r3
 8007d76:	9206      	str	r2, [sp, #24]
 8007d78:	e78a      	b.n	8007c90 <_dtoa_r+0x828>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	e7f4      	b.n	8007d68 <_dtoa_r+0x900>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	46b8      	mov	r8, r7
 8007d84:	dc20      	bgt.n	8007dc8 <_dtoa_r+0x960>
 8007d86:	469b      	mov	fp, r3
 8007d88:	9b07      	ldr	r3, [sp, #28]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	dd1e      	ble.n	8007dcc <_dtoa_r+0x964>
 8007d8e:	f1bb 0f00 	cmp.w	fp, #0
 8007d92:	f47f adb1 	bne.w	80078f8 <_dtoa_r+0x490>
 8007d96:	4621      	mov	r1, r4
 8007d98:	465b      	mov	r3, fp
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f000 fa95 	bl	80082cc <__multadd>
 8007da2:	4601      	mov	r1, r0
 8007da4:	4604      	mov	r4, r0
 8007da6:	9802      	ldr	r0, [sp, #8]
 8007da8:	f000 fcea 	bl	8008780 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f77f ada3 	ble.w	80078f8 <_dtoa_r+0x490>
 8007db2:	4656      	mov	r6, sl
 8007db4:	2331      	movs	r3, #49	@ 0x31
 8007db6:	f806 3b01 	strb.w	r3, [r6], #1
 8007dba:	f108 0801 	add.w	r8, r8, #1
 8007dbe:	e59f      	b.n	8007900 <_dtoa_r+0x498>
 8007dc0:	9c03      	ldr	r4, [sp, #12]
 8007dc2:	46b8      	mov	r8, r7
 8007dc4:	4625      	mov	r5, r4
 8007dc6:	e7f4      	b.n	8007db2 <_dtoa_r+0x94a>
 8007dc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8101 	beq.w	8007fd6 <_dtoa_r+0xb6e>
 8007dd4:	2e00      	cmp	r6, #0
 8007dd6:	dd05      	ble.n	8007de4 <_dtoa_r+0x97c>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4632      	mov	r2, r6
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f000 fc63 	bl	80086a8 <__lshift>
 8007de2:	4605      	mov	r5, r0
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d05c      	beq.n	8007ea4 <_dtoa_r+0xa3c>
 8007dea:	6869      	ldr	r1, [r5, #4]
 8007dec:	4648      	mov	r0, r9
 8007dee:	f000 fa0b 	bl	8008208 <_Balloc>
 8007df2:	4606      	mov	r6, r0
 8007df4:	b928      	cbnz	r0, 8007e02 <_dtoa_r+0x99a>
 8007df6:	4b82      	ldr	r3, [pc, #520]	@ (8008000 <_dtoa_r+0xb98>)
 8007df8:	4602      	mov	r2, r0
 8007dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007dfe:	f7ff bb4a 	b.w	8007496 <_dtoa_r+0x2e>
 8007e02:	692a      	ldr	r2, [r5, #16]
 8007e04:	3202      	adds	r2, #2
 8007e06:	0092      	lsls	r2, r2, #2
 8007e08:	f105 010c 	add.w	r1, r5, #12
 8007e0c:	300c      	adds	r0, #12
 8007e0e:	f7ff fa8e 	bl	800732e <memcpy>
 8007e12:	2201      	movs	r2, #1
 8007e14:	4631      	mov	r1, r6
 8007e16:	4648      	mov	r0, r9
 8007e18:	f000 fc46 	bl	80086a8 <__lshift>
 8007e1c:	f10a 0301 	add.w	r3, sl, #1
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	eb0a 030b 	add.w	r3, sl, fp
 8007e26:	9308      	str	r3, [sp, #32]
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	462f      	mov	r7, r5
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	4605      	mov	r5, r0
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	9802      	ldr	r0, [sp, #8]
 8007e38:	4621      	mov	r1, r4
 8007e3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e3e:	f7ff fa8b 	bl	8007358 <quorem>
 8007e42:	4603      	mov	r3, r0
 8007e44:	3330      	adds	r3, #48	@ 0x30
 8007e46:	9003      	str	r0, [sp, #12]
 8007e48:	4639      	mov	r1, r7
 8007e4a:	9802      	ldr	r0, [sp, #8]
 8007e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e4e:	f000 fc97 	bl	8008780 <__mcmp>
 8007e52:	462a      	mov	r2, r5
 8007e54:	9004      	str	r0, [sp, #16]
 8007e56:	4621      	mov	r1, r4
 8007e58:	4648      	mov	r0, r9
 8007e5a:	f000 fcad 	bl	80087b8 <__mdiff>
 8007e5e:	68c2      	ldr	r2, [r0, #12]
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	4606      	mov	r6, r0
 8007e64:	bb02      	cbnz	r2, 8007ea8 <_dtoa_r+0xa40>
 8007e66:	4601      	mov	r1, r0
 8007e68:	9802      	ldr	r0, [sp, #8]
 8007e6a:	f000 fc89 	bl	8008780 <__mcmp>
 8007e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e70:	4602      	mov	r2, r0
 8007e72:	4631      	mov	r1, r6
 8007e74:	4648      	mov	r0, r9
 8007e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7a:	f000 fa05 	bl	8008288 <_Bfree>
 8007e7e:	9b07      	ldr	r3, [sp, #28]
 8007e80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e82:	9e00      	ldr	r6, [sp, #0]
 8007e84:	ea42 0103 	orr.w	r1, r2, r3
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	4319      	orrs	r1, r3
 8007e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8e:	d10d      	bne.n	8007eac <_dtoa_r+0xa44>
 8007e90:	2b39      	cmp	r3, #57	@ 0x39
 8007e92:	d027      	beq.n	8007ee4 <_dtoa_r+0xa7c>
 8007e94:	9a04      	ldr	r2, [sp, #16]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	dd01      	ble.n	8007e9e <_dtoa_r+0xa36>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	3331      	adds	r3, #49	@ 0x31
 8007e9e:	f88b 3000 	strb.w	r3, [fp]
 8007ea2:	e52e      	b.n	8007902 <_dtoa_r+0x49a>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e7b9      	b.n	8007e1c <_dtoa_r+0x9b4>
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	e7e2      	b.n	8007e72 <_dtoa_r+0xa0a>
 8007eac:	9904      	ldr	r1, [sp, #16]
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	db04      	blt.n	8007ebc <_dtoa_r+0xa54>
 8007eb2:	9807      	ldr	r0, [sp, #28]
 8007eb4:	4301      	orrs	r1, r0
 8007eb6:	9806      	ldr	r0, [sp, #24]
 8007eb8:	4301      	orrs	r1, r0
 8007eba:	d120      	bne.n	8007efe <_dtoa_r+0xa96>
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	ddee      	ble.n	8007e9e <_dtoa_r+0xa36>
 8007ec0:	9902      	ldr	r1, [sp, #8]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	f000 fbee 	bl	80086a8 <__lshift>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	f000 fc56 	bl	8008780 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	9b00      	ldr	r3, [sp, #0]
 8007ed8:	dc02      	bgt.n	8007ee0 <_dtoa_r+0xa78>
 8007eda:	d1e0      	bne.n	8007e9e <_dtoa_r+0xa36>
 8007edc:	07da      	lsls	r2, r3, #31
 8007ede:	d5de      	bpl.n	8007e9e <_dtoa_r+0xa36>
 8007ee0:	2b39      	cmp	r3, #57	@ 0x39
 8007ee2:	d1da      	bne.n	8007e9a <_dtoa_r+0xa32>
 8007ee4:	2339      	movs	r3, #57	@ 0x39
 8007ee6:	f88b 3000 	strb.w	r3, [fp]
 8007eea:	4633      	mov	r3, r6
 8007eec:	461e      	mov	r6, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ef4:	2a39      	cmp	r2, #57	@ 0x39
 8007ef6:	d04e      	beq.n	8007f96 <_dtoa_r+0xb2e>
 8007ef8:	3201      	adds	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e501      	b.n	8007902 <_dtoa_r+0x49a>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	dd03      	ble.n	8007f0a <_dtoa_r+0xaa2>
 8007f02:	2b39      	cmp	r3, #57	@ 0x39
 8007f04:	d0ee      	beq.n	8007ee4 <_dtoa_r+0xa7c>
 8007f06:	3301      	adds	r3, #1
 8007f08:	e7c9      	b.n	8007e9e <_dtoa_r+0xa36>
 8007f0a:	9a00      	ldr	r2, [sp, #0]
 8007f0c:	9908      	ldr	r1, [sp, #32]
 8007f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f12:	428a      	cmp	r2, r1
 8007f14:	d028      	beq.n	8007f68 <_dtoa_r+0xb00>
 8007f16:	9902      	ldr	r1, [sp, #8]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	f000 f9d5 	bl	80082cc <__multadd>
 8007f22:	42af      	cmp	r7, r5
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	f04f 0300 	mov.w	r3, #0
 8007f2a:	f04f 020a 	mov.w	r2, #10
 8007f2e:	4639      	mov	r1, r7
 8007f30:	4648      	mov	r0, r9
 8007f32:	d107      	bne.n	8007f44 <_dtoa_r+0xadc>
 8007f34:	f000 f9ca 	bl	80082cc <__multadd>
 8007f38:	4607      	mov	r7, r0
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	e777      	b.n	8007e34 <_dtoa_r+0x9cc>
 8007f44:	f000 f9c2 	bl	80082cc <__multadd>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	220a      	movs	r2, #10
 8007f50:	4648      	mov	r0, r9
 8007f52:	f000 f9bb 	bl	80082cc <__multadd>
 8007f56:	4605      	mov	r5, r0
 8007f58:	e7f0      	b.n	8007f3c <_dtoa_r+0xad4>
 8007f5a:	f1bb 0f00 	cmp.w	fp, #0
 8007f5e:	bfcc      	ite	gt
 8007f60:	465e      	movgt	r6, fp
 8007f62:	2601      	movle	r6, #1
 8007f64:	4456      	add	r6, sl
 8007f66:	2700      	movs	r7, #0
 8007f68:	9902      	ldr	r1, [sp, #8]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f000 fb9a 	bl	80086a8 <__lshift>
 8007f74:	4621      	mov	r1, r4
 8007f76:	9002      	str	r0, [sp, #8]
 8007f78:	f000 fc02 	bl	8008780 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dcb4      	bgt.n	8007eea <_dtoa_r+0xa82>
 8007f80:	d102      	bne.n	8007f88 <_dtoa_r+0xb20>
 8007f82:	9b00      	ldr	r3, [sp, #0]
 8007f84:	07db      	lsls	r3, r3, #31
 8007f86:	d4b0      	bmi.n	8007eea <_dtoa_r+0xa82>
 8007f88:	4633      	mov	r3, r6
 8007f8a:	461e      	mov	r6, r3
 8007f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f90:	2a30      	cmp	r2, #48	@ 0x30
 8007f92:	d0fa      	beq.n	8007f8a <_dtoa_r+0xb22>
 8007f94:	e4b5      	b.n	8007902 <_dtoa_r+0x49a>
 8007f96:	459a      	cmp	sl, r3
 8007f98:	d1a8      	bne.n	8007eec <_dtoa_r+0xa84>
 8007f9a:	2331      	movs	r3, #49	@ 0x31
 8007f9c:	f108 0801 	add.w	r8, r8, #1
 8007fa0:	f88a 3000 	strb.w	r3, [sl]
 8007fa4:	e4ad      	b.n	8007902 <_dtoa_r+0x49a>
 8007fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008004 <_dtoa_r+0xb9c>
 8007fac:	b11b      	cbz	r3, 8007fb6 <_dtoa_r+0xb4e>
 8007fae:	f10a 0308 	add.w	r3, sl, #8
 8007fb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	b017      	add	sp, #92	@ 0x5c
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	f77f ae2e 	ble.w	8007c22 <_dtoa_r+0x7ba>
 8007fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e64d      	b.n	8007c6a <_dtoa_r+0x802>
 8007fce:	f1bb 0f00 	cmp.w	fp, #0
 8007fd2:	f77f aed9 	ble.w	8007d88 <_dtoa_r+0x920>
 8007fd6:	4656      	mov	r6, sl
 8007fd8:	9802      	ldr	r0, [sp, #8]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	f7ff f9bc 	bl	8007358 <quorem>
 8007fe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8007fe8:	eba6 020a 	sub.w	r2, r6, sl
 8007fec:	4593      	cmp	fp, r2
 8007fee:	ddb4      	ble.n	8007f5a <_dtoa_r+0xaf2>
 8007ff0:	9902      	ldr	r1, [sp, #8]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	220a      	movs	r2, #10
 8007ff6:	4648      	mov	r0, r9
 8007ff8:	f000 f968 	bl	80082cc <__multadd>
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	e7eb      	b.n	8007fd8 <_dtoa_r+0xb70>
 8008000:	0800aaf9 	.word	0x0800aaf9
 8008004:	0800aa7d 	.word	0x0800aa7d

08008008 <_free_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4605      	mov	r5, r0
 800800c:	2900      	cmp	r1, #0
 800800e:	d041      	beq.n	8008094 <_free_r+0x8c>
 8008010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008014:	1f0c      	subs	r4, r1, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfb8      	it	lt
 800801a:	18e4      	addlt	r4, r4, r3
 800801c:	f000 f8e8 	bl	80081f0 <__malloc_lock>
 8008020:	4a1d      	ldr	r2, [pc, #116]	@ (8008098 <_free_r+0x90>)
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	b933      	cbnz	r3, 8008034 <_free_r+0x2c>
 8008026:	6063      	str	r3, [r4, #4]
 8008028:	6014      	str	r4, [r2, #0]
 800802a:	4628      	mov	r0, r5
 800802c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008030:	f000 b8e4 	b.w	80081fc <__malloc_unlock>
 8008034:	42a3      	cmp	r3, r4
 8008036:	d908      	bls.n	800804a <_free_r+0x42>
 8008038:	6820      	ldr	r0, [r4, #0]
 800803a:	1821      	adds	r1, r4, r0
 800803c:	428b      	cmp	r3, r1
 800803e:	bf01      	itttt	eq
 8008040:	6819      	ldreq	r1, [r3, #0]
 8008042:	685b      	ldreq	r3, [r3, #4]
 8008044:	1809      	addeq	r1, r1, r0
 8008046:	6021      	streq	r1, [r4, #0]
 8008048:	e7ed      	b.n	8008026 <_free_r+0x1e>
 800804a:	461a      	mov	r2, r3
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	b10b      	cbz	r3, 8008054 <_free_r+0x4c>
 8008050:	42a3      	cmp	r3, r4
 8008052:	d9fa      	bls.n	800804a <_free_r+0x42>
 8008054:	6811      	ldr	r1, [r2, #0]
 8008056:	1850      	adds	r0, r2, r1
 8008058:	42a0      	cmp	r0, r4
 800805a:	d10b      	bne.n	8008074 <_free_r+0x6c>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	4401      	add	r1, r0
 8008060:	1850      	adds	r0, r2, r1
 8008062:	4283      	cmp	r3, r0
 8008064:	6011      	str	r1, [r2, #0]
 8008066:	d1e0      	bne.n	800802a <_free_r+0x22>
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	6053      	str	r3, [r2, #4]
 800806e:	4408      	add	r0, r1
 8008070:	6010      	str	r0, [r2, #0]
 8008072:	e7da      	b.n	800802a <_free_r+0x22>
 8008074:	d902      	bls.n	800807c <_free_r+0x74>
 8008076:	230c      	movs	r3, #12
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	e7d6      	b.n	800802a <_free_r+0x22>
 800807c:	6820      	ldr	r0, [r4, #0]
 800807e:	1821      	adds	r1, r4, r0
 8008080:	428b      	cmp	r3, r1
 8008082:	bf04      	itt	eq
 8008084:	6819      	ldreq	r1, [r3, #0]
 8008086:	685b      	ldreq	r3, [r3, #4]
 8008088:	6063      	str	r3, [r4, #4]
 800808a:	bf04      	itt	eq
 800808c:	1809      	addeq	r1, r1, r0
 800808e:	6021      	streq	r1, [r4, #0]
 8008090:	6054      	str	r4, [r2, #4]
 8008092:	e7ca      	b.n	800802a <_free_r+0x22>
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	20000578 	.word	0x20000578

0800809c <malloc>:
 800809c:	4b02      	ldr	r3, [pc, #8]	@ (80080a8 <malloc+0xc>)
 800809e:	4601      	mov	r1, r0
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	f000 b825 	b.w	80080f0 <_malloc_r>
 80080a6:	bf00      	nop
 80080a8:	2000002c 	.word	0x2000002c

080080ac <sbrk_aligned>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4e0f      	ldr	r6, [pc, #60]	@ (80080ec <sbrk_aligned+0x40>)
 80080b0:	460c      	mov	r4, r1
 80080b2:	6831      	ldr	r1, [r6, #0]
 80080b4:	4605      	mov	r5, r0
 80080b6:	b911      	cbnz	r1, 80080be <sbrk_aligned+0x12>
 80080b8:	f001 fe88 	bl	8009dcc <_sbrk_r>
 80080bc:	6030      	str	r0, [r6, #0]
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f001 fe83 	bl	8009dcc <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d103      	bne.n	80080d2 <sbrk_aligned+0x26>
 80080ca:	f04f 34ff 	mov.w	r4, #4294967295
 80080ce:	4620      	mov	r0, r4
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	1cc4      	adds	r4, r0, #3
 80080d4:	f024 0403 	bic.w	r4, r4, #3
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d0f8      	beq.n	80080ce <sbrk_aligned+0x22>
 80080dc:	1a21      	subs	r1, r4, r0
 80080de:	4628      	mov	r0, r5
 80080e0:	f001 fe74 	bl	8009dcc <_sbrk_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1f2      	bne.n	80080ce <sbrk_aligned+0x22>
 80080e8:	e7ef      	b.n	80080ca <sbrk_aligned+0x1e>
 80080ea:	bf00      	nop
 80080ec:	20000574 	.word	0x20000574

080080f0 <_malloc_r>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	1ccd      	adds	r5, r1, #3
 80080f6:	f025 0503 	bic.w	r5, r5, #3
 80080fa:	3508      	adds	r5, #8
 80080fc:	2d0c      	cmp	r5, #12
 80080fe:	bf38      	it	cc
 8008100:	250c      	movcc	r5, #12
 8008102:	2d00      	cmp	r5, #0
 8008104:	4606      	mov	r6, r0
 8008106:	db01      	blt.n	800810c <_malloc_r+0x1c>
 8008108:	42a9      	cmp	r1, r5
 800810a:	d904      	bls.n	8008116 <_malloc_r+0x26>
 800810c:	230c      	movs	r3, #12
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	2000      	movs	r0, #0
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081ec <_malloc_r+0xfc>
 800811a:	f000 f869 	bl	80081f0 <__malloc_lock>
 800811e:	f8d8 3000 	ldr.w	r3, [r8]
 8008122:	461c      	mov	r4, r3
 8008124:	bb44      	cbnz	r4, 8008178 <_malloc_r+0x88>
 8008126:	4629      	mov	r1, r5
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff ffbf 	bl	80080ac <sbrk_aligned>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	4604      	mov	r4, r0
 8008132:	d158      	bne.n	80081e6 <_malloc_r+0xf6>
 8008134:	f8d8 4000 	ldr.w	r4, [r8]
 8008138:	4627      	mov	r7, r4
 800813a:	2f00      	cmp	r7, #0
 800813c:	d143      	bne.n	80081c6 <_malloc_r+0xd6>
 800813e:	2c00      	cmp	r4, #0
 8008140:	d04b      	beq.n	80081da <_malloc_r+0xea>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	4639      	mov	r1, r7
 8008146:	4630      	mov	r0, r6
 8008148:	eb04 0903 	add.w	r9, r4, r3
 800814c:	f001 fe3e 	bl	8009dcc <_sbrk_r>
 8008150:	4581      	cmp	r9, r0
 8008152:	d142      	bne.n	80081da <_malloc_r+0xea>
 8008154:	6821      	ldr	r1, [r4, #0]
 8008156:	1a6d      	subs	r5, r5, r1
 8008158:	4629      	mov	r1, r5
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff ffa6 	bl	80080ac <sbrk_aligned>
 8008160:	3001      	adds	r0, #1
 8008162:	d03a      	beq.n	80081da <_malloc_r+0xea>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	442b      	add	r3, r5
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	f8d8 3000 	ldr.w	r3, [r8]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	bb62      	cbnz	r2, 80081cc <_malloc_r+0xdc>
 8008172:	f8c8 7000 	str.w	r7, [r8]
 8008176:	e00f      	b.n	8008198 <_malloc_r+0xa8>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	1b52      	subs	r2, r2, r5
 800817c:	d420      	bmi.n	80081c0 <_malloc_r+0xd0>
 800817e:	2a0b      	cmp	r2, #11
 8008180:	d917      	bls.n	80081b2 <_malloc_r+0xc2>
 8008182:	1961      	adds	r1, r4, r5
 8008184:	42a3      	cmp	r3, r4
 8008186:	6025      	str	r5, [r4, #0]
 8008188:	bf18      	it	ne
 800818a:	6059      	strne	r1, [r3, #4]
 800818c:	6863      	ldr	r3, [r4, #4]
 800818e:	bf08      	it	eq
 8008190:	f8c8 1000 	streq.w	r1, [r8]
 8008194:	5162      	str	r2, [r4, r5]
 8008196:	604b      	str	r3, [r1, #4]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f82f 	bl	80081fc <__malloc_unlock>
 800819e:	f104 000b 	add.w	r0, r4, #11
 80081a2:	1d23      	adds	r3, r4, #4
 80081a4:	f020 0007 	bic.w	r0, r0, #7
 80081a8:	1ac2      	subs	r2, r0, r3
 80081aa:	bf1c      	itt	ne
 80081ac:	1a1b      	subne	r3, r3, r0
 80081ae:	50a3      	strne	r3, [r4, r2]
 80081b0:	e7af      	b.n	8008112 <_malloc_r+0x22>
 80081b2:	6862      	ldr	r2, [r4, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	bf0c      	ite	eq
 80081b8:	f8c8 2000 	streq.w	r2, [r8]
 80081bc:	605a      	strne	r2, [r3, #4]
 80081be:	e7eb      	b.n	8008198 <_malloc_r+0xa8>
 80081c0:	4623      	mov	r3, r4
 80081c2:	6864      	ldr	r4, [r4, #4]
 80081c4:	e7ae      	b.n	8008124 <_malloc_r+0x34>
 80081c6:	463c      	mov	r4, r7
 80081c8:	687f      	ldr	r7, [r7, #4]
 80081ca:	e7b6      	b.n	800813a <_malloc_r+0x4a>
 80081cc:	461a      	mov	r2, r3
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d1fb      	bne.n	80081cc <_malloc_r+0xdc>
 80081d4:	2300      	movs	r3, #0
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e7de      	b.n	8008198 <_malloc_r+0xa8>
 80081da:	230c      	movs	r3, #12
 80081dc:	6033      	str	r3, [r6, #0]
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 f80c 	bl	80081fc <__malloc_unlock>
 80081e4:	e794      	b.n	8008110 <_malloc_r+0x20>
 80081e6:	6005      	str	r5, [r0, #0]
 80081e8:	e7d6      	b.n	8008198 <_malloc_r+0xa8>
 80081ea:	bf00      	nop
 80081ec:	20000578 	.word	0x20000578

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__malloc_lock+0x8>)
 80081f2:	f7ff b89a 	b.w	800732a <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000570 	.word	0x20000570

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__malloc_unlock+0x8>)
 80081fe:	f7ff b895 	b.w	800732c <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	20000570 	.word	0x20000570

08008208 <_Balloc>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	69c6      	ldr	r6, [r0, #28]
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	b976      	cbnz	r6, 8008230 <_Balloc+0x28>
 8008212:	2010      	movs	r0, #16
 8008214:	f7ff ff42 	bl	800809c <malloc>
 8008218:	4602      	mov	r2, r0
 800821a:	61e0      	str	r0, [r4, #28]
 800821c:	b920      	cbnz	r0, 8008228 <_Balloc+0x20>
 800821e:	4b18      	ldr	r3, [pc, #96]	@ (8008280 <_Balloc+0x78>)
 8008220:	4818      	ldr	r0, [pc, #96]	@ (8008284 <_Balloc+0x7c>)
 8008222:	216b      	movs	r1, #107	@ 0x6b
 8008224:	f001 fdec 	bl	8009e00 <__assert_func>
 8008228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800822c:	6006      	str	r6, [r0, #0]
 800822e:	60c6      	str	r6, [r0, #12]
 8008230:	69e6      	ldr	r6, [r4, #28]
 8008232:	68f3      	ldr	r3, [r6, #12]
 8008234:	b183      	cbz	r3, 8008258 <_Balloc+0x50>
 8008236:	69e3      	ldr	r3, [r4, #28]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800823e:	b9b8      	cbnz	r0, 8008270 <_Balloc+0x68>
 8008240:	2101      	movs	r1, #1
 8008242:	fa01 f605 	lsl.w	r6, r1, r5
 8008246:	1d72      	adds	r2, r6, #5
 8008248:	0092      	lsls	r2, r2, #2
 800824a:	4620      	mov	r0, r4
 800824c:	f001 fdf6 	bl	8009e3c <_calloc_r>
 8008250:	b160      	cbz	r0, 800826c <_Balloc+0x64>
 8008252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008256:	e00e      	b.n	8008276 <_Balloc+0x6e>
 8008258:	2221      	movs	r2, #33	@ 0x21
 800825a:	2104      	movs	r1, #4
 800825c:	4620      	mov	r0, r4
 800825e:	f001 fded 	bl	8009e3c <_calloc_r>
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	60f0      	str	r0, [r6, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e4      	bne.n	8008236 <_Balloc+0x2e>
 800826c:	2000      	movs	r0, #0
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	6802      	ldr	r2, [r0, #0]
 8008272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008276:	2300      	movs	r3, #0
 8008278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800827c:	e7f7      	b.n	800826e <_Balloc+0x66>
 800827e:	bf00      	nop
 8008280:	0800aa8a 	.word	0x0800aa8a
 8008284:	0800ab0a 	.word	0x0800ab0a

08008288 <_Bfree>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	69c6      	ldr	r6, [r0, #28]
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	b976      	cbnz	r6, 80082b0 <_Bfree+0x28>
 8008292:	2010      	movs	r0, #16
 8008294:	f7ff ff02 	bl	800809c <malloc>
 8008298:	4602      	mov	r2, r0
 800829a:	61e8      	str	r0, [r5, #28]
 800829c:	b920      	cbnz	r0, 80082a8 <_Bfree+0x20>
 800829e:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <_Bfree+0x3c>)
 80082a0:	4809      	ldr	r0, [pc, #36]	@ (80082c8 <_Bfree+0x40>)
 80082a2:	218f      	movs	r1, #143	@ 0x8f
 80082a4:	f001 fdac 	bl	8009e00 <__assert_func>
 80082a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082ac:	6006      	str	r6, [r0, #0]
 80082ae:	60c6      	str	r6, [r0, #12]
 80082b0:	b13c      	cbz	r4, 80082c2 <_Bfree+0x3a>
 80082b2:	69eb      	ldr	r3, [r5, #28]
 80082b4:	6862      	ldr	r2, [r4, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082bc:	6021      	str	r1, [r4, #0]
 80082be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	0800aa8a 	.word	0x0800aa8a
 80082c8:	0800ab0a 	.word	0x0800ab0a

080082cc <__multadd>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	690d      	ldr	r5, [r1, #16]
 80082d2:	4607      	mov	r7, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	461e      	mov	r6, r3
 80082d8:	f101 0c14 	add.w	ip, r1, #20
 80082dc:	2000      	movs	r0, #0
 80082de:	f8dc 3000 	ldr.w	r3, [ip]
 80082e2:	b299      	uxth	r1, r3
 80082e4:	fb02 6101 	mla	r1, r2, r1, r6
 80082e8:	0c1e      	lsrs	r6, r3, #16
 80082ea:	0c0b      	lsrs	r3, r1, #16
 80082ec:	fb02 3306 	mla	r3, r2, r6, r3
 80082f0:	b289      	uxth	r1, r1
 80082f2:	3001      	adds	r0, #1
 80082f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082f8:	4285      	cmp	r5, r0
 80082fa:	f84c 1b04 	str.w	r1, [ip], #4
 80082fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008302:	dcec      	bgt.n	80082de <__multadd+0x12>
 8008304:	b30e      	cbz	r6, 800834a <__multadd+0x7e>
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	42ab      	cmp	r3, r5
 800830a:	dc19      	bgt.n	8008340 <__multadd+0x74>
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	4638      	mov	r0, r7
 8008310:	3101      	adds	r1, #1
 8008312:	f7ff ff79 	bl	8008208 <_Balloc>
 8008316:	4680      	mov	r8, r0
 8008318:	b928      	cbnz	r0, 8008326 <__multadd+0x5a>
 800831a:	4602      	mov	r2, r0
 800831c:	4b0c      	ldr	r3, [pc, #48]	@ (8008350 <__multadd+0x84>)
 800831e:	480d      	ldr	r0, [pc, #52]	@ (8008354 <__multadd+0x88>)
 8008320:	21ba      	movs	r1, #186	@ 0xba
 8008322:	f001 fd6d 	bl	8009e00 <__assert_func>
 8008326:	6922      	ldr	r2, [r4, #16]
 8008328:	3202      	adds	r2, #2
 800832a:	f104 010c 	add.w	r1, r4, #12
 800832e:	0092      	lsls	r2, r2, #2
 8008330:	300c      	adds	r0, #12
 8008332:	f7fe fffc 	bl	800732e <memcpy>
 8008336:	4621      	mov	r1, r4
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ffa5 	bl	8008288 <_Bfree>
 800833e:	4644      	mov	r4, r8
 8008340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008344:	3501      	adds	r5, #1
 8008346:	615e      	str	r6, [r3, #20]
 8008348:	6125      	str	r5, [r4, #16]
 800834a:	4620      	mov	r0, r4
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	0800aaf9 	.word	0x0800aaf9
 8008354:	0800ab0a 	.word	0x0800ab0a

08008358 <__s2b>:
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800835c:	460c      	mov	r4, r1
 800835e:	4615      	mov	r5, r2
 8008360:	461f      	mov	r7, r3
 8008362:	2209      	movs	r2, #9
 8008364:	3308      	adds	r3, #8
 8008366:	4606      	mov	r6, r0
 8008368:	fb93 f3f2 	sdiv	r3, r3, r2
 800836c:	2100      	movs	r1, #0
 800836e:	2201      	movs	r2, #1
 8008370:	429a      	cmp	r2, r3
 8008372:	db09      	blt.n	8008388 <__s2b+0x30>
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff ff47 	bl	8008208 <_Balloc>
 800837a:	b940      	cbnz	r0, 800838e <__s2b+0x36>
 800837c:	4602      	mov	r2, r0
 800837e:	4b19      	ldr	r3, [pc, #100]	@ (80083e4 <__s2b+0x8c>)
 8008380:	4819      	ldr	r0, [pc, #100]	@ (80083e8 <__s2b+0x90>)
 8008382:	21d3      	movs	r1, #211	@ 0xd3
 8008384:	f001 fd3c 	bl	8009e00 <__assert_func>
 8008388:	0052      	lsls	r2, r2, #1
 800838a:	3101      	adds	r1, #1
 800838c:	e7f0      	b.n	8008370 <__s2b+0x18>
 800838e:	9b08      	ldr	r3, [sp, #32]
 8008390:	6143      	str	r3, [r0, #20]
 8008392:	2d09      	cmp	r5, #9
 8008394:	f04f 0301 	mov.w	r3, #1
 8008398:	6103      	str	r3, [r0, #16]
 800839a:	dd16      	ble.n	80083ca <__s2b+0x72>
 800839c:	f104 0909 	add.w	r9, r4, #9
 80083a0:	46c8      	mov	r8, r9
 80083a2:	442c      	add	r4, r5
 80083a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083a8:	4601      	mov	r1, r0
 80083aa:	3b30      	subs	r3, #48	@ 0x30
 80083ac:	220a      	movs	r2, #10
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ff8c 	bl	80082cc <__multadd>
 80083b4:	45a0      	cmp	r8, r4
 80083b6:	d1f5      	bne.n	80083a4 <__s2b+0x4c>
 80083b8:	f1a5 0408 	sub.w	r4, r5, #8
 80083bc:	444c      	add	r4, r9
 80083be:	1b2d      	subs	r5, r5, r4
 80083c0:	1963      	adds	r3, r4, r5
 80083c2:	42bb      	cmp	r3, r7
 80083c4:	db04      	blt.n	80083d0 <__s2b+0x78>
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	340a      	adds	r4, #10
 80083cc:	2509      	movs	r5, #9
 80083ce:	e7f6      	b.n	80083be <__s2b+0x66>
 80083d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083d4:	4601      	mov	r1, r0
 80083d6:	3b30      	subs	r3, #48	@ 0x30
 80083d8:	220a      	movs	r2, #10
 80083da:	4630      	mov	r0, r6
 80083dc:	f7ff ff76 	bl	80082cc <__multadd>
 80083e0:	e7ee      	b.n	80083c0 <__s2b+0x68>
 80083e2:	bf00      	nop
 80083e4:	0800aaf9 	.word	0x0800aaf9
 80083e8:	0800ab0a 	.word	0x0800ab0a

080083ec <__hi0bits>:
 80083ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083f0:	4603      	mov	r3, r0
 80083f2:	bf36      	itet	cc
 80083f4:	0403      	lslcc	r3, r0, #16
 80083f6:	2000      	movcs	r0, #0
 80083f8:	2010      	movcc	r0, #16
 80083fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083fe:	bf3c      	itt	cc
 8008400:	021b      	lslcc	r3, r3, #8
 8008402:	3008      	addcc	r0, #8
 8008404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008408:	bf3c      	itt	cc
 800840a:	011b      	lslcc	r3, r3, #4
 800840c:	3004      	addcc	r0, #4
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008412:	bf3c      	itt	cc
 8008414:	009b      	lslcc	r3, r3, #2
 8008416:	3002      	addcc	r0, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	db05      	blt.n	8008428 <__hi0bits+0x3c>
 800841c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008420:	f100 0001 	add.w	r0, r0, #1
 8008424:	bf08      	it	eq
 8008426:	2020      	moveq	r0, #32
 8008428:	4770      	bx	lr

0800842a <__lo0bits>:
 800842a:	6803      	ldr	r3, [r0, #0]
 800842c:	4602      	mov	r2, r0
 800842e:	f013 0007 	ands.w	r0, r3, #7
 8008432:	d00b      	beq.n	800844c <__lo0bits+0x22>
 8008434:	07d9      	lsls	r1, r3, #31
 8008436:	d421      	bmi.n	800847c <__lo0bits+0x52>
 8008438:	0798      	lsls	r0, r3, #30
 800843a:	bf49      	itett	mi
 800843c:	085b      	lsrmi	r3, r3, #1
 800843e:	089b      	lsrpl	r3, r3, #2
 8008440:	2001      	movmi	r0, #1
 8008442:	6013      	strmi	r3, [r2, #0]
 8008444:	bf5c      	itt	pl
 8008446:	6013      	strpl	r3, [r2, #0]
 8008448:	2002      	movpl	r0, #2
 800844a:	4770      	bx	lr
 800844c:	b299      	uxth	r1, r3
 800844e:	b909      	cbnz	r1, 8008454 <__lo0bits+0x2a>
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	2010      	movs	r0, #16
 8008454:	b2d9      	uxtb	r1, r3
 8008456:	b909      	cbnz	r1, 800845c <__lo0bits+0x32>
 8008458:	3008      	adds	r0, #8
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	0719      	lsls	r1, r3, #28
 800845e:	bf04      	itt	eq
 8008460:	091b      	lsreq	r3, r3, #4
 8008462:	3004      	addeq	r0, #4
 8008464:	0799      	lsls	r1, r3, #30
 8008466:	bf04      	itt	eq
 8008468:	089b      	lsreq	r3, r3, #2
 800846a:	3002      	addeq	r0, #2
 800846c:	07d9      	lsls	r1, r3, #31
 800846e:	d403      	bmi.n	8008478 <__lo0bits+0x4e>
 8008470:	085b      	lsrs	r3, r3, #1
 8008472:	f100 0001 	add.w	r0, r0, #1
 8008476:	d003      	beq.n	8008480 <__lo0bits+0x56>
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4770      	bx	lr
 800847c:	2000      	movs	r0, #0
 800847e:	4770      	bx	lr
 8008480:	2020      	movs	r0, #32
 8008482:	4770      	bx	lr

08008484 <__i2b>:
 8008484:	b510      	push	{r4, lr}
 8008486:	460c      	mov	r4, r1
 8008488:	2101      	movs	r1, #1
 800848a:	f7ff febd 	bl	8008208 <_Balloc>
 800848e:	4602      	mov	r2, r0
 8008490:	b928      	cbnz	r0, 800849e <__i2b+0x1a>
 8008492:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <__i2b+0x24>)
 8008494:	4805      	ldr	r0, [pc, #20]	@ (80084ac <__i2b+0x28>)
 8008496:	f240 1145 	movw	r1, #325	@ 0x145
 800849a:	f001 fcb1 	bl	8009e00 <__assert_func>
 800849e:	2301      	movs	r3, #1
 80084a0:	6144      	str	r4, [r0, #20]
 80084a2:	6103      	str	r3, [r0, #16]
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	bf00      	nop
 80084a8:	0800aaf9 	.word	0x0800aaf9
 80084ac:	0800ab0a 	.word	0x0800ab0a

080084b0 <__multiply>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4617      	mov	r7, r2
 80084b6:	690a      	ldr	r2, [r1, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	bfa8      	it	ge
 80084be:	463b      	movge	r3, r7
 80084c0:	4689      	mov	r9, r1
 80084c2:	bfa4      	itt	ge
 80084c4:	460f      	movge	r7, r1
 80084c6:	4699      	movge	r9, r3
 80084c8:	693d      	ldr	r5, [r7, #16]
 80084ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	eb05 060a 	add.w	r6, r5, sl
 80084d6:	42b3      	cmp	r3, r6
 80084d8:	b085      	sub	sp, #20
 80084da:	bfb8      	it	lt
 80084dc:	3101      	addlt	r1, #1
 80084de:	f7ff fe93 	bl	8008208 <_Balloc>
 80084e2:	b930      	cbnz	r0, 80084f2 <__multiply+0x42>
 80084e4:	4602      	mov	r2, r0
 80084e6:	4b41      	ldr	r3, [pc, #260]	@ (80085ec <__multiply+0x13c>)
 80084e8:	4841      	ldr	r0, [pc, #260]	@ (80085f0 <__multiply+0x140>)
 80084ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084ee:	f001 fc87 	bl	8009e00 <__assert_func>
 80084f2:	f100 0414 	add.w	r4, r0, #20
 80084f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80084fa:	4623      	mov	r3, r4
 80084fc:	2200      	movs	r2, #0
 80084fe:	4573      	cmp	r3, lr
 8008500:	d320      	bcc.n	8008544 <__multiply+0x94>
 8008502:	f107 0814 	add.w	r8, r7, #20
 8008506:	f109 0114 	add.w	r1, r9, #20
 800850a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800850e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	1beb      	subs	r3, r5, r7
 8008516:	3b15      	subs	r3, #21
 8008518:	f023 0303 	bic.w	r3, r3, #3
 800851c:	3304      	adds	r3, #4
 800851e:	3715      	adds	r7, #21
 8008520:	42bd      	cmp	r5, r7
 8008522:	bf38      	it	cc
 8008524:	2304      	movcc	r3, #4
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	9103      	str	r1, [sp, #12]
 800852c:	428b      	cmp	r3, r1
 800852e:	d80c      	bhi.n	800854a <__multiply+0x9a>
 8008530:	2e00      	cmp	r6, #0
 8008532:	dd03      	ble.n	800853c <__multiply+0x8c>
 8008534:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008538:	2b00      	cmp	r3, #0
 800853a:	d055      	beq.n	80085e8 <__multiply+0x138>
 800853c:	6106      	str	r6, [r0, #16]
 800853e:	b005      	add	sp, #20
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	f843 2b04 	str.w	r2, [r3], #4
 8008548:	e7d9      	b.n	80084fe <__multiply+0x4e>
 800854a:	f8b1 a000 	ldrh.w	sl, [r1]
 800854e:	f1ba 0f00 	cmp.w	sl, #0
 8008552:	d01f      	beq.n	8008594 <__multiply+0xe4>
 8008554:	46c4      	mov	ip, r8
 8008556:	46a1      	mov	r9, r4
 8008558:	2700      	movs	r7, #0
 800855a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800855e:	f8d9 3000 	ldr.w	r3, [r9]
 8008562:	fa1f fb82 	uxth.w	fp, r2
 8008566:	b29b      	uxth	r3, r3
 8008568:	fb0a 330b 	mla	r3, sl, fp, r3
 800856c:	443b      	add	r3, r7
 800856e:	f8d9 7000 	ldr.w	r7, [r9]
 8008572:	0c12      	lsrs	r2, r2, #16
 8008574:	0c3f      	lsrs	r7, r7, #16
 8008576:	fb0a 7202 	mla	r2, sl, r2, r7
 800857a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800857e:	b29b      	uxth	r3, r3
 8008580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008584:	4565      	cmp	r5, ip
 8008586:	f849 3b04 	str.w	r3, [r9], #4
 800858a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800858e:	d8e4      	bhi.n	800855a <__multiply+0xaa>
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	50e7      	str	r7, [r4, r3]
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800859a:	3104      	adds	r1, #4
 800859c:	f1b9 0f00 	cmp.w	r9, #0
 80085a0:	d020      	beq.n	80085e4 <__multiply+0x134>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4647      	mov	r7, r8
 80085a6:	46a4      	mov	ip, r4
 80085a8:	f04f 0a00 	mov.w	sl, #0
 80085ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80085b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80085b4:	fb09 220b 	mla	r2, r9, fp, r2
 80085b8:	4452      	add	r2, sl
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c0:	f84c 3b04 	str.w	r3, [ip], #4
 80085c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80085c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80085d0:	fb09 330a 	mla	r3, r9, sl, r3
 80085d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80085d8:	42bd      	cmp	r5, r7
 80085da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085de:	d8e5      	bhi.n	80085ac <__multiply+0xfc>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	50a3      	str	r3, [r4, r2]
 80085e4:	3404      	adds	r4, #4
 80085e6:	e79f      	b.n	8008528 <__multiply+0x78>
 80085e8:	3e01      	subs	r6, #1
 80085ea:	e7a1      	b.n	8008530 <__multiply+0x80>
 80085ec:	0800aaf9 	.word	0x0800aaf9
 80085f0:	0800ab0a 	.word	0x0800ab0a

080085f4 <__pow5mult>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4615      	mov	r5, r2
 80085fa:	f012 0203 	ands.w	r2, r2, #3
 80085fe:	4607      	mov	r7, r0
 8008600:	460e      	mov	r6, r1
 8008602:	d007      	beq.n	8008614 <__pow5mult+0x20>
 8008604:	4c25      	ldr	r4, [pc, #148]	@ (800869c <__pow5mult+0xa8>)
 8008606:	3a01      	subs	r2, #1
 8008608:	2300      	movs	r3, #0
 800860a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800860e:	f7ff fe5d 	bl	80082cc <__multadd>
 8008612:	4606      	mov	r6, r0
 8008614:	10ad      	asrs	r5, r5, #2
 8008616:	d03d      	beq.n	8008694 <__pow5mult+0xa0>
 8008618:	69fc      	ldr	r4, [r7, #28]
 800861a:	b97c      	cbnz	r4, 800863c <__pow5mult+0x48>
 800861c:	2010      	movs	r0, #16
 800861e:	f7ff fd3d 	bl	800809c <malloc>
 8008622:	4602      	mov	r2, r0
 8008624:	61f8      	str	r0, [r7, #28]
 8008626:	b928      	cbnz	r0, 8008634 <__pow5mult+0x40>
 8008628:	4b1d      	ldr	r3, [pc, #116]	@ (80086a0 <__pow5mult+0xac>)
 800862a:	481e      	ldr	r0, [pc, #120]	@ (80086a4 <__pow5mult+0xb0>)
 800862c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008630:	f001 fbe6 	bl	8009e00 <__assert_func>
 8008634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008638:	6004      	str	r4, [r0, #0]
 800863a:	60c4      	str	r4, [r0, #12]
 800863c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008644:	b94c      	cbnz	r4, 800865a <__pow5mult+0x66>
 8008646:	f240 2171 	movw	r1, #625	@ 0x271
 800864a:	4638      	mov	r0, r7
 800864c:	f7ff ff1a 	bl	8008484 <__i2b>
 8008650:	2300      	movs	r3, #0
 8008652:	f8c8 0008 	str.w	r0, [r8, #8]
 8008656:	4604      	mov	r4, r0
 8008658:	6003      	str	r3, [r0, #0]
 800865a:	f04f 0900 	mov.w	r9, #0
 800865e:	07eb      	lsls	r3, r5, #31
 8008660:	d50a      	bpl.n	8008678 <__pow5mult+0x84>
 8008662:	4631      	mov	r1, r6
 8008664:	4622      	mov	r2, r4
 8008666:	4638      	mov	r0, r7
 8008668:	f7ff ff22 	bl	80084b0 <__multiply>
 800866c:	4631      	mov	r1, r6
 800866e:	4680      	mov	r8, r0
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff fe09 	bl	8008288 <_Bfree>
 8008676:	4646      	mov	r6, r8
 8008678:	106d      	asrs	r5, r5, #1
 800867a:	d00b      	beq.n	8008694 <__pow5mult+0xa0>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	b938      	cbnz	r0, 8008690 <__pow5mult+0x9c>
 8008680:	4622      	mov	r2, r4
 8008682:	4621      	mov	r1, r4
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ff13 	bl	80084b0 <__multiply>
 800868a:	6020      	str	r0, [r4, #0]
 800868c:	f8c0 9000 	str.w	r9, [r0]
 8008690:	4604      	mov	r4, r0
 8008692:	e7e4      	b.n	800865e <__pow5mult+0x6a>
 8008694:	4630      	mov	r0, r6
 8008696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869a:	bf00      	nop
 800869c:	0800ac1c 	.word	0x0800ac1c
 80086a0:	0800aa8a 	.word	0x0800aa8a
 80086a4:	0800ab0a 	.word	0x0800ab0a

080086a8 <__lshift>:
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	6849      	ldr	r1, [r1, #4]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	4607      	mov	r7, r0
 80086ba:	4691      	mov	r9, r2
 80086bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086c0:	f108 0601 	add.w	r6, r8, #1
 80086c4:	42b3      	cmp	r3, r6
 80086c6:	db0b      	blt.n	80086e0 <__lshift+0x38>
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff fd9d 	bl	8008208 <_Balloc>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b948      	cbnz	r0, 80086e6 <__lshift+0x3e>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <__lshift+0xd0>)
 80086d6:	4829      	ldr	r0, [pc, #164]	@ (800877c <__lshift+0xd4>)
 80086d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086dc:	f001 fb90 	bl	8009e00 <__assert_func>
 80086e0:	3101      	adds	r1, #1
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	e7ee      	b.n	80086c4 <__lshift+0x1c>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f100 0114 	add.w	r1, r0, #20
 80086ec:	f100 0210 	add.w	r2, r0, #16
 80086f0:	4618      	mov	r0, r3
 80086f2:	4553      	cmp	r3, sl
 80086f4:	db33      	blt.n	800875e <__lshift+0xb6>
 80086f6:	6920      	ldr	r0, [r4, #16]
 80086f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086fc:	f104 0314 	add.w	r3, r4, #20
 8008700:	f019 091f 	ands.w	r9, r9, #31
 8008704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800870c:	d02b      	beq.n	8008766 <__lshift+0xbe>
 800870e:	f1c9 0e20 	rsb	lr, r9, #32
 8008712:	468a      	mov	sl, r1
 8008714:	2200      	movs	r2, #0
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	fa00 f009 	lsl.w	r0, r0, r9
 800871c:	4310      	orrs	r0, r2
 800871e:	f84a 0b04 	str.w	r0, [sl], #4
 8008722:	f853 2b04 	ldr.w	r2, [r3], #4
 8008726:	459c      	cmp	ip, r3
 8008728:	fa22 f20e 	lsr.w	r2, r2, lr
 800872c:	d8f3      	bhi.n	8008716 <__lshift+0x6e>
 800872e:	ebac 0304 	sub.w	r3, ip, r4
 8008732:	3b15      	subs	r3, #21
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	3304      	adds	r3, #4
 800873a:	f104 0015 	add.w	r0, r4, #21
 800873e:	4560      	cmp	r0, ip
 8008740:	bf88      	it	hi
 8008742:	2304      	movhi	r3, #4
 8008744:	50ca      	str	r2, [r1, r3]
 8008746:	b10a      	cbz	r2, 800874c <__lshift+0xa4>
 8008748:	f108 0602 	add.w	r6, r8, #2
 800874c:	3e01      	subs	r6, #1
 800874e:	4638      	mov	r0, r7
 8008750:	612e      	str	r6, [r5, #16]
 8008752:	4621      	mov	r1, r4
 8008754:	f7ff fd98 	bl	8008288 <_Bfree>
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008762:	3301      	adds	r3, #1
 8008764:	e7c5      	b.n	80086f2 <__lshift+0x4a>
 8008766:	3904      	subs	r1, #4
 8008768:	f853 2b04 	ldr.w	r2, [r3], #4
 800876c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008770:	459c      	cmp	ip, r3
 8008772:	d8f9      	bhi.n	8008768 <__lshift+0xc0>
 8008774:	e7ea      	b.n	800874c <__lshift+0xa4>
 8008776:	bf00      	nop
 8008778:	0800aaf9 	.word	0x0800aaf9
 800877c:	0800ab0a 	.word	0x0800ab0a

08008780 <__mcmp>:
 8008780:	690a      	ldr	r2, [r1, #16]
 8008782:	4603      	mov	r3, r0
 8008784:	6900      	ldr	r0, [r0, #16]
 8008786:	1a80      	subs	r0, r0, r2
 8008788:	b530      	push	{r4, r5, lr}
 800878a:	d10e      	bne.n	80087aa <__mcmp+0x2a>
 800878c:	3314      	adds	r3, #20
 800878e:	3114      	adds	r1, #20
 8008790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800879c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087a0:	4295      	cmp	r5, r2
 80087a2:	d003      	beq.n	80087ac <__mcmp+0x2c>
 80087a4:	d205      	bcs.n	80087b2 <__mcmp+0x32>
 80087a6:	f04f 30ff 	mov.w	r0, #4294967295
 80087aa:	bd30      	pop	{r4, r5, pc}
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d3f3      	bcc.n	8008798 <__mcmp+0x18>
 80087b0:	e7fb      	b.n	80087aa <__mcmp+0x2a>
 80087b2:	2001      	movs	r0, #1
 80087b4:	e7f9      	b.n	80087aa <__mcmp+0x2a>
	...

080087b8 <__mdiff>:
 80087b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4689      	mov	r9, r1
 80087be:	4606      	mov	r6, r0
 80087c0:	4611      	mov	r1, r2
 80087c2:	4648      	mov	r0, r9
 80087c4:	4614      	mov	r4, r2
 80087c6:	f7ff ffdb 	bl	8008780 <__mcmp>
 80087ca:	1e05      	subs	r5, r0, #0
 80087cc:	d112      	bne.n	80087f4 <__mdiff+0x3c>
 80087ce:	4629      	mov	r1, r5
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff fd19 	bl	8008208 <_Balloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__mdiff+0x2e>
 80087da:	4b3f      	ldr	r3, [pc, #252]	@ (80088d8 <__mdiff+0x120>)
 80087dc:	f240 2137 	movw	r1, #567	@ 0x237
 80087e0:	483e      	ldr	r0, [pc, #248]	@ (80088dc <__mdiff+0x124>)
 80087e2:	f001 fb0d 	bl	8009e00 <__assert_func>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087ec:	4610      	mov	r0, r2
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	bfbc      	itt	lt
 80087f6:	464b      	movlt	r3, r9
 80087f8:	46a1      	movlt	r9, r4
 80087fa:	4630      	mov	r0, r6
 80087fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008800:	bfba      	itte	lt
 8008802:	461c      	movlt	r4, r3
 8008804:	2501      	movlt	r5, #1
 8008806:	2500      	movge	r5, #0
 8008808:	f7ff fcfe 	bl	8008208 <_Balloc>
 800880c:	4602      	mov	r2, r0
 800880e:	b918      	cbnz	r0, 8008818 <__mdiff+0x60>
 8008810:	4b31      	ldr	r3, [pc, #196]	@ (80088d8 <__mdiff+0x120>)
 8008812:	f240 2145 	movw	r1, #581	@ 0x245
 8008816:	e7e3      	b.n	80087e0 <__mdiff+0x28>
 8008818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800881c:	6926      	ldr	r6, [r4, #16]
 800881e:	60c5      	str	r5, [r0, #12]
 8008820:	f109 0310 	add.w	r3, r9, #16
 8008824:	f109 0514 	add.w	r5, r9, #20
 8008828:	f104 0e14 	add.w	lr, r4, #20
 800882c:	f100 0b14 	add.w	fp, r0, #20
 8008830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	46d9      	mov	r9, fp
 800883c:	f04f 0c00 	mov.w	ip, #0
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	fa1f f38a 	uxth.w	r3, sl
 8008850:	4619      	mov	r1, r3
 8008852:	b283      	uxth	r3, r0
 8008854:	1acb      	subs	r3, r1, r3
 8008856:	0c00      	lsrs	r0, r0, #16
 8008858:	4463      	add	r3, ip
 800885a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800885e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008862:	b29b      	uxth	r3, r3
 8008864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008868:	4576      	cmp	r6, lr
 800886a:	f849 3b04 	str.w	r3, [r9], #4
 800886e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008872:	d8e5      	bhi.n	8008840 <__mdiff+0x88>
 8008874:	1b33      	subs	r3, r6, r4
 8008876:	3b15      	subs	r3, #21
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	3415      	adds	r4, #21
 800887e:	3304      	adds	r3, #4
 8008880:	42a6      	cmp	r6, r4
 8008882:	bf38      	it	cc
 8008884:	2304      	movcc	r3, #4
 8008886:	441d      	add	r5, r3
 8008888:	445b      	add	r3, fp
 800888a:	461e      	mov	r6, r3
 800888c:	462c      	mov	r4, r5
 800888e:	4544      	cmp	r4, r8
 8008890:	d30e      	bcc.n	80088b0 <__mdiff+0xf8>
 8008892:	f108 0103 	add.w	r1, r8, #3
 8008896:	1b49      	subs	r1, r1, r5
 8008898:	f021 0103 	bic.w	r1, r1, #3
 800889c:	3d03      	subs	r5, #3
 800889e:	45a8      	cmp	r8, r5
 80088a0:	bf38      	it	cc
 80088a2:	2100      	movcc	r1, #0
 80088a4:	440b      	add	r3, r1
 80088a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088aa:	b191      	cbz	r1, 80088d2 <__mdiff+0x11a>
 80088ac:	6117      	str	r7, [r2, #16]
 80088ae:	e79d      	b.n	80087ec <__mdiff+0x34>
 80088b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80088b4:	46e6      	mov	lr, ip
 80088b6:	0c08      	lsrs	r0, r1, #16
 80088b8:	fa1c fc81 	uxtah	ip, ip, r1
 80088bc:	4471      	add	r1, lr
 80088be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088c2:	b289      	uxth	r1, r1
 80088c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088c8:	f846 1b04 	str.w	r1, [r6], #4
 80088cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088d0:	e7dd      	b.n	800888e <__mdiff+0xd6>
 80088d2:	3f01      	subs	r7, #1
 80088d4:	e7e7      	b.n	80088a6 <__mdiff+0xee>
 80088d6:	bf00      	nop
 80088d8:	0800aaf9 	.word	0x0800aaf9
 80088dc:	0800ab0a 	.word	0x0800ab0a

080088e0 <__ulp>:
 80088e0:	b082      	sub	sp, #8
 80088e2:	ed8d 0b00 	vstr	d0, [sp]
 80088e6:	9a01      	ldr	r2, [sp, #4]
 80088e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008928 <__ulp+0x48>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc08      	bgt.n	8008906 <__ulp+0x26>
 80088f4:	425b      	negs	r3, r3
 80088f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80088fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088fe:	da04      	bge.n	800890a <__ulp+0x2a>
 8008900:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008904:	4113      	asrs	r3, r2
 8008906:	2200      	movs	r2, #0
 8008908:	e008      	b.n	800891c <__ulp+0x3c>
 800890a:	f1a2 0314 	sub.w	r3, r2, #20
 800890e:	2b1e      	cmp	r3, #30
 8008910:	bfda      	itte	le
 8008912:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008916:	40da      	lsrle	r2, r3
 8008918:	2201      	movgt	r2, #1
 800891a:	2300      	movs	r3, #0
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	ec41 0b10 	vmov	d0, r0, r1
 8008924:	b002      	add	sp, #8
 8008926:	4770      	bx	lr
 8008928:	7ff00000 	.word	0x7ff00000

0800892c <__b2d>:
 800892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	6906      	ldr	r6, [r0, #16]
 8008932:	f100 0814 	add.w	r8, r0, #20
 8008936:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800893a:	1f37      	subs	r7, r6, #4
 800893c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008940:	4610      	mov	r0, r2
 8008942:	f7ff fd53 	bl	80083ec <__hi0bits>
 8008946:	f1c0 0320 	rsb	r3, r0, #32
 800894a:	280a      	cmp	r0, #10
 800894c:	600b      	str	r3, [r1, #0]
 800894e:	491b      	ldr	r1, [pc, #108]	@ (80089bc <__b2d+0x90>)
 8008950:	dc15      	bgt.n	800897e <__b2d+0x52>
 8008952:	f1c0 0c0b 	rsb	ip, r0, #11
 8008956:	fa22 f30c 	lsr.w	r3, r2, ip
 800895a:	45b8      	cmp	r8, r7
 800895c:	ea43 0501 	orr.w	r5, r3, r1
 8008960:	bf34      	ite	cc
 8008962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008966:	2300      	movcs	r3, #0
 8008968:	3015      	adds	r0, #21
 800896a:	fa02 f000 	lsl.w	r0, r2, r0
 800896e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008972:	4303      	orrs	r3, r0
 8008974:	461c      	mov	r4, r3
 8008976:	ec45 4b10 	vmov	d0, r4, r5
 800897a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897e:	45b8      	cmp	r8, r7
 8008980:	bf3a      	itte	cc
 8008982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008986:	f1a6 0708 	subcc.w	r7, r6, #8
 800898a:	2300      	movcs	r3, #0
 800898c:	380b      	subs	r0, #11
 800898e:	d012      	beq.n	80089b6 <__b2d+0x8a>
 8008990:	f1c0 0120 	rsb	r1, r0, #32
 8008994:	fa23 f401 	lsr.w	r4, r3, r1
 8008998:	4082      	lsls	r2, r0
 800899a:	4322      	orrs	r2, r4
 800899c:	4547      	cmp	r7, r8
 800899e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80089a2:	bf8c      	ite	hi
 80089a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089a8:	2200      	movls	r2, #0
 80089aa:	4083      	lsls	r3, r0
 80089ac:	40ca      	lsrs	r2, r1
 80089ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80089b2:	4313      	orrs	r3, r2
 80089b4:	e7de      	b.n	8008974 <__b2d+0x48>
 80089b6:	ea42 0501 	orr.w	r5, r2, r1
 80089ba:	e7db      	b.n	8008974 <__b2d+0x48>
 80089bc:	3ff00000 	.word	0x3ff00000

080089c0 <__d2b>:
 80089c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	460f      	mov	r7, r1
 80089c6:	2101      	movs	r1, #1
 80089c8:	ec59 8b10 	vmov	r8, r9, d0
 80089cc:	4616      	mov	r6, r2
 80089ce:	f7ff fc1b 	bl	8008208 <_Balloc>
 80089d2:	4604      	mov	r4, r0
 80089d4:	b930      	cbnz	r0, 80089e4 <__d2b+0x24>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b23      	ldr	r3, [pc, #140]	@ (8008a68 <__d2b+0xa8>)
 80089da:	4824      	ldr	r0, [pc, #144]	@ (8008a6c <__d2b+0xac>)
 80089dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80089e0:	f001 fa0e 	bl	8009e00 <__assert_func>
 80089e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089ec:	b10d      	cbz	r5, 80089f2 <__d2b+0x32>
 80089ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	f1b8 0300 	subs.w	r3, r8, #0
 80089f8:	d023      	beq.n	8008a42 <__d2b+0x82>
 80089fa:	4668      	mov	r0, sp
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	f7ff fd14 	bl	800842a <__lo0bits>
 8008a02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a06:	b1d0      	cbz	r0, 8008a3e <__d2b+0x7e>
 8008a08:	f1c0 0320 	rsb	r3, r0, #32
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	430b      	orrs	r3, r1
 8008a12:	40c2      	lsrs	r2, r0
 8008a14:	6163      	str	r3, [r4, #20]
 8008a16:	9201      	str	r2, [sp, #4]
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	61a3      	str	r3, [r4, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bf0c      	ite	eq
 8008a20:	2201      	moveq	r2, #1
 8008a22:	2202      	movne	r2, #2
 8008a24:	6122      	str	r2, [r4, #16]
 8008a26:	b1a5      	cbz	r5, 8008a52 <__d2b+0x92>
 8008a28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a2c:	4405      	add	r5, r0
 8008a2e:	603d      	str	r5, [r7, #0]
 8008a30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a34:	6030      	str	r0, [r6, #0]
 8008a36:	4620      	mov	r0, r4
 8008a38:	b003      	add	sp, #12
 8008a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	6161      	str	r1, [r4, #20]
 8008a40:	e7ea      	b.n	8008a18 <__d2b+0x58>
 8008a42:	a801      	add	r0, sp, #4
 8008a44:	f7ff fcf1 	bl	800842a <__lo0bits>
 8008a48:	9b01      	ldr	r3, [sp, #4]
 8008a4a:	6163      	str	r3, [r4, #20]
 8008a4c:	3020      	adds	r0, #32
 8008a4e:	2201      	movs	r2, #1
 8008a50:	e7e8      	b.n	8008a24 <__d2b+0x64>
 8008a52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a5a:	6038      	str	r0, [r7, #0]
 8008a5c:	6918      	ldr	r0, [r3, #16]
 8008a5e:	f7ff fcc5 	bl	80083ec <__hi0bits>
 8008a62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a66:	e7e5      	b.n	8008a34 <__d2b+0x74>
 8008a68:	0800aaf9 	.word	0x0800aaf9
 8008a6c:	0800ab0a 	.word	0x0800ab0a

08008a70 <__ratio>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	b085      	sub	sp, #20
 8008a76:	e9cd 1000 	strd	r1, r0, [sp]
 8008a7a:	a902      	add	r1, sp, #8
 8008a7c:	f7ff ff56 	bl	800892c <__b2d>
 8008a80:	9800      	ldr	r0, [sp, #0]
 8008a82:	a903      	add	r1, sp, #12
 8008a84:	ec55 4b10 	vmov	r4, r5, d0
 8008a88:	f7ff ff50 	bl	800892c <__b2d>
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	6919      	ldr	r1, [r3, #16]
 8008a90:	9b00      	ldr	r3, [sp, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	1ac9      	subs	r1, r1, r3
 8008a96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	ec5b ab10 	vmov	sl, fp, d0
 8008aa0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfce      	itee	gt
 8008aa8:	462a      	movgt	r2, r5
 8008aaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008aae:	465a      	movle	r2, fp
 8008ab0:	462f      	mov	r7, r5
 8008ab2:	46d9      	mov	r9, fp
 8008ab4:	bfcc      	ite	gt
 8008ab6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008aba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008abe:	464b      	mov	r3, r9
 8008ac0:	4652      	mov	r2, sl
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 fee9 	bl	800089c <__aeabi_ddiv>
 8008aca:	ec41 0b10 	vmov	d0, r0, r1
 8008ace:	b005      	add	sp, #20
 8008ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ad4 <__copybits>:
 8008ad4:	3901      	subs	r1, #1
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	1149      	asrs	r1, r1, #5
 8008ada:	6914      	ldr	r4, [r2, #16]
 8008adc:	3101      	adds	r1, #1
 8008ade:	f102 0314 	add.w	r3, r2, #20
 8008ae2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008aea:	1f05      	subs	r5, r0, #4
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d30c      	bcc.n	8008b0a <__copybits+0x36>
 8008af0:	1aa3      	subs	r3, r4, r2
 8008af2:	3b11      	subs	r3, #17
 8008af4:	f023 0303 	bic.w	r3, r3, #3
 8008af8:	3211      	adds	r2, #17
 8008afa:	42a2      	cmp	r2, r4
 8008afc:	bf88      	it	hi
 8008afe:	2300      	movhi	r3, #0
 8008b00:	4418      	add	r0, r3
 8008b02:	2300      	movs	r3, #0
 8008b04:	4288      	cmp	r0, r1
 8008b06:	d305      	bcc.n	8008b14 <__copybits+0x40>
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
 8008b0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b12:	e7eb      	b.n	8008aec <__copybits+0x18>
 8008b14:	f840 3b04 	str.w	r3, [r0], #4
 8008b18:	e7f4      	b.n	8008b04 <__copybits+0x30>

08008b1a <__any_on>:
 8008b1a:	f100 0214 	add.w	r2, r0, #20
 8008b1e:	6900      	ldr	r0, [r0, #16]
 8008b20:	114b      	asrs	r3, r1, #5
 8008b22:	4298      	cmp	r0, r3
 8008b24:	b510      	push	{r4, lr}
 8008b26:	db11      	blt.n	8008b4c <__any_on+0x32>
 8008b28:	dd0a      	ble.n	8008b40 <__any_on+0x26>
 8008b2a:	f011 011f 	ands.w	r1, r1, #31
 8008b2e:	d007      	beq.n	8008b40 <__any_on+0x26>
 8008b30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b34:	fa24 f001 	lsr.w	r0, r4, r1
 8008b38:	fa00 f101 	lsl.w	r1, r0, r1
 8008b3c:	428c      	cmp	r4, r1
 8008b3e:	d10b      	bne.n	8008b58 <__any_on+0x3e>
 8008b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d803      	bhi.n	8008b50 <__any_on+0x36>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	bd10      	pop	{r4, pc}
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	e7f7      	b.n	8008b40 <__any_on+0x26>
 8008b50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d0f5      	beq.n	8008b44 <__any_on+0x2a>
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7f6      	b.n	8008b4a <__any_on+0x30>

08008b5c <sulp>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	ec45 4b10 	vmov	d0, r4, r5
 8008b66:	4616      	mov	r6, r2
 8008b68:	f7ff feba 	bl	80088e0 <__ulp>
 8008b6c:	ec51 0b10 	vmov	r0, r1, d0
 8008b70:	b17e      	cbz	r6, 8008b92 <sulp+0x36>
 8008b72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dd09      	ble.n	8008b92 <sulp+0x36>
 8008b7e:	051b      	lsls	r3, r3, #20
 8008b80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008b84:	2400      	movs	r4, #0
 8008b86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	f7f7 fd5b 	bl	8000648 <__aeabi_dmul>
 8008b92:	ec41 0b10 	vmov	d0, r0, r1
 8008b96:	bd70      	pop	{r4, r5, r6, pc}

08008b98 <_strtod_l>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	b09f      	sub	sp, #124	@ 0x7c
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008ba6:	9005      	str	r0, [sp, #20]
 8008ba8:	f04f 0a00 	mov.w	sl, #0
 8008bac:	f04f 0b00 	mov.w	fp, #0
 8008bb0:	460a      	mov	r2, r1
 8008bb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bb4:	7811      	ldrb	r1, [r2, #0]
 8008bb6:	292b      	cmp	r1, #43	@ 0x2b
 8008bb8:	d04a      	beq.n	8008c50 <_strtod_l+0xb8>
 8008bba:	d838      	bhi.n	8008c2e <_strtod_l+0x96>
 8008bbc:	290d      	cmp	r1, #13
 8008bbe:	d832      	bhi.n	8008c26 <_strtod_l+0x8e>
 8008bc0:	2908      	cmp	r1, #8
 8008bc2:	d832      	bhi.n	8008c2a <_strtod_l+0x92>
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d03b      	beq.n	8008c40 <_strtod_l+0xa8>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008bce:	782a      	ldrb	r2, [r5, #0]
 8008bd0:	2a30      	cmp	r2, #48	@ 0x30
 8008bd2:	f040 80b2 	bne.w	8008d3a <_strtod_l+0x1a2>
 8008bd6:	786a      	ldrb	r2, [r5, #1]
 8008bd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bdc:	2a58      	cmp	r2, #88	@ 0x58
 8008bde:	d16e      	bne.n	8008cbe <_strtod_l+0x126>
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	4a8f      	ldr	r2, [pc, #572]	@ (8008e28 <_strtod_l+0x290>)
 8008bec:	9805      	ldr	r0, [sp, #20]
 8008bee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008bf0:	a919      	add	r1, sp, #100	@ 0x64
 8008bf2:	f001 f99f 	bl	8009f34 <__gethex>
 8008bf6:	f010 060f 	ands.w	r6, r0, #15
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	d005      	beq.n	8008c0a <_strtod_l+0x72>
 8008bfe:	2e06      	cmp	r6, #6
 8008c00:	d128      	bne.n	8008c54 <_strtod_l+0xbc>
 8008c02:	3501      	adds	r5, #1
 8008c04:	2300      	movs	r3, #0
 8008c06:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c08:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 858e 	bne.w	800972e <_strtod_l+0xb96>
 8008c12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c14:	b1cb      	cbz	r3, 8008c4a <_strtod_l+0xb2>
 8008c16:	4652      	mov	r2, sl
 8008c18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c1c:	ec43 2b10 	vmov	d0, r2, r3
 8008c20:	b01f      	add	sp, #124	@ 0x7c
 8008c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c26:	2920      	cmp	r1, #32
 8008c28:	d1ce      	bne.n	8008bc8 <_strtod_l+0x30>
 8008c2a:	3201      	adds	r2, #1
 8008c2c:	e7c1      	b.n	8008bb2 <_strtod_l+0x1a>
 8008c2e:	292d      	cmp	r1, #45	@ 0x2d
 8008c30:	d1ca      	bne.n	8008bc8 <_strtod_l+0x30>
 8008c32:	2101      	movs	r1, #1
 8008c34:	910e      	str	r1, [sp, #56]	@ 0x38
 8008c36:	1c51      	adds	r1, r2, #1
 8008c38:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c3a:	7852      	ldrb	r2, [r2, #1]
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	d1c5      	bne.n	8008bcc <_strtod_l+0x34>
 8008c40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c42:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 8570 	bne.w	800972a <_strtod_l+0xb92>
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	e7e5      	b.n	8008c1c <_strtod_l+0x84>
 8008c50:	2100      	movs	r1, #0
 8008c52:	e7ef      	b.n	8008c34 <_strtod_l+0x9c>
 8008c54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c56:	b13a      	cbz	r2, 8008c68 <_strtod_l+0xd0>
 8008c58:	2135      	movs	r1, #53	@ 0x35
 8008c5a:	a81c      	add	r0, sp, #112	@ 0x70
 8008c5c:	f7ff ff3a 	bl	8008ad4 <__copybits>
 8008c60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c62:	9805      	ldr	r0, [sp, #20]
 8008c64:	f7ff fb10 	bl	8008288 <_Bfree>
 8008c68:	3e01      	subs	r6, #1
 8008c6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008c6c:	2e04      	cmp	r6, #4
 8008c6e:	d806      	bhi.n	8008c7e <_strtod_l+0xe6>
 8008c70:	e8df f006 	tbb	[pc, r6]
 8008c74:	201d0314 	.word	0x201d0314
 8008c78:	14          	.byte	0x14
 8008c79:	00          	.byte	0x00
 8008c7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008c7e:	05e1      	lsls	r1, r4, #23
 8008c80:	bf48      	it	mi
 8008c82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008c86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c8a:	0d1b      	lsrs	r3, r3, #20
 8008c8c:	051b      	lsls	r3, r3, #20
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1bb      	bne.n	8008c0a <_strtod_l+0x72>
 8008c92:	f7fe fb1f 	bl	80072d4 <__errno>
 8008c96:	2322      	movs	r3, #34	@ 0x22
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	e7b6      	b.n	8008c0a <_strtod_l+0x72>
 8008c9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ca0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ca8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cac:	e7e7      	b.n	8008c7e <_strtod_l+0xe6>
 8008cae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008e30 <_strtod_l+0x298>
 8008cb2:	e7e4      	b.n	8008c7e <_strtod_l+0xe6>
 8008cb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008cb8:	f04f 3aff 	mov.w	sl, #4294967295
 8008cbc:	e7df      	b.n	8008c7e <_strtod_l+0xe6>
 8008cbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	2b30      	cmp	r3, #48	@ 0x30
 8008cc8:	d0f9      	beq.n	8008cbe <_strtod_l+0x126>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d09d      	beq.n	8008c0a <_strtod_l+0x72>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	2700      	movs	r7, #0
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cd8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008cda:	46b9      	mov	r9, r7
 8008cdc:	220a      	movs	r2, #10
 8008cde:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ce0:	7805      	ldrb	r5, [r0, #0]
 8008ce2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ce6:	b2d9      	uxtb	r1, r3
 8008ce8:	2909      	cmp	r1, #9
 8008cea:	d928      	bls.n	8008d3e <_strtod_l+0x1a6>
 8008cec:	494f      	ldr	r1, [pc, #316]	@ (8008e2c <_strtod_l+0x294>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f001 f838 	bl	8009d64 <strncmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d032      	beq.n	8008d5e <_strtod_l+0x1c6>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008cfe:	464d      	mov	r5, r9
 8008d00:	4603      	mov	r3, r0
 8008d02:	2a65      	cmp	r2, #101	@ 0x65
 8008d04:	d001      	beq.n	8008d0a <_strtod_l+0x172>
 8008d06:	2a45      	cmp	r2, #69	@ 0x45
 8008d08:	d114      	bne.n	8008d34 <_strtod_l+0x19c>
 8008d0a:	b91d      	cbnz	r5, 8008d14 <_strtod_l+0x17c>
 8008d0c:	9a08      	ldr	r2, [sp, #32]
 8008d0e:	4302      	orrs	r2, r0
 8008d10:	d096      	beq.n	8008c40 <_strtod_l+0xa8>
 8008d12:	2500      	movs	r5, #0
 8008d14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d16:	1c62      	adds	r2, r4, #1
 8008d18:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d1a:	7862      	ldrb	r2, [r4, #1]
 8008d1c:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d1e:	d07a      	beq.n	8008e16 <_strtod_l+0x27e>
 8008d20:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d22:	d07e      	beq.n	8008e22 <_strtod_l+0x28a>
 8008d24:	f04f 0c00 	mov.w	ip, #0
 8008d28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d2c:	2909      	cmp	r1, #9
 8008d2e:	f240 8085 	bls.w	8008e3c <_strtod_l+0x2a4>
 8008d32:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d34:	f04f 0800 	mov.w	r8, #0
 8008d38:	e0a5      	b.n	8008e86 <_strtod_l+0x2ee>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e7c8      	b.n	8008cd0 <_strtod_l+0x138>
 8008d3e:	f1b9 0f08 	cmp.w	r9, #8
 8008d42:	bfd8      	it	le
 8008d44:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008d46:	f100 0001 	add.w	r0, r0, #1
 8008d4a:	bfda      	itte	le
 8008d4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008d52:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008d56:	f109 0901 	add.w	r9, r9, #1
 8008d5a:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d5c:	e7bf      	b.n	8008cde <_strtod_l+0x146>
 8008d5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d64:	785a      	ldrb	r2, [r3, #1]
 8008d66:	f1b9 0f00 	cmp.w	r9, #0
 8008d6a:	d03b      	beq.n	8008de4 <_strtod_l+0x24c>
 8008d6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d6e:	464d      	mov	r5, r9
 8008d70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d912      	bls.n	8008d9e <_strtod_l+0x206>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7c2      	b.n	8008d02 <_strtod_l+0x16a>
 8008d7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d82:	785a      	ldrb	r2, [r3, #1]
 8008d84:	3001      	adds	r0, #1
 8008d86:	2a30      	cmp	r2, #48	@ 0x30
 8008d88:	d0f8      	beq.n	8008d7c <_strtod_l+0x1e4>
 8008d8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	f200 84d2 	bhi.w	8009738 <_strtod_l+0xba0>
 8008d94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d96:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d98:	2000      	movs	r0, #0
 8008d9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	3a30      	subs	r2, #48	@ 0x30
 8008da0:	f100 0301 	add.w	r3, r0, #1
 8008da4:	d018      	beq.n	8008dd8 <_strtod_l+0x240>
 8008da6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008da8:	4419      	add	r1, r3
 8008daa:	910a      	str	r1, [sp, #40]	@ 0x28
 8008dac:	462e      	mov	r6, r5
 8008dae:	f04f 0e0a 	mov.w	lr, #10
 8008db2:	1c71      	adds	r1, r6, #1
 8008db4:	eba1 0c05 	sub.w	ip, r1, r5
 8008db8:	4563      	cmp	r3, ip
 8008dba:	dc15      	bgt.n	8008de8 <_strtod_l+0x250>
 8008dbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008dc0:	182b      	adds	r3, r5, r0
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	f105 0501 	add.w	r5, r5, #1
 8008dc8:	4405      	add	r5, r0
 8008dca:	dc1a      	bgt.n	8008e02 <_strtod_l+0x26a>
 8008dcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dce:	230a      	movs	r3, #10
 8008dd0:	fb03 2301 	mla	r3, r3, r1, r2
 8008dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dda:	1c51      	adds	r1, r2, #1
 8008ddc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dde:	7852      	ldrb	r2, [r2, #1]
 8008de0:	4618      	mov	r0, r3
 8008de2:	e7c5      	b.n	8008d70 <_strtod_l+0x1d8>
 8008de4:	4648      	mov	r0, r9
 8008de6:	e7ce      	b.n	8008d86 <_strtod_l+0x1ee>
 8008de8:	2e08      	cmp	r6, #8
 8008dea:	dc05      	bgt.n	8008df8 <_strtod_l+0x260>
 8008dec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008dee:	fb0e f606 	mul.w	r6, lr, r6
 8008df2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008df4:	460e      	mov	r6, r1
 8008df6:	e7dc      	b.n	8008db2 <_strtod_l+0x21a>
 8008df8:	2910      	cmp	r1, #16
 8008dfa:	bfd8      	it	le
 8008dfc:	fb0e f707 	mulle.w	r7, lr, r7
 8008e00:	e7f8      	b.n	8008df4 <_strtod_l+0x25c>
 8008e02:	2b0f      	cmp	r3, #15
 8008e04:	bfdc      	itt	le
 8008e06:	230a      	movle	r3, #10
 8008e08:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e0c:	e7e3      	b.n	8008dd6 <_strtod_l+0x23e>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e12:	2301      	movs	r3, #1
 8008e14:	e77a      	b.n	8008d0c <_strtod_l+0x174>
 8008e16:	f04f 0c00 	mov.w	ip, #0
 8008e1a:	1ca2      	adds	r2, r4, #2
 8008e1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e1e:	78a2      	ldrb	r2, [r4, #2]
 8008e20:	e782      	b.n	8008d28 <_strtod_l+0x190>
 8008e22:	f04f 0c01 	mov.w	ip, #1
 8008e26:	e7f8      	b.n	8008e1a <_strtod_l+0x282>
 8008e28:	0800ad2c 	.word	0x0800ad2c
 8008e2c:	0800ab63 	.word	0x0800ab63
 8008e30:	7ff00000 	.word	0x7ff00000
 8008e34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e36:	1c51      	adds	r1, r2, #1
 8008e38:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e3a:	7852      	ldrb	r2, [r2, #1]
 8008e3c:	2a30      	cmp	r2, #48	@ 0x30
 8008e3e:	d0f9      	beq.n	8008e34 <_strtod_l+0x29c>
 8008e40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e44:	2908      	cmp	r1, #8
 8008e46:	f63f af75 	bhi.w	8008d34 <_strtod_l+0x19c>
 8008e4a:	3a30      	subs	r2, #48	@ 0x30
 8008e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e50:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e52:	f04f 080a 	mov.w	r8, #10
 8008e56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e58:	1c56      	adds	r6, r2, #1
 8008e5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008e5c:	7852      	ldrb	r2, [r2, #1]
 8008e5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008e62:	f1be 0f09 	cmp.w	lr, #9
 8008e66:	d939      	bls.n	8008edc <_strtod_l+0x344>
 8008e68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e6a:	1a76      	subs	r6, r6, r1
 8008e6c:	2e08      	cmp	r6, #8
 8008e6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008e72:	dc03      	bgt.n	8008e7c <_strtod_l+0x2e4>
 8008e74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e76:	4588      	cmp	r8, r1
 8008e78:	bfa8      	it	ge
 8008e7a:	4688      	movge	r8, r1
 8008e7c:	f1bc 0f00 	cmp.w	ip, #0
 8008e80:	d001      	beq.n	8008e86 <_strtod_l+0x2ee>
 8008e82:	f1c8 0800 	rsb	r8, r8, #0
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	d14e      	bne.n	8008f28 <_strtod_l+0x390>
 8008e8a:	9908      	ldr	r1, [sp, #32]
 8008e8c:	4308      	orrs	r0, r1
 8008e8e:	f47f aebc 	bne.w	8008c0a <_strtod_l+0x72>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f47f aed4 	bne.w	8008c40 <_strtod_l+0xa8>
 8008e98:	2a69      	cmp	r2, #105	@ 0x69
 8008e9a:	d028      	beq.n	8008eee <_strtod_l+0x356>
 8008e9c:	dc25      	bgt.n	8008eea <_strtod_l+0x352>
 8008e9e:	2a49      	cmp	r2, #73	@ 0x49
 8008ea0:	d025      	beq.n	8008eee <_strtod_l+0x356>
 8008ea2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ea4:	f47f aecc 	bne.w	8008c40 <_strtod_l+0xa8>
 8008ea8:	499a      	ldr	r1, [pc, #616]	@ (8009114 <_strtod_l+0x57c>)
 8008eaa:	a819      	add	r0, sp, #100	@ 0x64
 8008eac:	f001 fa64 	bl	800a378 <__match>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f43f aec5 	beq.w	8008c40 <_strtod_l+0xa8>
 8008eb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b28      	cmp	r3, #40	@ 0x28
 8008ebc:	d12e      	bne.n	8008f1c <_strtod_l+0x384>
 8008ebe:	4996      	ldr	r1, [pc, #600]	@ (8009118 <_strtod_l+0x580>)
 8008ec0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ec2:	a819      	add	r0, sp, #100	@ 0x64
 8008ec4:	f001 fa6c 	bl	800a3a0 <__hexnan>
 8008ec8:	2805      	cmp	r0, #5
 8008eca:	d127      	bne.n	8008f1c <_strtod_l+0x384>
 8008ecc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ece:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ed2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ed6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008eda:	e696      	b.n	8008c0a <_strtod_l+0x72>
 8008edc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ede:	fb08 2101 	mla	r1, r8, r1, r2
 8008ee2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee8:	e7b5      	b.n	8008e56 <_strtod_l+0x2be>
 8008eea:	2a6e      	cmp	r2, #110	@ 0x6e
 8008eec:	e7da      	b.n	8008ea4 <_strtod_l+0x30c>
 8008eee:	498b      	ldr	r1, [pc, #556]	@ (800911c <_strtod_l+0x584>)
 8008ef0:	a819      	add	r0, sp, #100	@ 0x64
 8008ef2:	f001 fa41 	bl	800a378 <__match>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f aea2 	beq.w	8008c40 <_strtod_l+0xa8>
 8008efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008efe:	4988      	ldr	r1, [pc, #544]	@ (8009120 <_strtod_l+0x588>)
 8008f00:	3b01      	subs	r3, #1
 8008f02:	a819      	add	r0, sp, #100	@ 0x64
 8008f04:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f06:	f001 fa37 	bl	800a378 <__match>
 8008f0a:	b910      	cbnz	r0, 8008f12 <_strtod_l+0x37a>
 8008f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f0e:	3301      	adds	r3, #1
 8008f10:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009130 <_strtod_l+0x598>
 8008f16:	f04f 0a00 	mov.w	sl, #0
 8008f1a:	e676      	b.n	8008c0a <_strtod_l+0x72>
 8008f1c:	4881      	ldr	r0, [pc, #516]	@ (8009124 <_strtod_l+0x58c>)
 8008f1e:	f000 ff67 	bl	8009df0 <nan>
 8008f22:	ec5b ab10 	vmov	sl, fp, d0
 8008f26:	e670      	b.n	8008c0a <_strtod_l+0x72>
 8008f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008f2c:	eba8 0303 	sub.w	r3, r8, r3
 8008f30:	f1b9 0f00 	cmp.w	r9, #0
 8008f34:	bf08      	it	eq
 8008f36:	46a9      	moveq	r9, r5
 8008f38:	2d10      	cmp	r5, #16
 8008f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3c:	462c      	mov	r4, r5
 8008f3e:	bfa8      	it	ge
 8008f40:	2410      	movge	r4, #16
 8008f42:	f7f7 fb07 	bl	8000554 <__aeabi_ui2d>
 8008f46:	2d09      	cmp	r5, #9
 8008f48:	4682      	mov	sl, r0
 8008f4a:	468b      	mov	fp, r1
 8008f4c:	dc13      	bgt.n	8008f76 <_strtod_l+0x3de>
 8008f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f43f ae5a 	beq.w	8008c0a <_strtod_l+0x72>
 8008f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f58:	dd78      	ble.n	800904c <_strtod_l+0x4b4>
 8008f5a:	2b16      	cmp	r3, #22
 8008f5c:	dc5f      	bgt.n	800901e <_strtod_l+0x486>
 8008f5e:	4972      	ldr	r1, [pc, #456]	@ (8009128 <_strtod_l+0x590>)
 8008f60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f68:	4652      	mov	r2, sl
 8008f6a:	465b      	mov	r3, fp
 8008f6c:	f7f7 fb6c 	bl	8000648 <__aeabi_dmul>
 8008f70:	4682      	mov	sl, r0
 8008f72:	468b      	mov	fp, r1
 8008f74:	e649      	b.n	8008c0a <_strtod_l+0x72>
 8008f76:	4b6c      	ldr	r3, [pc, #432]	@ (8009128 <_strtod_l+0x590>)
 8008f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008f80:	f7f7 fb62 	bl	8000648 <__aeabi_dmul>
 8008f84:	4682      	mov	sl, r0
 8008f86:	4638      	mov	r0, r7
 8008f88:	468b      	mov	fp, r1
 8008f8a:	f7f7 fae3 	bl	8000554 <__aeabi_ui2d>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4650      	mov	r0, sl
 8008f94:	4659      	mov	r1, fp
 8008f96:	f7f7 f9a1 	bl	80002dc <__adddf3>
 8008f9a:	2d0f      	cmp	r5, #15
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	468b      	mov	fp, r1
 8008fa0:	ddd5      	ble.n	8008f4e <_strtod_l+0x3b6>
 8008fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa4:	1b2c      	subs	r4, r5, r4
 8008fa6:	441c      	add	r4, r3
 8008fa8:	2c00      	cmp	r4, #0
 8008faa:	f340 8093 	ble.w	80090d4 <_strtod_l+0x53c>
 8008fae:	f014 030f 	ands.w	r3, r4, #15
 8008fb2:	d00a      	beq.n	8008fca <_strtod_l+0x432>
 8008fb4:	495c      	ldr	r1, [pc, #368]	@ (8009128 <_strtod_l+0x590>)
 8008fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc2:	f7f7 fb41 	bl	8000648 <__aeabi_dmul>
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	468b      	mov	fp, r1
 8008fca:	f034 040f 	bics.w	r4, r4, #15
 8008fce:	d073      	beq.n	80090b8 <_strtod_l+0x520>
 8008fd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008fd4:	dd49      	ble.n	800906a <_strtod_l+0x4d2>
 8008fd6:	2400      	movs	r4, #0
 8008fd8:	46a0      	mov	r8, r4
 8008fda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fdc:	46a1      	mov	r9, r4
 8008fde:	9a05      	ldr	r2, [sp, #20]
 8008fe0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009130 <_strtod_l+0x598>
 8008fe4:	2322      	movs	r3, #34	@ 0x22
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	f04f 0a00 	mov.w	sl, #0
 8008fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f43f ae0b 	beq.w	8008c0a <_strtod_l+0x72>
 8008ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ff6:	9805      	ldr	r0, [sp, #20]
 8008ff8:	f7ff f946 	bl	8008288 <_Bfree>
 8008ffc:	9805      	ldr	r0, [sp, #20]
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7ff f942 	bl	8008288 <_Bfree>
 8009004:	9805      	ldr	r0, [sp, #20]
 8009006:	4641      	mov	r1, r8
 8009008:	f7ff f93e 	bl	8008288 <_Bfree>
 800900c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800900e:	9805      	ldr	r0, [sp, #20]
 8009010:	f7ff f93a 	bl	8008288 <_Bfree>
 8009014:	9805      	ldr	r0, [sp, #20]
 8009016:	4621      	mov	r1, r4
 8009018:	f7ff f936 	bl	8008288 <_Bfree>
 800901c:	e5f5      	b.n	8008c0a <_strtod_l+0x72>
 800901e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009024:	4293      	cmp	r3, r2
 8009026:	dbbc      	blt.n	8008fa2 <_strtod_l+0x40a>
 8009028:	4c3f      	ldr	r4, [pc, #252]	@ (8009128 <_strtod_l+0x590>)
 800902a:	f1c5 050f 	rsb	r5, r5, #15
 800902e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009032:	4652      	mov	r2, sl
 8009034:	465b      	mov	r3, fp
 8009036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903a:	f7f7 fb05 	bl	8000648 <__aeabi_dmul>
 800903e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009040:	1b5d      	subs	r5, r3, r5
 8009042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800904a:	e78f      	b.n	8008f6c <_strtod_l+0x3d4>
 800904c:	3316      	adds	r3, #22
 800904e:	dba8      	blt.n	8008fa2 <_strtod_l+0x40a>
 8009050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009052:	eba3 0808 	sub.w	r8, r3, r8
 8009056:	4b34      	ldr	r3, [pc, #208]	@ (8009128 <_strtod_l+0x590>)
 8009058:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800905c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009060:	4650      	mov	r0, sl
 8009062:	4659      	mov	r1, fp
 8009064:	f7f7 fc1a 	bl	800089c <__aeabi_ddiv>
 8009068:	e782      	b.n	8008f70 <_strtod_l+0x3d8>
 800906a:	2300      	movs	r3, #0
 800906c:	4f2f      	ldr	r7, [pc, #188]	@ (800912c <_strtod_l+0x594>)
 800906e:	1124      	asrs	r4, r4, #4
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	461e      	mov	r6, r3
 8009076:	2c01      	cmp	r4, #1
 8009078:	dc21      	bgt.n	80090be <_strtod_l+0x526>
 800907a:	b10b      	cbz	r3, 8009080 <_strtod_l+0x4e8>
 800907c:	4682      	mov	sl, r0
 800907e:	468b      	mov	fp, r1
 8009080:	492a      	ldr	r1, [pc, #168]	@ (800912c <_strtod_l+0x594>)
 8009082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009092:	f7f7 fad9 	bl	8000648 <__aeabi_dmul>
 8009096:	4b26      	ldr	r3, [pc, #152]	@ (8009130 <_strtod_l+0x598>)
 8009098:	460a      	mov	r2, r1
 800909a:	400b      	ands	r3, r1
 800909c:	4925      	ldr	r1, [pc, #148]	@ (8009134 <_strtod_l+0x59c>)
 800909e:	428b      	cmp	r3, r1
 80090a0:	4682      	mov	sl, r0
 80090a2:	d898      	bhi.n	8008fd6 <_strtod_l+0x43e>
 80090a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf86      	itte	hi
 80090ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009138 <_strtod_l+0x5a0>
 80090b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80090b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80090b8:	2300      	movs	r3, #0
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	e076      	b.n	80091ac <_strtod_l+0x614>
 80090be:	07e2      	lsls	r2, r4, #31
 80090c0:	d504      	bpl.n	80090cc <_strtod_l+0x534>
 80090c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c6:	f7f7 fabf 	bl	8000648 <__aeabi_dmul>
 80090ca:	2301      	movs	r3, #1
 80090cc:	3601      	adds	r6, #1
 80090ce:	1064      	asrs	r4, r4, #1
 80090d0:	3708      	adds	r7, #8
 80090d2:	e7d0      	b.n	8009076 <_strtod_l+0x4de>
 80090d4:	d0f0      	beq.n	80090b8 <_strtod_l+0x520>
 80090d6:	4264      	negs	r4, r4
 80090d8:	f014 020f 	ands.w	r2, r4, #15
 80090dc:	d00a      	beq.n	80090f4 <_strtod_l+0x55c>
 80090de:	4b12      	ldr	r3, [pc, #72]	@ (8009128 <_strtod_l+0x590>)
 80090e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	4659      	mov	r1, fp
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 fbd6 	bl	800089c <__aeabi_ddiv>
 80090f0:	4682      	mov	sl, r0
 80090f2:	468b      	mov	fp, r1
 80090f4:	1124      	asrs	r4, r4, #4
 80090f6:	d0df      	beq.n	80090b8 <_strtod_l+0x520>
 80090f8:	2c1f      	cmp	r4, #31
 80090fa:	dd1f      	ble.n	800913c <_strtod_l+0x5a4>
 80090fc:	2400      	movs	r4, #0
 80090fe:	46a0      	mov	r8, r4
 8009100:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009102:	46a1      	mov	r9, r4
 8009104:	9a05      	ldr	r2, [sp, #20]
 8009106:	2322      	movs	r3, #34	@ 0x22
 8009108:	f04f 0a00 	mov.w	sl, #0
 800910c:	f04f 0b00 	mov.w	fp, #0
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	e76b      	b.n	8008fec <_strtod_l+0x454>
 8009114:	0800aa51 	.word	0x0800aa51
 8009118:	0800ad18 	.word	0x0800ad18
 800911c:	0800aa49 	.word	0x0800aa49
 8009120:	0800aa80 	.word	0x0800aa80
 8009124:	0800abb9 	.word	0x0800abb9
 8009128:	0800ac50 	.word	0x0800ac50
 800912c:	0800ac28 	.word	0x0800ac28
 8009130:	7ff00000 	.word	0x7ff00000
 8009134:	7ca00000 	.word	0x7ca00000
 8009138:	7fefffff 	.word	0x7fefffff
 800913c:	f014 0310 	ands.w	r3, r4, #16
 8009140:	bf18      	it	ne
 8009142:	236a      	movne	r3, #106	@ 0x6a
 8009144:	4ea9      	ldr	r6, [pc, #676]	@ (80093ec <_strtod_l+0x854>)
 8009146:	9308      	str	r3, [sp, #32]
 8009148:	4650      	mov	r0, sl
 800914a:	4659      	mov	r1, fp
 800914c:	2300      	movs	r3, #0
 800914e:	07e7      	lsls	r7, r4, #31
 8009150:	d504      	bpl.n	800915c <_strtod_l+0x5c4>
 8009152:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009156:	f7f7 fa77 	bl	8000648 <__aeabi_dmul>
 800915a:	2301      	movs	r3, #1
 800915c:	1064      	asrs	r4, r4, #1
 800915e:	f106 0608 	add.w	r6, r6, #8
 8009162:	d1f4      	bne.n	800914e <_strtod_l+0x5b6>
 8009164:	b10b      	cbz	r3, 800916a <_strtod_l+0x5d2>
 8009166:	4682      	mov	sl, r0
 8009168:	468b      	mov	fp, r1
 800916a:	9b08      	ldr	r3, [sp, #32]
 800916c:	b1b3      	cbz	r3, 800919c <_strtod_l+0x604>
 800916e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009172:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009176:	2b00      	cmp	r3, #0
 8009178:	4659      	mov	r1, fp
 800917a:	dd0f      	ble.n	800919c <_strtod_l+0x604>
 800917c:	2b1f      	cmp	r3, #31
 800917e:	dd56      	ble.n	800922e <_strtod_l+0x696>
 8009180:	2b34      	cmp	r3, #52	@ 0x34
 8009182:	bfde      	ittt	le
 8009184:	f04f 33ff 	movle.w	r3, #4294967295
 8009188:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800918c:	4093      	lslle	r3, r2
 800918e:	f04f 0a00 	mov.w	sl, #0
 8009192:	bfcc      	ite	gt
 8009194:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009198:	ea03 0b01 	andle.w	fp, r3, r1
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	f7f7 fcb8 	bl	8000b18 <__aeabi_dcmpeq>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1a7      	bne.n	80090fc <_strtod_l+0x564>
 80091ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80091b2:	9805      	ldr	r0, [sp, #20]
 80091b4:	462b      	mov	r3, r5
 80091b6:	464a      	mov	r2, r9
 80091b8:	f7ff f8ce 	bl	8008358 <__s2b>
 80091bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f af09 	beq.w	8008fd6 <_strtod_l+0x43e>
 80091c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	eba3 0308 	sub.w	r3, r3, r8
 80091ce:	bfa8      	it	ge
 80091d0:	2300      	movge	r3, #0
 80091d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80091d4:	2400      	movs	r4, #0
 80091d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80091da:	9316      	str	r3, [sp, #88]	@ 0x58
 80091dc:	46a0      	mov	r8, r4
 80091de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091e0:	9805      	ldr	r0, [sp, #20]
 80091e2:	6859      	ldr	r1, [r3, #4]
 80091e4:	f7ff f810 	bl	8008208 <_Balloc>
 80091e8:	4681      	mov	r9, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f43f aef7 	beq.w	8008fde <_strtod_l+0x446>
 80091f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	3202      	adds	r2, #2
 80091f6:	f103 010c 	add.w	r1, r3, #12
 80091fa:	0092      	lsls	r2, r2, #2
 80091fc:	300c      	adds	r0, #12
 80091fe:	f7fe f896 	bl	800732e <memcpy>
 8009202:	ec4b ab10 	vmov	d0, sl, fp
 8009206:	9805      	ldr	r0, [sp, #20]
 8009208:	aa1c      	add	r2, sp, #112	@ 0x70
 800920a:	a91b      	add	r1, sp, #108	@ 0x6c
 800920c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009210:	f7ff fbd6 	bl	80089c0 <__d2b>
 8009214:	901a      	str	r0, [sp, #104]	@ 0x68
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f aee1 	beq.w	8008fde <_strtod_l+0x446>
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	2101      	movs	r1, #1
 8009220:	f7ff f930 	bl	8008484 <__i2b>
 8009224:	4680      	mov	r8, r0
 8009226:	b948      	cbnz	r0, 800923c <_strtod_l+0x6a4>
 8009228:	f04f 0800 	mov.w	r8, #0
 800922c:	e6d7      	b.n	8008fde <_strtod_l+0x446>
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	ea03 0a0a 	and.w	sl, r3, sl
 800923a:	e7af      	b.n	800919c <_strtod_l+0x604>
 800923c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800923e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009240:	2d00      	cmp	r5, #0
 8009242:	bfab      	itete	ge
 8009244:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009246:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009248:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800924a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800924c:	bfac      	ite	ge
 800924e:	18ef      	addge	r7, r5, r3
 8009250:	1b5e      	sublt	r6, r3, r5
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	1aed      	subs	r5, r5, r3
 8009256:	4415      	add	r5, r2
 8009258:	4b65      	ldr	r3, [pc, #404]	@ (80093f0 <_strtod_l+0x858>)
 800925a:	3d01      	subs	r5, #1
 800925c:	429d      	cmp	r5, r3
 800925e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009262:	da50      	bge.n	8009306 <_strtod_l+0x76e>
 8009264:	1b5b      	subs	r3, r3, r5
 8009266:	2b1f      	cmp	r3, #31
 8009268:	eba2 0203 	sub.w	r2, r2, r3
 800926c:	f04f 0101 	mov.w	r1, #1
 8009270:	dc3d      	bgt.n	80092ee <_strtod_l+0x756>
 8009272:	fa01 f303 	lsl.w	r3, r1, r3
 8009276:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009278:	2300      	movs	r3, #0
 800927a:	9310      	str	r3, [sp, #64]	@ 0x40
 800927c:	18bd      	adds	r5, r7, r2
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	42af      	cmp	r7, r5
 8009282:	4416      	add	r6, r2
 8009284:	441e      	add	r6, r3
 8009286:	463b      	mov	r3, r7
 8009288:	bfa8      	it	ge
 800928a:	462b      	movge	r3, r5
 800928c:	42b3      	cmp	r3, r6
 800928e:	bfa8      	it	ge
 8009290:	4633      	movge	r3, r6
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfc2      	ittt	gt
 8009296:	1aed      	subgt	r5, r5, r3
 8009298:	1af6      	subgt	r6, r6, r3
 800929a:	1aff      	subgt	r7, r7, r3
 800929c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800929e:	2b00      	cmp	r3, #0
 80092a0:	dd16      	ble.n	80092d0 <_strtod_l+0x738>
 80092a2:	4641      	mov	r1, r8
 80092a4:	9805      	ldr	r0, [sp, #20]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7ff f9a4 	bl	80085f4 <__pow5mult>
 80092ac:	4680      	mov	r8, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d0ba      	beq.n	8009228 <_strtod_l+0x690>
 80092b2:	4601      	mov	r1, r0
 80092b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	f7ff f8fa 	bl	80084b0 <__multiply>
 80092bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f ae8d 	beq.w	8008fde <_strtod_l+0x446>
 80092c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	f7fe ffde 	bl	8008288 <_Bfree>
 80092cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	dc1d      	bgt.n	8009310 <_strtod_l+0x778>
 80092d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd23      	ble.n	8009322 <_strtod_l+0x78a>
 80092da:	4649      	mov	r1, r9
 80092dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80092de:	9805      	ldr	r0, [sp, #20]
 80092e0:	f7ff f988 	bl	80085f4 <__pow5mult>
 80092e4:	4681      	mov	r9, r0
 80092e6:	b9e0      	cbnz	r0, 8009322 <_strtod_l+0x78a>
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	e677      	b.n	8008fde <_strtod_l+0x446>
 80092ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80092f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80092f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80092fa:	35e2      	adds	r5, #226	@ 0xe2
 80092fc:	fa01 f305 	lsl.w	r3, r1, r5
 8009300:	9310      	str	r3, [sp, #64]	@ 0x40
 8009302:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009304:	e7ba      	b.n	800927c <_strtod_l+0x6e4>
 8009306:	2300      	movs	r3, #0
 8009308:	9310      	str	r3, [sp, #64]	@ 0x40
 800930a:	2301      	movs	r3, #1
 800930c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800930e:	e7b5      	b.n	800927c <_strtod_l+0x6e4>
 8009310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009312:	9805      	ldr	r0, [sp, #20]
 8009314:	462a      	mov	r2, r5
 8009316:	f7ff f9c7 	bl	80086a8 <__lshift>
 800931a:	901a      	str	r0, [sp, #104]	@ 0x68
 800931c:	2800      	cmp	r0, #0
 800931e:	d1d9      	bne.n	80092d4 <_strtod_l+0x73c>
 8009320:	e65d      	b.n	8008fde <_strtod_l+0x446>
 8009322:	2e00      	cmp	r6, #0
 8009324:	dd07      	ble.n	8009336 <_strtod_l+0x79e>
 8009326:	4649      	mov	r1, r9
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	4632      	mov	r2, r6
 800932c:	f7ff f9bc 	bl	80086a8 <__lshift>
 8009330:	4681      	mov	r9, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	d0d8      	beq.n	80092e8 <_strtod_l+0x750>
 8009336:	2f00      	cmp	r7, #0
 8009338:	dd08      	ble.n	800934c <_strtod_l+0x7b4>
 800933a:	4641      	mov	r1, r8
 800933c:	9805      	ldr	r0, [sp, #20]
 800933e:	463a      	mov	r2, r7
 8009340:	f7ff f9b2 	bl	80086a8 <__lshift>
 8009344:	4680      	mov	r8, r0
 8009346:	2800      	cmp	r0, #0
 8009348:	f43f ae49 	beq.w	8008fde <_strtod_l+0x446>
 800934c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800934e:	9805      	ldr	r0, [sp, #20]
 8009350:	464a      	mov	r2, r9
 8009352:	f7ff fa31 	bl	80087b8 <__mdiff>
 8009356:	4604      	mov	r4, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	f43f ae40 	beq.w	8008fde <_strtod_l+0x446>
 800935e:	68c3      	ldr	r3, [r0, #12]
 8009360:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009362:	2300      	movs	r3, #0
 8009364:	60c3      	str	r3, [r0, #12]
 8009366:	4641      	mov	r1, r8
 8009368:	f7ff fa0a 	bl	8008780 <__mcmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	da45      	bge.n	80093fc <_strtod_l+0x864>
 8009370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009372:	ea53 030a 	orrs.w	r3, r3, sl
 8009376:	d16b      	bne.n	8009450 <_strtod_l+0x8b8>
 8009378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800937c:	2b00      	cmp	r3, #0
 800937e:	d167      	bne.n	8009450 <_strtod_l+0x8b8>
 8009380:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009384:	0d1b      	lsrs	r3, r3, #20
 8009386:	051b      	lsls	r3, r3, #20
 8009388:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800938c:	d960      	bls.n	8009450 <_strtod_l+0x8b8>
 800938e:	6963      	ldr	r3, [r4, #20]
 8009390:	b913      	cbnz	r3, 8009398 <_strtod_l+0x800>
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	2b01      	cmp	r3, #1
 8009396:	dd5b      	ble.n	8009450 <_strtod_l+0x8b8>
 8009398:	4621      	mov	r1, r4
 800939a:	2201      	movs	r2, #1
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	f7ff f983 	bl	80086a8 <__lshift>
 80093a2:	4641      	mov	r1, r8
 80093a4:	4604      	mov	r4, r0
 80093a6:	f7ff f9eb 	bl	8008780 <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	dd50      	ble.n	8009450 <_strtod_l+0x8b8>
 80093ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093b2:	9a08      	ldr	r2, [sp, #32]
 80093b4:	0d1b      	lsrs	r3, r3, #20
 80093b6:	051b      	lsls	r3, r3, #20
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	d06a      	beq.n	8009492 <_strtod_l+0x8fa>
 80093bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093c0:	d867      	bhi.n	8009492 <_strtod_l+0x8fa>
 80093c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80093c6:	f67f ae9d 	bls.w	8009104 <_strtod_l+0x56c>
 80093ca:	4b0a      	ldr	r3, [pc, #40]	@ (80093f4 <_strtod_l+0x85c>)
 80093cc:	4650      	mov	r0, sl
 80093ce:	4659      	mov	r1, fp
 80093d0:	2200      	movs	r2, #0
 80093d2:	f7f7 f939 	bl	8000648 <__aeabi_dmul>
 80093d6:	4b08      	ldr	r3, [pc, #32]	@ (80093f8 <_strtod_l+0x860>)
 80093d8:	400b      	ands	r3, r1
 80093da:	4682      	mov	sl, r0
 80093dc:	468b      	mov	fp, r1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f47f ae08 	bne.w	8008ff4 <_strtod_l+0x45c>
 80093e4:	9a05      	ldr	r2, [sp, #20]
 80093e6:	2322      	movs	r3, #34	@ 0x22
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	e603      	b.n	8008ff4 <_strtod_l+0x45c>
 80093ec:	0800ad40 	.word	0x0800ad40
 80093f0:	fffffc02 	.word	0xfffffc02
 80093f4:	39500000 	.word	0x39500000
 80093f8:	7ff00000 	.word	0x7ff00000
 80093fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009400:	d165      	bne.n	80094ce <_strtod_l+0x936>
 8009402:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009408:	b35a      	cbz	r2, 8009462 <_strtod_l+0x8ca>
 800940a:	4a9f      	ldr	r2, [pc, #636]	@ (8009688 <_strtod_l+0xaf0>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d12b      	bne.n	8009468 <_strtod_l+0x8d0>
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	4651      	mov	r1, sl
 8009414:	b303      	cbz	r3, 8009458 <_strtod_l+0x8c0>
 8009416:	4b9d      	ldr	r3, [pc, #628]	@ (800968c <_strtod_l+0xaf4>)
 8009418:	465a      	mov	r2, fp
 800941a:	4013      	ands	r3, r2
 800941c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009420:	f04f 32ff 	mov.w	r2, #4294967295
 8009424:	d81b      	bhi.n	800945e <_strtod_l+0x8c6>
 8009426:	0d1b      	lsrs	r3, r3, #20
 8009428:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	4299      	cmp	r1, r3
 8009432:	d119      	bne.n	8009468 <_strtod_l+0x8d0>
 8009434:	4b96      	ldr	r3, [pc, #600]	@ (8009690 <_strtod_l+0xaf8>)
 8009436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009438:	429a      	cmp	r2, r3
 800943a:	d102      	bne.n	8009442 <_strtod_l+0x8aa>
 800943c:	3101      	adds	r1, #1
 800943e:	f43f adce 	beq.w	8008fde <_strtod_l+0x446>
 8009442:	4b92      	ldr	r3, [pc, #584]	@ (800968c <_strtod_l+0xaf4>)
 8009444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009446:	401a      	ands	r2, r3
 8009448:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800944c:	f04f 0a00 	mov.w	sl, #0
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1b9      	bne.n	80093ca <_strtod_l+0x832>
 8009456:	e5cd      	b.n	8008ff4 <_strtod_l+0x45c>
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
 800945c:	e7e8      	b.n	8009430 <_strtod_l+0x898>
 800945e:	4613      	mov	r3, r2
 8009460:	e7e6      	b.n	8009430 <_strtod_l+0x898>
 8009462:	ea53 030a 	orrs.w	r3, r3, sl
 8009466:	d0a2      	beq.n	80093ae <_strtod_l+0x816>
 8009468:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800946a:	b1db      	cbz	r3, 80094a4 <_strtod_l+0x90c>
 800946c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800946e:	4213      	tst	r3, r2
 8009470:	d0ee      	beq.n	8009450 <_strtod_l+0x8b8>
 8009472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009474:	9a08      	ldr	r2, [sp, #32]
 8009476:	4650      	mov	r0, sl
 8009478:	4659      	mov	r1, fp
 800947a:	b1bb      	cbz	r3, 80094ac <_strtod_l+0x914>
 800947c:	f7ff fb6e 	bl	8008b5c <sulp>
 8009480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009484:	ec53 2b10 	vmov	r2, r3, d0
 8009488:	f7f6 ff28 	bl	80002dc <__adddf3>
 800948c:	4682      	mov	sl, r0
 800948e:	468b      	mov	fp, r1
 8009490:	e7de      	b.n	8009450 <_strtod_l+0x8b8>
 8009492:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009496:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800949a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800949e:	f04f 3aff 	mov.w	sl, #4294967295
 80094a2:	e7d5      	b.n	8009450 <_strtod_l+0x8b8>
 80094a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094a6:	ea13 0f0a 	tst.w	r3, sl
 80094aa:	e7e1      	b.n	8009470 <_strtod_l+0x8d8>
 80094ac:	f7ff fb56 	bl	8008b5c <sulp>
 80094b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094b4:	ec53 2b10 	vmov	r2, r3, d0
 80094b8:	f7f6 ff0e 	bl	80002d8 <__aeabi_dsub>
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	4682      	mov	sl, r0
 80094c2:	468b      	mov	fp, r1
 80094c4:	f7f7 fb28 	bl	8000b18 <__aeabi_dcmpeq>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d0c1      	beq.n	8009450 <_strtod_l+0x8b8>
 80094cc:	e61a      	b.n	8009104 <_strtod_l+0x56c>
 80094ce:	4641      	mov	r1, r8
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7ff facd 	bl	8008a70 <__ratio>
 80094d6:	ec57 6b10 	vmov	r6, r7, d0
 80094da:	2200      	movs	r2, #0
 80094dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fb2c 	bl	8000b40 <__aeabi_dcmple>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d06f      	beq.n	80095cc <_strtod_l+0xa34>
 80094ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d17a      	bne.n	80095e8 <_strtod_l+0xa50>
 80094f2:	f1ba 0f00 	cmp.w	sl, #0
 80094f6:	d158      	bne.n	80095aa <_strtod_l+0xa12>
 80094f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d15a      	bne.n	80095b8 <_strtod_l+0xa20>
 8009502:	4b64      	ldr	r3, [pc, #400]	@ (8009694 <_strtod_l+0xafc>)
 8009504:	2200      	movs	r2, #0
 8009506:	4630      	mov	r0, r6
 8009508:	4639      	mov	r1, r7
 800950a:	f7f7 fb0f 	bl	8000b2c <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	d159      	bne.n	80095c6 <_strtod_l+0xa2e>
 8009512:	4630      	mov	r0, r6
 8009514:	4639      	mov	r1, r7
 8009516:	4b60      	ldr	r3, [pc, #384]	@ (8009698 <_strtod_l+0xb00>)
 8009518:	2200      	movs	r2, #0
 800951a:	f7f7 f895 	bl	8000648 <__aeabi_dmul>
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009526:	9606      	str	r6, [sp, #24]
 8009528:	9307      	str	r3, [sp, #28]
 800952a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800952e:	4d57      	ldr	r5, [pc, #348]	@ (800968c <_strtod_l+0xaf4>)
 8009530:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009536:	401d      	ands	r5, r3
 8009538:	4b58      	ldr	r3, [pc, #352]	@ (800969c <_strtod_l+0xb04>)
 800953a:	429d      	cmp	r5, r3
 800953c:	f040 80b2 	bne.w	80096a4 <_strtod_l+0xb0c>
 8009540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009542:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009546:	ec4b ab10 	vmov	d0, sl, fp
 800954a:	f7ff f9c9 	bl	80088e0 <__ulp>
 800954e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009552:	ec51 0b10 	vmov	r0, r1, d0
 8009556:	f7f7 f877 	bl	8000648 <__aeabi_dmul>
 800955a:	4652      	mov	r2, sl
 800955c:	465b      	mov	r3, fp
 800955e:	f7f6 febd 	bl	80002dc <__adddf3>
 8009562:	460b      	mov	r3, r1
 8009564:	4949      	ldr	r1, [pc, #292]	@ (800968c <_strtod_l+0xaf4>)
 8009566:	4a4e      	ldr	r2, [pc, #312]	@ (80096a0 <_strtod_l+0xb08>)
 8009568:	4019      	ands	r1, r3
 800956a:	4291      	cmp	r1, r2
 800956c:	4682      	mov	sl, r0
 800956e:	d942      	bls.n	80095f6 <_strtod_l+0xa5e>
 8009570:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009572:	4b47      	ldr	r3, [pc, #284]	@ (8009690 <_strtod_l+0xaf8>)
 8009574:	429a      	cmp	r2, r3
 8009576:	d103      	bne.n	8009580 <_strtod_l+0x9e8>
 8009578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800957a:	3301      	adds	r3, #1
 800957c:	f43f ad2f 	beq.w	8008fde <_strtod_l+0x446>
 8009580:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009690 <_strtod_l+0xaf8>
 8009584:	f04f 3aff 	mov.w	sl, #4294967295
 8009588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800958a:	9805      	ldr	r0, [sp, #20]
 800958c:	f7fe fe7c 	bl	8008288 <_Bfree>
 8009590:	9805      	ldr	r0, [sp, #20]
 8009592:	4649      	mov	r1, r9
 8009594:	f7fe fe78 	bl	8008288 <_Bfree>
 8009598:	9805      	ldr	r0, [sp, #20]
 800959a:	4641      	mov	r1, r8
 800959c:	f7fe fe74 	bl	8008288 <_Bfree>
 80095a0:	9805      	ldr	r0, [sp, #20]
 80095a2:	4621      	mov	r1, r4
 80095a4:	f7fe fe70 	bl	8008288 <_Bfree>
 80095a8:	e619      	b.n	80091de <_strtod_l+0x646>
 80095aa:	f1ba 0f01 	cmp.w	sl, #1
 80095ae:	d103      	bne.n	80095b8 <_strtod_l+0xa20>
 80095b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f ada6 	beq.w	8009104 <_strtod_l+0x56c>
 80095b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009668 <_strtod_l+0xad0>
 80095bc:	4f35      	ldr	r7, [pc, #212]	@ (8009694 <_strtod_l+0xafc>)
 80095be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095c2:	2600      	movs	r6, #0
 80095c4:	e7b1      	b.n	800952a <_strtod_l+0x992>
 80095c6:	4f34      	ldr	r7, [pc, #208]	@ (8009698 <_strtod_l+0xb00>)
 80095c8:	2600      	movs	r6, #0
 80095ca:	e7aa      	b.n	8009522 <_strtod_l+0x98a>
 80095cc:	4b32      	ldr	r3, [pc, #200]	@ (8009698 <_strtod_l+0xb00>)
 80095ce:	4630      	mov	r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	2200      	movs	r2, #0
 80095d4:	f7f7 f838 	bl	8000648 <__aeabi_dmul>
 80095d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095da:	4606      	mov	r6, r0
 80095dc:	460f      	mov	r7, r1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d09f      	beq.n	8009522 <_strtod_l+0x98a>
 80095e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80095e6:	e7a0      	b.n	800952a <_strtod_l+0x992>
 80095e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009670 <_strtod_l+0xad8>
 80095ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095f0:	ec57 6b17 	vmov	r6, r7, d7
 80095f4:	e799      	b.n	800952a <_strtod_l+0x992>
 80095f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80095fa:	9b08      	ldr	r3, [sp, #32]
 80095fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1c1      	bne.n	8009588 <_strtod_l+0x9f0>
 8009604:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009608:	0d1b      	lsrs	r3, r3, #20
 800960a:	051b      	lsls	r3, r3, #20
 800960c:	429d      	cmp	r5, r3
 800960e:	d1bb      	bne.n	8009588 <_strtod_l+0x9f0>
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 fb78 	bl	8000d08 <__aeabi_d2lz>
 8009618:	f7f6 ffe8 	bl	80005ec <__aeabi_l2d>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4630      	mov	r0, r6
 8009622:	4639      	mov	r1, r7
 8009624:	f7f6 fe58 	bl	80002d8 <__aeabi_dsub>
 8009628:	460b      	mov	r3, r1
 800962a:	4602      	mov	r2, r0
 800962c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009630:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009636:	ea46 060a 	orr.w	r6, r6, sl
 800963a:	431e      	orrs	r6, r3
 800963c:	d06f      	beq.n	800971e <_strtod_l+0xb86>
 800963e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009678 <_strtod_l+0xae0>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f7 fa72 	bl	8000b2c <__aeabi_dcmplt>
 8009648:	2800      	cmp	r0, #0
 800964a:	f47f acd3 	bne.w	8008ff4 <_strtod_l+0x45c>
 800964e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009680 <_strtod_l+0xae8>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009658:	f7f7 fa86 	bl	8000b68 <__aeabi_dcmpgt>
 800965c:	2800      	cmp	r0, #0
 800965e:	d093      	beq.n	8009588 <_strtod_l+0x9f0>
 8009660:	e4c8      	b.n	8008ff4 <_strtod_l+0x45c>
 8009662:	bf00      	nop
 8009664:	f3af 8000 	nop.w
 8009668:	00000000 	.word	0x00000000
 800966c:	bff00000 	.word	0xbff00000
 8009670:	00000000 	.word	0x00000000
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	94a03595 	.word	0x94a03595
 800967c:	3fdfffff 	.word	0x3fdfffff
 8009680:	35afe535 	.word	0x35afe535
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	000fffff 	.word	0x000fffff
 800968c:	7ff00000 	.word	0x7ff00000
 8009690:	7fefffff 	.word	0x7fefffff
 8009694:	3ff00000 	.word	0x3ff00000
 8009698:	3fe00000 	.word	0x3fe00000
 800969c:	7fe00000 	.word	0x7fe00000
 80096a0:	7c9fffff 	.word	0x7c9fffff
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	b323      	cbz	r3, 80096f2 <_strtod_l+0xb5a>
 80096a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096ac:	d821      	bhi.n	80096f2 <_strtod_l+0xb5a>
 80096ae:	a328      	add	r3, pc, #160	@ (adr r3, 8009750 <_strtod_l+0xbb8>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	4630      	mov	r0, r6
 80096b6:	4639      	mov	r1, r7
 80096b8:	f7f7 fa42 	bl	8000b40 <__aeabi_dcmple>
 80096bc:	b1a0      	cbz	r0, 80096e8 <_strtod_l+0xb50>
 80096be:	4639      	mov	r1, r7
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7f7 fa99 	bl	8000bf8 <__aeabi_d2uiz>
 80096c6:	2801      	cmp	r0, #1
 80096c8:	bf38      	it	cc
 80096ca:	2001      	movcc	r0, #1
 80096cc:	f7f6 ff42 	bl	8000554 <__aeabi_ui2d>
 80096d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	b9fb      	cbnz	r3, 8009718 <_strtod_l+0xb80>
 80096d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80096de:	9315      	str	r3, [sp, #84]	@ 0x54
 80096e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80096e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80096ee:	1b5b      	subs	r3, r3, r5
 80096f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80096f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80096f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80096fa:	f7ff f8f1 	bl	80088e0 <__ulp>
 80096fe:	4650      	mov	r0, sl
 8009700:	ec53 2b10 	vmov	r2, r3, d0
 8009704:	4659      	mov	r1, fp
 8009706:	f7f6 ff9f 	bl	8000648 <__aeabi_dmul>
 800970a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800970e:	f7f6 fde5 	bl	80002dc <__adddf3>
 8009712:	4682      	mov	sl, r0
 8009714:	468b      	mov	fp, r1
 8009716:	e770      	b.n	80095fa <_strtod_l+0xa62>
 8009718:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800971c:	e7e0      	b.n	80096e0 <_strtod_l+0xb48>
 800971e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009758 <_strtod_l+0xbc0>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f7 fa02 	bl	8000b2c <__aeabi_dcmplt>
 8009728:	e798      	b.n	800965c <_strtod_l+0xac4>
 800972a:	2300      	movs	r3, #0
 800972c:	930e      	str	r3, [sp, #56]	@ 0x38
 800972e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	f7ff ba6d 	b.w	8008c12 <_strtod_l+0x7a>
 8009738:	2a65      	cmp	r2, #101	@ 0x65
 800973a:	f43f ab68 	beq.w	8008e0e <_strtod_l+0x276>
 800973e:	2a45      	cmp	r2, #69	@ 0x45
 8009740:	f43f ab65 	beq.w	8008e0e <_strtod_l+0x276>
 8009744:	2301      	movs	r3, #1
 8009746:	f7ff bba0 	b.w	8008e8a <_strtod_l+0x2f2>
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w
 8009750:	ffc00000 	.word	0xffc00000
 8009754:	41dfffff 	.word	0x41dfffff
 8009758:	94a03595 	.word	0x94a03595
 800975c:	3fcfffff 	.word	0x3fcfffff

08009760 <_strtod_r>:
 8009760:	4b01      	ldr	r3, [pc, #4]	@ (8009768 <_strtod_r+0x8>)
 8009762:	f7ff ba19 	b.w	8008b98 <_strtod_l>
 8009766:	bf00      	nop
 8009768:	2000007c 	.word	0x2000007c

0800976c <_strtol_l.isra.0>:
 800976c:	2b24      	cmp	r3, #36	@ 0x24
 800976e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009772:	4686      	mov	lr, r0
 8009774:	4690      	mov	r8, r2
 8009776:	d801      	bhi.n	800977c <_strtol_l.isra.0+0x10>
 8009778:	2b01      	cmp	r3, #1
 800977a:	d106      	bne.n	800978a <_strtol_l.isra.0+0x1e>
 800977c:	f7fd fdaa 	bl	80072d4 <__errno>
 8009780:	2316      	movs	r3, #22
 8009782:	6003      	str	r3, [r0, #0]
 8009784:	2000      	movs	r0, #0
 8009786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978a:	4834      	ldr	r0, [pc, #208]	@ (800985c <_strtol_l.isra.0+0xf0>)
 800978c:	460d      	mov	r5, r1
 800978e:	462a      	mov	r2, r5
 8009790:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009794:	5d06      	ldrb	r6, [r0, r4]
 8009796:	f016 0608 	ands.w	r6, r6, #8
 800979a:	d1f8      	bne.n	800978e <_strtol_l.isra.0+0x22>
 800979c:	2c2d      	cmp	r4, #45	@ 0x2d
 800979e:	d110      	bne.n	80097c2 <_strtol_l.isra.0+0x56>
 80097a0:	782c      	ldrb	r4, [r5, #0]
 80097a2:	2601      	movs	r6, #1
 80097a4:	1c95      	adds	r5, r2, #2
 80097a6:	f033 0210 	bics.w	r2, r3, #16
 80097aa:	d115      	bne.n	80097d8 <_strtol_l.isra.0+0x6c>
 80097ac:	2c30      	cmp	r4, #48	@ 0x30
 80097ae:	d10d      	bne.n	80097cc <_strtol_l.isra.0+0x60>
 80097b0:	782a      	ldrb	r2, [r5, #0]
 80097b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097b6:	2a58      	cmp	r2, #88	@ 0x58
 80097b8:	d108      	bne.n	80097cc <_strtol_l.isra.0+0x60>
 80097ba:	786c      	ldrb	r4, [r5, #1]
 80097bc:	3502      	adds	r5, #2
 80097be:	2310      	movs	r3, #16
 80097c0:	e00a      	b.n	80097d8 <_strtol_l.isra.0+0x6c>
 80097c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80097c4:	bf04      	itt	eq
 80097c6:	782c      	ldrbeq	r4, [r5, #0]
 80097c8:	1c95      	addeq	r5, r2, #2
 80097ca:	e7ec      	b.n	80097a6 <_strtol_l.isra.0+0x3a>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f6      	bne.n	80097be <_strtol_l.isra.0+0x52>
 80097d0:	2c30      	cmp	r4, #48	@ 0x30
 80097d2:	bf14      	ite	ne
 80097d4:	230a      	movne	r3, #10
 80097d6:	2308      	moveq	r3, #8
 80097d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80097dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097e0:	2200      	movs	r2, #0
 80097e2:	fbbc f9f3 	udiv	r9, ip, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80097ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80097f0:	2f09      	cmp	r7, #9
 80097f2:	d80f      	bhi.n	8009814 <_strtol_l.isra.0+0xa8>
 80097f4:	463c      	mov	r4, r7
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	dd1b      	ble.n	8009832 <_strtol_l.isra.0+0xc6>
 80097fa:	1c57      	adds	r7, r2, #1
 80097fc:	d007      	beq.n	800980e <_strtol_l.isra.0+0xa2>
 80097fe:	4581      	cmp	r9, r0
 8009800:	d314      	bcc.n	800982c <_strtol_l.isra.0+0xc0>
 8009802:	d101      	bne.n	8009808 <_strtol_l.isra.0+0x9c>
 8009804:	45a2      	cmp	sl, r4
 8009806:	db11      	blt.n	800982c <_strtol_l.isra.0+0xc0>
 8009808:	fb00 4003 	mla	r0, r0, r3, r4
 800980c:	2201      	movs	r2, #1
 800980e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009812:	e7eb      	b.n	80097ec <_strtol_l.isra.0+0x80>
 8009814:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009818:	2f19      	cmp	r7, #25
 800981a:	d801      	bhi.n	8009820 <_strtol_l.isra.0+0xb4>
 800981c:	3c37      	subs	r4, #55	@ 0x37
 800981e:	e7ea      	b.n	80097f6 <_strtol_l.isra.0+0x8a>
 8009820:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009824:	2f19      	cmp	r7, #25
 8009826:	d804      	bhi.n	8009832 <_strtol_l.isra.0+0xc6>
 8009828:	3c57      	subs	r4, #87	@ 0x57
 800982a:	e7e4      	b.n	80097f6 <_strtol_l.isra.0+0x8a>
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	e7ed      	b.n	800980e <_strtol_l.isra.0+0xa2>
 8009832:	1c53      	adds	r3, r2, #1
 8009834:	d108      	bne.n	8009848 <_strtol_l.isra.0+0xdc>
 8009836:	2322      	movs	r3, #34	@ 0x22
 8009838:	f8ce 3000 	str.w	r3, [lr]
 800983c:	4660      	mov	r0, ip
 800983e:	f1b8 0f00 	cmp.w	r8, #0
 8009842:	d0a0      	beq.n	8009786 <_strtol_l.isra.0+0x1a>
 8009844:	1e69      	subs	r1, r5, #1
 8009846:	e006      	b.n	8009856 <_strtol_l.isra.0+0xea>
 8009848:	b106      	cbz	r6, 800984c <_strtol_l.isra.0+0xe0>
 800984a:	4240      	negs	r0, r0
 800984c:	f1b8 0f00 	cmp.w	r8, #0
 8009850:	d099      	beq.n	8009786 <_strtol_l.isra.0+0x1a>
 8009852:	2a00      	cmp	r2, #0
 8009854:	d1f6      	bne.n	8009844 <_strtol_l.isra.0+0xd8>
 8009856:	f8c8 1000 	str.w	r1, [r8]
 800985a:	e794      	b.n	8009786 <_strtol_l.isra.0+0x1a>
 800985c:	0800ad69 	.word	0x0800ad69

08009860 <_strtol_r>:
 8009860:	f7ff bf84 	b.w	800976c <_strtol_l.isra.0>

08009864 <__ssputs_r>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	688e      	ldr	r6, [r1, #8]
 800986a:	461f      	mov	r7, r3
 800986c:	42be      	cmp	r6, r7
 800986e:	680b      	ldr	r3, [r1, #0]
 8009870:	4682      	mov	sl, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4690      	mov	r8, r2
 8009876:	d82d      	bhi.n	80098d4 <__ssputs_r+0x70>
 8009878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800987c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009880:	d026      	beq.n	80098d0 <__ssputs_r+0x6c>
 8009882:	6965      	ldr	r5, [r4, #20]
 8009884:	6909      	ldr	r1, [r1, #16]
 8009886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800988a:	eba3 0901 	sub.w	r9, r3, r1
 800988e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009892:	1c7b      	adds	r3, r7, #1
 8009894:	444b      	add	r3, r9
 8009896:	106d      	asrs	r5, r5, #1
 8009898:	429d      	cmp	r5, r3
 800989a:	bf38      	it	cc
 800989c:	461d      	movcc	r5, r3
 800989e:	0553      	lsls	r3, r2, #21
 80098a0:	d527      	bpl.n	80098f2 <__ssputs_r+0x8e>
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7fe fc24 	bl	80080f0 <_malloc_r>
 80098a8:	4606      	mov	r6, r0
 80098aa:	b360      	cbz	r0, 8009906 <__ssputs_r+0xa2>
 80098ac:	6921      	ldr	r1, [r4, #16]
 80098ae:	464a      	mov	r2, r9
 80098b0:	f7fd fd3d 	bl	800732e <memcpy>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	6126      	str	r6, [r4, #16]
 80098c2:	6165      	str	r5, [r4, #20]
 80098c4:	444e      	add	r6, r9
 80098c6:	eba5 0509 	sub.w	r5, r5, r9
 80098ca:	6026      	str	r6, [r4, #0]
 80098cc:	60a5      	str	r5, [r4, #8]
 80098ce:	463e      	mov	r6, r7
 80098d0:	42be      	cmp	r6, r7
 80098d2:	d900      	bls.n	80098d6 <__ssputs_r+0x72>
 80098d4:	463e      	mov	r6, r7
 80098d6:	6820      	ldr	r0, [r4, #0]
 80098d8:	4632      	mov	r2, r6
 80098da:	4641      	mov	r1, r8
 80098dc:	f000 fa28 	bl	8009d30 <memmove>
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	1b9b      	subs	r3, r3, r6
 80098e4:	60a3      	str	r3, [r4, #8]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4433      	add	r3, r6
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f2:	462a      	mov	r2, r5
 80098f4:	f000 fe01 	bl	800a4fa <_realloc_r>
 80098f8:	4606      	mov	r6, r0
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d1e0      	bne.n	80098c0 <__ssputs_r+0x5c>
 80098fe:	6921      	ldr	r1, [r4, #16]
 8009900:	4650      	mov	r0, sl
 8009902:	f7fe fb81 	bl	8008008 <_free_r>
 8009906:	230c      	movs	r3, #12
 8009908:	f8ca 3000 	str.w	r3, [sl]
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	e7e9      	b.n	80098ee <__ssputs_r+0x8a>
	...

0800991c <_svfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4698      	mov	r8, r3
 8009922:	898b      	ldrh	r3, [r1, #12]
 8009924:	061b      	lsls	r3, r3, #24
 8009926:	b09d      	sub	sp, #116	@ 0x74
 8009928:	4607      	mov	r7, r0
 800992a:	460d      	mov	r5, r1
 800992c:	4614      	mov	r4, r2
 800992e:	d510      	bpl.n	8009952 <_svfiprintf_r+0x36>
 8009930:	690b      	ldr	r3, [r1, #16]
 8009932:	b973      	cbnz	r3, 8009952 <_svfiprintf_r+0x36>
 8009934:	2140      	movs	r1, #64	@ 0x40
 8009936:	f7fe fbdb 	bl	80080f0 <_malloc_r>
 800993a:	6028      	str	r0, [r5, #0]
 800993c:	6128      	str	r0, [r5, #16]
 800993e:	b930      	cbnz	r0, 800994e <_svfiprintf_r+0x32>
 8009940:	230c      	movs	r3, #12
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	b01d      	add	sp, #116	@ 0x74
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	2340      	movs	r3, #64	@ 0x40
 8009950:	616b      	str	r3, [r5, #20]
 8009952:	2300      	movs	r3, #0
 8009954:	9309      	str	r3, [sp, #36]	@ 0x24
 8009956:	2320      	movs	r3, #32
 8009958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800995c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009960:	2330      	movs	r3, #48	@ 0x30
 8009962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b00 <_svfiprintf_r+0x1e4>
 8009966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800996a:	f04f 0901 	mov.w	r9, #1
 800996e:	4623      	mov	r3, r4
 8009970:	469a      	mov	sl, r3
 8009972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009976:	b10a      	cbz	r2, 800997c <_svfiprintf_r+0x60>
 8009978:	2a25      	cmp	r2, #37	@ 0x25
 800997a:	d1f9      	bne.n	8009970 <_svfiprintf_r+0x54>
 800997c:	ebba 0b04 	subs.w	fp, sl, r4
 8009980:	d00b      	beq.n	800999a <_svfiprintf_r+0x7e>
 8009982:	465b      	mov	r3, fp
 8009984:	4622      	mov	r2, r4
 8009986:	4629      	mov	r1, r5
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff ff6b 	bl	8009864 <__ssputs_r>
 800998e:	3001      	adds	r0, #1
 8009990:	f000 80a7 	beq.w	8009ae2 <_svfiprintf_r+0x1c6>
 8009994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009996:	445a      	add	r2, fp
 8009998:	9209      	str	r2, [sp, #36]	@ 0x24
 800999a:	f89a 3000 	ldrb.w	r3, [sl]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 809f 	beq.w	8009ae2 <_svfiprintf_r+0x1c6>
 80099a4:	2300      	movs	r3, #0
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ae:	f10a 0a01 	add.w	sl, sl, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	9307      	str	r3, [sp, #28]
 80099b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80099bc:	4654      	mov	r4, sl
 80099be:	2205      	movs	r2, #5
 80099c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c4:	484e      	ldr	r0, [pc, #312]	@ (8009b00 <_svfiprintf_r+0x1e4>)
 80099c6:	f7f6 fc2b 	bl	8000220 <memchr>
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	b9d8      	cbnz	r0, 8009a06 <_svfiprintf_r+0xea>
 80099ce:	06d0      	lsls	r0, r2, #27
 80099d0:	bf44      	itt	mi
 80099d2:	2320      	movmi	r3, #32
 80099d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099d8:	0711      	lsls	r1, r2, #28
 80099da:	bf44      	itt	mi
 80099dc:	232b      	movmi	r3, #43	@ 0x2b
 80099de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099e2:	f89a 3000 	ldrb.w	r3, [sl]
 80099e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e8:	d015      	beq.n	8009a16 <_svfiprintf_r+0xfa>
 80099ea:	9a07      	ldr	r2, [sp, #28]
 80099ec:	4654      	mov	r4, sl
 80099ee:	2000      	movs	r0, #0
 80099f0:	f04f 0c0a 	mov.w	ip, #10
 80099f4:	4621      	mov	r1, r4
 80099f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099fa:	3b30      	subs	r3, #48	@ 0x30
 80099fc:	2b09      	cmp	r3, #9
 80099fe:	d94b      	bls.n	8009a98 <_svfiprintf_r+0x17c>
 8009a00:	b1b0      	cbz	r0, 8009a30 <_svfiprintf_r+0x114>
 8009a02:	9207      	str	r2, [sp, #28]
 8009a04:	e014      	b.n	8009a30 <_svfiprintf_r+0x114>
 8009a06:	eba0 0308 	sub.w	r3, r0, r8
 8009a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	46a2      	mov	sl, r4
 8009a14:	e7d2      	b.n	80099bc <_svfiprintf_r+0xa0>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	1d19      	adds	r1, r3, #4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	9103      	str	r1, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bfbb      	ittet	lt
 8009a22:	425b      	neglt	r3, r3
 8009a24:	f042 0202 	orrlt.w	r2, r2, #2
 8009a28:	9307      	strge	r3, [sp, #28]
 8009a2a:	9307      	strlt	r3, [sp, #28]
 8009a2c:	bfb8      	it	lt
 8009a2e:	9204      	strlt	r2, [sp, #16]
 8009a30:	7823      	ldrb	r3, [r4, #0]
 8009a32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a34:	d10a      	bne.n	8009a4c <_svfiprintf_r+0x130>
 8009a36:	7863      	ldrb	r3, [r4, #1]
 8009a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3a:	d132      	bne.n	8009aa2 <_svfiprintf_r+0x186>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	1d1a      	adds	r2, r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	9203      	str	r2, [sp, #12]
 8009a44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a48:	3402      	adds	r4, #2
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b10 <_svfiprintf_r+0x1f4>
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	2203      	movs	r2, #3
 8009a54:	4650      	mov	r0, sl
 8009a56:	f7f6 fbe3 	bl	8000220 <memchr>
 8009a5a:	b138      	cbz	r0, 8009a6c <_svfiprintf_r+0x150>
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	eba0 000a 	sub.w	r0, r0, sl
 8009a62:	2240      	movs	r2, #64	@ 0x40
 8009a64:	4082      	lsls	r2, r0
 8009a66:	4313      	orrs	r3, r2
 8009a68:	3401      	adds	r4, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a70:	4824      	ldr	r0, [pc, #144]	@ (8009b04 <_svfiprintf_r+0x1e8>)
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a76:	2206      	movs	r2, #6
 8009a78:	f7f6 fbd2 	bl	8000220 <memchr>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d036      	beq.n	8009aee <_svfiprintf_r+0x1d2>
 8009a80:	4b21      	ldr	r3, [pc, #132]	@ (8009b08 <_svfiprintf_r+0x1ec>)
 8009a82:	bb1b      	cbnz	r3, 8009acc <_svfiprintf_r+0x1b0>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	3307      	adds	r3, #7
 8009a88:	f023 0307 	bic.w	r3, r3, #7
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a92:	4433      	add	r3, r6
 8009a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a96:	e76a      	b.n	800996e <_svfiprintf_r+0x52>
 8009a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	e7a8      	b.n	80099f4 <_svfiprintf_r+0xd8>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f04f 0c0a 	mov.w	ip, #10
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab4:	3a30      	subs	r2, #48	@ 0x30
 8009ab6:	2a09      	cmp	r2, #9
 8009ab8:	d903      	bls.n	8009ac2 <_svfiprintf_r+0x1a6>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0c6      	beq.n	8009a4c <_svfiprintf_r+0x130>
 8009abe:	9105      	str	r1, [sp, #20]
 8009ac0:	e7c4      	b.n	8009a4c <_svfiprintf_r+0x130>
 8009ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e7f0      	b.n	8009aae <_svfiprintf_r+0x192>
 8009acc:	ab03      	add	r3, sp, #12
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b0c <_svfiprintf_r+0x1f0>)
 8009ad4:	a904      	add	r1, sp, #16
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7fc fbcc 	bl	8006274 <_printf_float>
 8009adc:	1c42      	adds	r2, r0, #1
 8009ade:	4606      	mov	r6, r0
 8009ae0:	d1d6      	bne.n	8009a90 <_svfiprintf_r+0x174>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	065b      	lsls	r3, r3, #25
 8009ae6:	f53f af2d 	bmi.w	8009944 <_svfiprintf_r+0x28>
 8009aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aec:	e72c      	b.n	8009948 <_svfiprintf_r+0x2c>
 8009aee:	ab03      	add	r3, sp, #12
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	462a      	mov	r2, r5
 8009af4:	4b05      	ldr	r3, [pc, #20]	@ (8009b0c <_svfiprintf_r+0x1f0>)
 8009af6:	a904      	add	r1, sp, #16
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7fc fe53 	bl	80067a4 <_printf_i>
 8009afe:	e7ed      	b.n	8009adc <_svfiprintf_r+0x1c0>
 8009b00:	0800ab65 	.word	0x0800ab65
 8009b04:	0800ab6f 	.word	0x0800ab6f
 8009b08:	08006275 	.word	0x08006275
 8009b0c:	08009865 	.word	0x08009865
 8009b10:	0800ab6b 	.word	0x0800ab6b

08009b14 <__sflush_r>:
 8009b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	0716      	lsls	r6, r2, #28
 8009b1e:	4605      	mov	r5, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	d454      	bmi.n	8009bce <__sflush_r+0xba>
 8009b24:	684b      	ldr	r3, [r1, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dc02      	bgt.n	8009b30 <__sflush_r+0x1c>
 8009b2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd48      	ble.n	8009bc2 <__sflush_r+0xae>
 8009b30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	d045      	beq.n	8009bc2 <__sflush_r+0xae>
 8009b36:	2300      	movs	r3, #0
 8009b38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b3c:	682f      	ldr	r7, [r5, #0]
 8009b3e:	6a21      	ldr	r1, [r4, #32]
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	d030      	beq.n	8009ba6 <__sflush_r+0x92>
 8009b44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	0759      	lsls	r1, r3, #29
 8009b4a:	d505      	bpl.n	8009b58 <__sflush_r+0x44>
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b52:	b10b      	cbz	r3, 8009b58 <__sflush_r+0x44>
 8009b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b5c:	6a21      	ldr	r1, [r4, #32]
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b0      	blx	r6
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	d106      	bne.n	8009b76 <__sflush_r+0x62>
 8009b68:	6829      	ldr	r1, [r5, #0]
 8009b6a:	291d      	cmp	r1, #29
 8009b6c:	d82b      	bhi.n	8009bc6 <__sflush_r+0xb2>
 8009b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009c18 <__sflush_r+0x104>)
 8009b70:	40ca      	lsrs	r2, r1
 8009b72:	07d6      	lsls	r6, r2, #31
 8009b74:	d527      	bpl.n	8009bc6 <__sflush_r+0xb2>
 8009b76:	2200      	movs	r2, #0
 8009b78:	6062      	str	r2, [r4, #4]
 8009b7a:	04d9      	lsls	r1, r3, #19
 8009b7c:	6922      	ldr	r2, [r4, #16]
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	d504      	bpl.n	8009b8c <__sflush_r+0x78>
 8009b82:	1c42      	adds	r2, r0, #1
 8009b84:	d101      	bne.n	8009b8a <__sflush_r+0x76>
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	b903      	cbnz	r3, 8009b8c <__sflush_r+0x78>
 8009b8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b8e:	602f      	str	r7, [r5, #0]
 8009b90:	b1b9      	cbz	r1, 8009bc2 <__sflush_r+0xae>
 8009b92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b96:	4299      	cmp	r1, r3
 8009b98:	d002      	beq.n	8009ba0 <__sflush_r+0x8c>
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7fe fa34 	bl	8008008 <_free_r>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba4:	e00d      	b.n	8009bc2 <__sflush_r+0xae>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b0      	blx	r6
 8009bac:	4602      	mov	r2, r0
 8009bae:	1c50      	adds	r0, r2, #1
 8009bb0:	d1c9      	bne.n	8009b46 <__sflush_r+0x32>
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0c6      	beq.n	8009b46 <__sflush_r+0x32>
 8009bb8:	2b1d      	cmp	r3, #29
 8009bba:	d001      	beq.n	8009bc0 <__sflush_r+0xac>
 8009bbc:	2b16      	cmp	r3, #22
 8009bbe:	d11e      	bne.n	8009bfe <__sflush_r+0xea>
 8009bc0:	602f      	str	r7, [r5, #0]
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e022      	b.n	8009c0c <__sflush_r+0xf8>
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bca:	b21b      	sxth	r3, r3
 8009bcc:	e01b      	b.n	8009c06 <__sflush_r+0xf2>
 8009bce:	690f      	ldr	r7, [r1, #16]
 8009bd0:	2f00      	cmp	r7, #0
 8009bd2:	d0f6      	beq.n	8009bc2 <__sflush_r+0xae>
 8009bd4:	0793      	lsls	r3, r2, #30
 8009bd6:	680e      	ldr	r6, [r1, #0]
 8009bd8:	bf08      	it	eq
 8009bda:	694b      	ldreq	r3, [r1, #20]
 8009bdc:	600f      	str	r7, [r1, #0]
 8009bde:	bf18      	it	ne
 8009be0:	2300      	movne	r3, #0
 8009be2:	eba6 0807 	sub.w	r8, r6, r7
 8009be6:	608b      	str	r3, [r1, #8]
 8009be8:	f1b8 0f00 	cmp.w	r8, #0
 8009bec:	dde9      	ble.n	8009bc2 <__sflush_r+0xae>
 8009bee:	6a21      	ldr	r1, [r4, #32]
 8009bf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bf2:	4643      	mov	r3, r8
 8009bf4:	463a      	mov	r2, r7
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b0      	blx	r6
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	dc08      	bgt.n	8009c10 <__sflush_r+0xfc>
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c10:	4407      	add	r7, r0
 8009c12:	eba8 0800 	sub.w	r8, r8, r0
 8009c16:	e7e7      	b.n	8009be8 <__sflush_r+0xd4>
 8009c18:	20400001 	.word	0x20400001

08009c1c <_fflush_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	690b      	ldr	r3, [r1, #16]
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	b913      	cbnz	r3, 8009c2c <_fflush_r+0x10>
 8009c26:	2500      	movs	r5, #0
 8009c28:	4628      	mov	r0, r5
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	b118      	cbz	r0, 8009c36 <_fflush_r+0x1a>
 8009c2e:	6a03      	ldr	r3, [r0, #32]
 8009c30:	b90b      	cbnz	r3, 8009c36 <_fflush_r+0x1a>
 8009c32:	f7fd f96f 	bl	8006f14 <__sinit>
 8009c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f3      	beq.n	8009c26 <_fflush_r+0xa>
 8009c3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c40:	07d0      	lsls	r0, r2, #31
 8009c42:	d404      	bmi.n	8009c4e <_fflush_r+0x32>
 8009c44:	0599      	lsls	r1, r3, #22
 8009c46:	d402      	bmi.n	8009c4e <_fflush_r+0x32>
 8009c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c4a:	f7fd fb6e 	bl	800732a <__retarget_lock_acquire_recursive>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	4621      	mov	r1, r4
 8009c52:	f7ff ff5f 	bl	8009b14 <__sflush_r>
 8009c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c58:	07da      	lsls	r2, r3, #31
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	d4e4      	bmi.n	8009c28 <_fflush_r+0xc>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	059b      	lsls	r3, r3, #22
 8009c62:	d4e1      	bmi.n	8009c28 <_fflush_r+0xc>
 8009c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c66:	f7fd fb61 	bl	800732c <__retarget_lock_release_recursive>
 8009c6a:	e7dd      	b.n	8009c28 <_fflush_r+0xc>

08009c6c <__swhatbuf_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	460c      	mov	r4, r1
 8009c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c74:	2900      	cmp	r1, #0
 8009c76:	b096      	sub	sp, #88	@ 0x58
 8009c78:	4615      	mov	r5, r2
 8009c7a:	461e      	mov	r6, r3
 8009c7c:	da0d      	bge.n	8009c9a <__swhatbuf_r+0x2e>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c84:	f04f 0100 	mov.w	r1, #0
 8009c88:	bf14      	ite	ne
 8009c8a:	2340      	movne	r3, #64	@ 0x40
 8009c8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c90:	2000      	movs	r0, #0
 8009c92:	6031      	str	r1, [r6, #0]
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	b016      	add	sp, #88	@ 0x58
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	466a      	mov	r2, sp
 8009c9c:	f000 f874 	bl	8009d88 <_fstat_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	dbec      	blt.n	8009c7e <__swhatbuf_r+0x12>
 8009ca4:	9901      	ldr	r1, [sp, #4]
 8009ca6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009caa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cae:	4259      	negs	r1, r3
 8009cb0:	4159      	adcs	r1, r3
 8009cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cb6:	e7eb      	b.n	8009c90 <__swhatbuf_r+0x24>

08009cb8 <__smakebuf_r>:
 8009cb8:	898b      	ldrh	r3, [r1, #12]
 8009cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cbc:	079d      	lsls	r5, r3, #30
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	d507      	bpl.n	8009cd4 <__smakebuf_r+0x1c>
 8009cc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	6163      	str	r3, [r4, #20]
 8009cd0:	b003      	add	sp, #12
 8009cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd4:	ab01      	add	r3, sp, #4
 8009cd6:	466a      	mov	r2, sp
 8009cd8:	f7ff ffc8 	bl	8009c6c <__swhatbuf_r>
 8009cdc:	9f00      	ldr	r7, [sp, #0]
 8009cde:	4605      	mov	r5, r0
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7fe fa04 	bl	80080f0 <_malloc_r>
 8009ce8:	b948      	cbnz	r0, 8009cfe <__smakebuf_r+0x46>
 8009cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cee:	059a      	lsls	r2, r3, #22
 8009cf0:	d4ee      	bmi.n	8009cd0 <__smakebuf_r+0x18>
 8009cf2:	f023 0303 	bic.w	r3, r3, #3
 8009cf6:	f043 0302 	orr.w	r3, r3, #2
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	e7e2      	b.n	8009cc4 <__smakebuf_r+0xc>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	6020      	str	r0, [r4, #0]
 8009d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d0e:	b15b      	cbz	r3, 8009d28 <__smakebuf_r+0x70>
 8009d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 f849 	bl	8009dac <_isatty_r>
 8009d1a:	b128      	cbz	r0, 8009d28 <__smakebuf_r+0x70>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f023 0303 	bic.w	r3, r3, #3
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	431d      	orrs	r5, r3
 8009d2c:	81a5      	strh	r5, [r4, #12]
 8009d2e:	e7cf      	b.n	8009cd0 <__smakebuf_r+0x18>

08009d30 <memmove>:
 8009d30:	4288      	cmp	r0, r1
 8009d32:	b510      	push	{r4, lr}
 8009d34:	eb01 0402 	add.w	r4, r1, r2
 8009d38:	d902      	bls.n	8009d40 <memmove+0x10>
 8009d3a:	4284      	cmp	r4, r0
 8009d3c:	4623      	mov	r3, r4
 8009d3e:	d807      	bhi.n	8009d50 <memmove+0x20>
 8009d40:	1e43      	subs	r3, r0, #1
 8009d42:	42a1      	cmp	r1, r4
 8009d44:	d008      	beq.n	8009d58 <memmove+0x28>
 8009d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d4e:	e7f8      	b.n	8009d42 <memmove+0x12>
 8009d50:	4402      	add	r2, r0
 8009d52:	4601      	mov	r1, r0
 8009d54:	428a      	cmp	r2, r1
 8009d56:	d100      	bne.n	8009d5a <memmove+0x2a>
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d62:	e7f7      	b.n	8009d54 <memmove+0x24>

08009d64 <strncmp>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	b16a      	cbz	r2, 8009d84 <strncmp+0x20>
 8009d68:	3901      	subs	r1, #1
 8009d6a:	1884      	adds	r4, r0, r2
 8009d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d103      	bne.n	8009d80 <strncmp+0x1c>
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d001      	beq.n	8009d80 <strncmp+0x1c>
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	d1f5      	bne.n	8009d6c <strncmp+0x8>
 8009d80:	1ad0      	subs	r0, r2, r3
 8009d82:	bd10      	pop	{r4, pc}
 8009d84:	4610      	mov	r0, r2
 8009d86:	e7fc      	b.n	8009d82 <strncmp+0x1e>

08009d88 <_fstat_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d07      	ldr	r5, [pc, #28]	@ (8009da8 <_fstat_r+0x20>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	4611      	mov	r1, r2
 8009d94:	602b      	str	r3, [r5, #0]
 8009d96:	f7f7 ff19 	bl	8001bcc <_fstat>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	d102      	bne.n	8009da4 <_fstat_r+0x1c>
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	b103      	cbz	r3, 8009da4 <_fstat_r+0x1c>
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	bd38      	pop	{r3, r4, r5, pc}
 8009da6:	bf00      	nop
 8009da8:	2000056c 	.word	0x2000056c

08009dac <_isatty_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d06      	ldr	r5, [pc, #24]	@ (8009dc8 <_isatty_r+0x1c>)
 8009db0:	2300      	movs	r3, #0
 8009db2:	4604      	mov	r4, r0
 8009db4:	4608      	mov	r0, r1
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	f7f7 ff18 	bl	8001bec <_isatty>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d102      	bne.n	8009dc6 <_isatty_r+0x1a>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	b103      	cbz	r3, 8009dc6 <_isatty_r+0x1a>
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	2000056c 	.word	0x2000056c

08009dcc <_sbrk_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d06      	ldr	r5, [pc, #24]	@ (8009de8 <_sbrk_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f7f7 ff20 	bl	8001c1c <_sbrk>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_sbrk_r+0x1a>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_sbrk_r+0x1a>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	2000056c 	.word	0x2000056c
 8009dec:	00000000 	.word	0x00000000

08009df0 <nan>:
 8009df0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009df8 <nan+0x8>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	7ff80000 	.word	0x7ff80000

08009e00 <__assert_func>:
 8009e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e02:	4614      	mov	r4, r2
 8009e04:	461a      	mov	r2, r3
 8009e06:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <__assert_func+0x2c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	68d8      	ldr	r0, [r3, #12]
 8009e0e:	b14c      	cbz	r4, 8009e24 <__assert_func+0x24>
 8009e10:	4b07      	ldr	r3, [pc, #28]	@ (8009e30 <__assert_func+0x30>)
 8009e12:	9100      	str	r1, [sp, #0]
 8009e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e18:	4906      	ldr	r1, [pc, #24]	@ (8009e34 <__assert_func+0x34>)
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	f000 fba8 	bl	800a570 <fiprintf>
 8009e20:	f000 fbb8 	bl	800a594 <abort>
 8009e24:	4b04      	ldr	r3, [pc, #16]	@ (8009e38 <__assert_func+0x38>)
 8009e26:	461c      	mov	r4, r3
 8009e28:	e7f3      	b.n	8009e12 <__assert_func+0x12>
 8009e2a:	bf00      	nop
 8009e2c:	2000002c 	.word	0x2000002c
 8009e30:	0800ab7e 	.word	0x0800ab7e
 8009e34:	0800ab8b 	.word	0x0800ab8b
 8009e38:	0800abb9 	.word	0x0800abb9

08009e3c <_calloc_r>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	fba1 5402 	umull	r5, r4, r1, r2
 8009e42:	b934      	cbnz	r4, 8009e52 <_calloc_r+0x16>
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7fe f953 	bl	80080f0 <_malloc_r>
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	b928      	cbnz	r0, 8009e5a <_calloc_r+0x1e>
 8009e4e:	4630      	mov	r0, r6
 8009e50:	bd70      	pop	{r4, r5, r6, pc}
 8009e52:	220c      	movs	r2, #12
 8009e54:	6002      	str	r2, [r0, #0]
 8009e56:	2600      	movs	r6, #0
 8009e58:	e7f9      	b.n	8009e4e <_calloc_r+0x12>
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	f7fd f9e7 	bl	8007230 <memset>
 8009e62:	e7f4      	b.n	8009e4e <_calloc_r+0x12>

08009e64 <rshift>:
 8009e64:	6903      	ldr	r3, [r0, #16]
 8009e66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e72:	f100 0414 	add.w	r4, r0, #20
 8009e76:	dd45      	ble.n	8009f04 <rshift+0xa0>
 8009e78:	f011 011f 	ands.w	r1, r1, #31
 8009e7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e84:	d10c      	bne.n	8009ea0 <rshift+0x3c>
 8009e86:	f100 0710 	add.w	r7, r0, #16
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	42b1      	cmp	r1, r6
 8009e8e:	d334      	bcc.n	8009efa <rshift+0x96>
 8009e90:	1a9b      	subs	r3, r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	1eea      	subs	r2, r5, #3
 8009e96:	4296      	cmp	r6, r2
 8009e98:	bf38      	it	cc
 8009e9a:	2300      	movcc	r3, #0
 8009e9c:	4423      	add	r3, r4
 8009e9e:	e015      	b.n	8009ecc <rshift+0x68>
 8009ea0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ea4:	f1c1 0820 	rsb	r8, r1, #32
 8009ea8:	40cf      	lsrs	r7, r1
 8009eaa:	f105 0e04 	add.w	lr, r5, #4
 8009eae:	46a1      	mov	r9, r4
 8009eb0:	4576      	cmp	r6, lr
 8009eb2:	46f4      	mov	ip, lr
 8009eb4:	d815      	bhi.n	8009ee2 <rshift+0x7e>
 8009eb6:	1a9a      	subs	r2, r3, r2
 8009eb8:	0092      	lsls	r2, r2, #2
 8009eba:	3a04      	subs	r2, #4
 8009ebc:	3501      	adds	r5, #1
 8009ebe:	42ae      	cmp	r6, r5
 8009ec0:	bf38      	it	cc
 8009ec2:	2200      	movcc	r2, #0
 8009ec4:	18a3      	adds	r3, r4, r2
 8009ec6:	50a7      	str	r7, [r4, r2]
 8009ec8:	b107      	cbz	r7, 8009ecc <rshift+0x68>
 8009eca:	3304      	adds	r3, #4
 8009ecc:	1b1a      	subs	r2, r3, r4
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ed4:	bf08      	it	eq
 8009ed6:	2300      	moveq	r3, #0
 8009ed8:	6102      	str	r2, [r0, #16]
 8009eda:	bf08      	it	eq
 8009edc:	6143      	streq	r3, [r0, #20]
 8009ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ee2:	f8dc c000 	ldr.w	ip, [ip]
 8009ee6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009eea:	ea4c 0707 	orr.w	r7, ip, r7
 8009eee:	f849 7b04 	str.w	r7, [r9], #4
 8009ef2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ef6:	40cf      	lsrs	r7, r1
 8009ef8:	e7da      	b.n	8009eb0 <rshift+0x4c>
 8009efa:	f851 cb04 	ldr.w	ip, [r1], #4
 8009efe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f02:	e7c3      	b.n	8009e8c <rshift+0x28>
 8009f04:	4623      	mov	r3, r4
 8009f06:	e7e1      	b.n	8009ecc <rshift+0x68>

08009f08 <__hexdig_fun>:
 8009f08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d802      	bhi.n	8009f16 <__hexdig_fun+0xe>
 8009f10:	3820      	subs	r0, #32
 8009f12:	b2c0      	uxtb	r0, r0
 8009f14:	4770      	bx	lr
 8009f16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f1a:	2b05      	cmp	r3, #5
 8009f1c:	d801      	bhi.n	8009f22 <__hexdig_fun+0x1a>
 8009f1e:	3847      	subs	r0, #71	@ 0x47
 8009f20:	e7f7      	b.n	8009f12 <__hexdig_fun+0xa>
 8009f22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d801      	bhi.n	8009f2e <__hexdig_fun+0x26>
 8009f2a:	3827      	subs	r0, #39	@ 0x27
 8009f2c:	e7f1      	b.n	8009f12 <__hexdig_fun+0xa>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	4770      	bx	lr
	...

08009f34 <__gethex>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	468a      	mov	sl, r1
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	680b      	ldr	r3, [r1, #0]
 8009f40:	9001      	str	r0, [sp, #4]
 8009f42:	4690      	mov	r8, r2
 8009f44:	1c9c      	adds	r4, r3, #2
 8009f46:	46a1      	mov	r9, r4
 8009f48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f4c:	2830      	cmp	r0, #48	@ 0x30
 8009f4e:	d0fa      	beq.n	8009f46 <__gethex+0x12>
 8009f50:	eba9 0303 	sub.w	r3, r9, r3
 8009f54:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f58:	f7ff ffd6 	bl	8009f08 <__hexdig_fun>
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d168      	bne.n	800a034 <__gethex+0x100>
 8009f62:	49a0      	ldr	r1, [pc, #640]	@ (800a1e4 <__gethex+0x2b0>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	4648      	mov	r0, r9
 8009f68:	f7ff fefc 	bl	8009d64 <strncmp>
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d167      	bne.n	800a042 <__gethex+0x10e>
 8009f72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f76:	4626      	mov	r6, r4
 8009f78:	f7ff ffc6 	bl	8009f08 <__hexdig_fun>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d062      	beq.n	800a046 <__gethex+0x112>
 8009f80:	4623      	mov	r3, r4
 8009f82:	7818      	ldrb	r0, [r3, #0]
 8009f84:	2830      	cmp	r0, #48	@ 0x30
 8009f86:	4699      	mov	r9, r3
 8009f88:	f103 0301 	add.w	r3, r3, #1
 8009f8c:	d0f9      	beq.n	8009f82 <__gethex+0x4e>
 8009f8e:	f7ff ffbb 	bl	8009f08 <__hexdig_fun>
 8009f92:	fab0 f580 	clz	r5, r0
 8009f96:	096d      	lsrs	r5, r5, #5
 8009f98:	f04f 0b01 	mov.w	fp, #1
 8009f9c:	464a      	mov	r2, r9
 8009f9e:	4616      	mov	r6, r2
 8009fa0:	3201      	adds	r2, #1
 8009fa2:	7830      	ldrb	r0, [r6, #0]
 8009fa4:	f7ff ffb0 	bl	8009f08 <__hexdig_fun>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d1f8      	bne.n	8009f9e <__gethex+0x6a>
 8009fac:	498d      	ldr	r1, [pc, #564]	@ (800a1e4 <__gethex+0x2b0>)
 8009fae:	2201      	movs	r2, #1
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7ff fed7 	bl	8009d64 <strncmp>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d13f      	bne.n	800a03a <__gethex+0x106>
 8009fba:	b944      	cbnz	r4, 8009fce <__gethex+0x9a>
 8009fbc:	1c74      	adds	r4, r6, #1
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4616      	mov	r6, r2
 8009fc2:	3201      	adds	r2, #1
 8009fc4:	7830      	ldrb	r0, [r6, #0]
 8009fc6:	f7ff ff9f 	bl	8009f08 <__hexdig_fun>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d1f8      	bne.n	8009fc0 <__gethex+0x8c>
 8009fce:	1ba4      	subs	r4, r4, r6
 8009fd0:	00a7      	lsls	r7, r4, #2
 8009fd2:	7833      	ldrb	r3, [r6, #0]
 8009fd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fd8:	2b50      	cmp	r3, #80	@ 0x50
 8009fda:	d13e      	bne.n	800a05a <__gethex+0x126>
 8009fdc:	7873      	ldrb	r3, [r6, #1]
 8009fde:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fe0:	d033      	beq.n	800a04a <__gethex+0x116>
 8009fe2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fe4:	d034      	beq.n	800a050 <__gethex+0x11c>
 8009fe6:	1c71      	adds	r1, r6, #1
 8009fe8:	2400      	movs	r4, #0
 8009fea:	7808      	ldrb	r0, [r1, #0]
 8009fec:	f7ff ff8c 	bl	8009f08 <__hexdig_fun>
 8009ff0:	1e43      	subs	r3, r0, #1
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b18      	cmp	r3, #24
 8009ff6:	d830      	bhi.n	800a05a <__gethex+0x126>
 8009ff8:	f1a0 0210 	sub.w	r2, r0, #16
 8009ffc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a000:	f7ff ff82 	bl	8009f08 <__hexdig_fun>
 800a004:	f100 3cff 	add.w	ip, r0, #4294967295
 800a008:	fa5f fc8c 	uxtb.w	ip, ip
 800a00c:	f1bc 0f18 	cmp.w	ip, #24
 800a010:	f04f 030a 	mov.w	r3, #10
 800a014:	d91e      	bls.n	800a054 <__gethex+0x120>
 800a016:	b104      	cbz	r4, 800a01a <__gethex+0xe6>
 800a018:	4252      	negs	r2, r2
 800a01a:	4417      	add	r7, r2
 800a01c:	f8ca 1000 	str.w	r1, [sl]
 800a020:	b1ed      	cbz	r5, 800a05e <__gethex+0x12a>
 800a022:	f1bb 0f00 	cmp.w	fp, #0
 800a026:	bf0c      	ite	eq
 800a028:	2506      	moveq	r5, #6
 800a02a:	2500      	movne	r5, #0
 800a02c:	4628      	mov	r0, r5
 800a02e:	b005      	add	sp, #20
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a034:	2500      	movs	r5, #0
 800a036:	462c      	mov	r4, r5
 800a038:	e7b0      	b.n	8009f9c <__gethex+0x68>
 800a03a:	2c00      	cmp	r4, #0
 800a03c:	d1c7      	bne.n	8009fce <__gethex+0x9a>
 800a03e:	4627      	mov	r7, r4
 800a040:	e7c7      	b.n	8009fd2 <__gethex+0x9e>
 800a042:	464e      	mov	r6, r9
 800a044:	462f      	mov	r7, r5
 800a046:	2501      	movs	r5, #1
 800a048:	e7c3      	b.n	8009fd2 <__gethex+0x9e>
 800a04a:	2400      	movs	r4, #0
 800a04c:	1cb1      	adds	r1, r6, #2
 800a04e:	e7cc      	b.n	8009fea <__gethex+0xb6>
 800a050:	2401      	movs	r4, #1
 800a052:	e7fb      	b.n	800a04c <__gethex+0x118>
 800a054:	fb03 0002 	mla	r0, r3, r2, r0
 800a058:	e7ce      	b.n	8009ff8 <__gethex+0xc4>
 800a05a:	4631      	mov	r1, r6
 800a05c:	e7de      	b.n	800a01c <__gethex+0xe8>
 800a05e:	eba6 0309 	sub.w	r3, r6, r9
 800a062:	3b01      	subs	r3, #1
 800a064:	4629      	mov	r1, r5
 800a066:	2b07      	cmp	r3, #7
 800a068:	dc0a      	bgt.n	800a080 <__gethex+0x14c>
 800a06a:	9801      	ldr	r0, [sp, #4]
 800a06c:	f7fe f8cc 	bl	8008208 <_Balloc>
 800a070:	4604      	mov	r4, r0
 800a072:	b940      	cbnz	r0, 800a086 <__gethex+0x152>
 800a074:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e8 <__gethex+0x2b4>)
 800a076:	4602      	mov	r2, r0
 800a078:	21e4      	movs	r1, #228	@ 0xe4
 800a07a:	485c      	ldr	r0, [pc, #368]	@ (800a1ec <__gethex+0x2b8>)
 800a07c:	f7ff fec0 	bl	8009e00 <__assert_func>
 800a080:	3101      	adds	r1, #1
 800a082:	105b      	asrs	r3, r3, #1
 800a084:	e7ef      	b.n	800a066 <__gethex+0x132>
 800a086:	f100 0a14 	add.w	sl, r0, #20
 800a08a:	2300      	movs	r3, #0
 800a08c:	4655      	mov	r5, sl
 800a08e:	469b      	mov	fp, r3
 800a090:	45b1      	cmp	r9, r6
 800a092:	d337      	bcc.n	800a104 <__gethex+0x1d0>
 800a094:	f845 bb04 	str.w	fp, [r5], #4
 800a098:	eba5 050a 	sub.w	r5, r5, sl
 800a09c:	10ad      	asrs	r5, r5, #2
 800a09e:	6125      	str	r5, [r4, #16]
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	f7fe f9a3 	bl	80083ec <__hi0bits>
 800a0a6:	016d      	lsls	r5, r5, #5
 800a0a8:	f8d8 6000 	ldr.w	r6, [r8]
 800a0ac:	1a2d      	subs	r5, r5, r0
 800a0ae:	42b5      	cmp	r5, r6
 800a0b0:	dd54      	ble.n	800a15c <__gethex+0x228>
 800a0b2:	1bad      	subs	r5, r5, r6
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7fe fd2f 	bl	8008b1a <__any_on>
 800a0bc:	4681      	mov	r9, r0
 800a0be:	b178      	cbz	r0, 800a0e0 <__gethex+0x1ac>
 800a0c0:	1e6b      	subs	r3, r5, #1
 800a0c2:	1159      	asrs	r1, r3, #5
 800a0c4:	f003 021f 	and.w	r2, r3, #31
 800a0c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0cc:	f04f 0901 	mov.w	r9, #1
 800a0d0:	fa09 f202 	lsl.w	r2, r9, r2
 800a0d4:	420a      	tst	r2, r1
 800a0d6:	d003      	beq.n	800a0e0 <__gethex+0x1ac>
 800a0d8:	454b      	cmp	r3, r9
 800a0da:	dc36      	bgt.n	800a14a <__gethex+0x216>
 800a0dc:	f04f 0902 	mov.w	r9, #2
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff febe 	bl	8009e64 <rshift>
 800a0e8:	442f      	add	r7, r5
 800a0ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ee:	42bb      	cmp	r3, r7
 800a0f0:	da42      	bge.n	800a178 <__gethex+0x244>
 800a0f2:	9801      	ldr	r0, [sp, #4]
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f7fe f8c7 	bl	8008288 <_Bfree>
 800a0fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	25a3      	movs	r5, #163	@ 0xa3
 800a102:	e793      	b.n	800a02c <__gethex+0xf8>
 800a104:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a108:	2a2e      	cmp	r2, #46	@ 0x2e
 800a10a:	d012      	beq.n	800a132 <__gethex+0x1fe>
 800a10c:	2b20      	cmp	r3, #32
 800a10e:	d104      	bne.n	800a11a <__gethex+0x1e6>
 800a110:	f845 bb04 	str.w	fp, [r5], #4
 800a114:	f04f 0b00 	mov.w	fp, #0
 800a118:	465b      	mov	r3, fp
 800a11a:	7830      	ldrb	r0, [r6, #0]
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	f7ff fef3 	bl	8009f08 <__hexdig_fun>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	f000 000f 	and.w	r0, r0, #15
 800a128:	4098      	lsls	r0, r3
 800a12a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a12e:	3304      	adds	r3, #4
 800a130:	e7ae      	b.n	800a090 <__gethex+0x15c>
 800a132:	45b1      	cmp	r9, r6
 800a134:	d8ea      	bhi.n	800a10c <__gethex+0x1d8>
 800a136:	492b      	ldr	r1, [pc, #172]	@ (800a1e4 <__gethex+0x2b0>)
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7ff fe11 	bl	8009d64 <strncmp>
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	2800      	cmp	r0, #0
 800a146:	d1e1      	bne.n	800a10c <__gethex+0x1d8>
 800a148:	e7a2      	b.n	800a090 <__gethex+0x15c>
 800a14a:	1ea9      	subs	r1, r5, #2
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7fe fce4 	bl	8008b1a <__any_on>
 800a152:	2800      	cmp	r0, #0
 800a154:	d0c2      	beq.n	800a0dc <__gethex+0x1a8>
 800a156:	f04f 0903 	mov.w	r9, #3
 800a15a:	e7c1      	b.n	800a0e0 <__gethex+0x1ac>
 800a15c:	da09      	bge.n	800a172 <__gethex+0x23e>
 800a15e:	1b75      	subs	r5, r6, r5
 800a160:	4621      	mov	r1, r4
 800a162:	9801      	ldr	r0, [sp, #4]
 800a164:	462a      	mov	r2, r5
 800a166:	f7fe fa9f 	bl	80086a8 <__lshift>
 800a16a:	1b7f      	subs	r7, r7, r5
 800a16c:	4604      	mov	r4, r0
 800a16e:	f100 0a14 	add.w	sl, r0, #20
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	e7b8      	b.n	800a0ea <__gethex+0x1b6>
 800a178:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a17c:	42bd      	cmp	r5, r7
 800a17e:	dd6f      	ble.n	800a260 <__gethex+0x32c>
 800a180:	1bed      	subs	r5, r5, r7
 800a182:	42ae      	cmp	r6, r5
 800a184:	dc34      	bgt.n	800a1f0 <__gethex+0x2bc>
 800a186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d022      	beq.n	800a1d4 <__gethex+0x2a0>
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d024      	beq.n	800a1dc <__gethex+0x2a8>
 800a192:	2b01      	cmp	r3, #1
 800a194:	d115      	bne.n	800a1c2 <__gethex+0x28e>
 800a196:	42ae      	cmp	r6, r5
 800a198:	d113      	bne.n	800a1c2 <__gethex+0x28e>
 800a19a:	2e01      	cmp	r6, #1
 800a19c:	d10b      	bne.n	800a1b6 <__gethex+0x282>
 800a19e:	9a02      	ldr	r2, [sp, #8]
 800a1a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	f8ca 3000 	str.w	r3, [sl]
 800a1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1b0:	2562      	movs	r5, #98	@ 0x62
 800a1b2:	601c      	str	r4, [r3, #0]
 800a1b4:	e73a      	b.n	800a02c <__gethex+0xf8>
 800a1b6:	1e71      	subs	r1, r6, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7fe fcae 	bl	8008b1a <__any_on>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1ed      	bne.n	800a19e <__gethex+0x26a>
 800a1c2:	9801      	ldr	r0, [sp, #4]
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	f7fe f85f 	bl	8008288 <_Bfree>
 800a1ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	2550      	movs	r5, #80	@ 0x50
 800a1d2:	e72b      	b.n	800a02c <__gethex+0xf8>
 800a1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f3      	bne.n	800a1c2 <__gethex+0x28e>
 800a1da:	e7e0      	b.n	800a19e <__gethex+0x26a>
 800a1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1dd      	bne.n	800a19e <__gethex+0x26a>
 800a1e2:	e7ee      	b.n	800a1c2 <__gethex+0x28e>
 800a1e4:	0800ab63 	.word	0x0800ab63
 800a1e8:	0800aaf9 	.word	0x0800aaf9
 800a1ec:	0800abba 	.word	0x0800abba
 800a1f0:	1e6f      	subs	r7, r5, #1
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	d130      	bne.n	800a25a <__gethex+0x326>
 800a1f8:	b127      	cbz	r7, 800a204 <__gethex+0x2d0>
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7fe fc8c 	bl	8008b1a <__any_on>
 800a202:	4681      	mov	r9, r0
 800a204:	117a      	asrs	r2, r7, #5
 800a206:	2301      	movs	r3, #1
 800a208:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a20c:	f007 071f 	and.w	r7, r7, #31
 800a210:	40bb      	lsls	r3, r7
 800a212:	4213      	tst	r3, r2
 800a214:	4629      	mov	r1, r5
 800a216:	4620      	mov	r0, r4
 800a218:	bf18      	it	ne
 800a21a:	f049 0902 	orrne.w	r9, r9, #2
 800a21e:	f7ff fe21 	bl	8009e64 <rshift>
 800a222:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a226:	1b76      	subs	r6, r6, r5
 800a228:	2502      	movs	r5, #2
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	d047      	beq.n	800a2c0 <__gethex+0x38c>
 800a230:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d015      	beq.n	800a264 <__gethex+0x330>
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d017      	beq.n	800a26c <__gethex+0x338>
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d109      	bne.n	800a254 <__gethex+0x320>
 800a240:	f019 0f02 	tst.w	r9, #2
 800a244:	d006      	beq.n	800a254 <__gethex+0x320>
 800a246:	f8da 3000 	ldr.w	r3, [sl]
 800a24a:	ea49 0903 	orr.w	r9, r9, r3
 800a24e:	f019 0f01 	tst.w	r9, #1
 800a252:	d10e      	bne.n	800a272 <__gethex+0x33e>
 800a254:	f045 0510 	orr.w	r5, r5, #16
 800a258:	e032      	b.n	800a2c0 <__gethex+0x38c>
 800a25a:	f04f 0901 	mov.w	r9, #1
 800a25e:	e7d1      	b.n	800a204 <__gethex+0x2d0>
 800a260:	2501      	movs	r5, #1
 800a262:	e7e2      	b.n	800a22a <__gethex+0x2f6>
 800a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a266:	f1c3 0301 	rsb	r3, r3, #1
 800a26a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f0      	beq.n	800a254 <__gethex+0x320>
 800a272:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a276:	f104 0314 	add.w	r3, r4, #20
 800a27a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a27e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a282:	f04f 0c00 	mov.w	ip, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f853 2b04 	ldr.w	r2, [r3], #4
 800a28c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a290:	d01b      	beq.n	800a2ca <__gethex+0x396>
 800a292:	3201      	adds	r2, #1
 800a294:	6002      	str	r2, [r0, #0]
 800a296:	2d02      	cmp	r5, #2
 800a298:	f104 0314 	add.w	r3, r4, #20
 800a29c:	d13c      	bne.n	800a318 <__gethex+0x3e4>
 800a29e:	f8d8 2000 	ldr.w	r2, [r8]
 800a2a2:	3a01      	subs	r2, #1
 800a2a4:	42b2      	cmp	r2, r6
 800a2a6:	d109      	bne.n	800a2bc <__gethex+0x388>
 800a2a8:	1171      	asrs	r1, r6, #5
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2b0:	f006 061f 	and.w	r6, r6, #31
 800a2b4:	fa02 f606 	lsl.w	r6, r2, r6
 800a2b8:	421e      	tst	r6, r3
 800a2ba:	d13a      	bne.n	800a332 <__gethex+0x3fe>
 800a2bc:	f045 0520 	orr.w	r5, r5, #32
 800a2c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2c2:	601c      	str	r4, [r3, #0]
 800a2c4:	9b02      	ldr	r3, [sp, #8]
 800a2c6:	601f      	str	r7, [r3, #0]
 800a2c8:	e6b0      	b.n	800a02c <__gethex+0xf8>
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2d0:	d8d9      	bhi.n	800a286 <__gethex+0x352>
 800a2d2:	68a3      	ldr	r3, [r4, #8]
 800a2d4:	459b      	cmp	fp, r3
 800a2d6:	db17      	blt.n	800a308 <__gethex+0x3d4>
 800a2d8:	6861      	ldr	r1, [r4, #4]
 800a2da:	9801      	ldr	r0, [sp, #4]
 800a2dc:	3101      	adds	r1, #1
 800a2de:	f7fd ff93 	bl	8008208 <_Balloc>
 800a2e2:	4681      	mov	r9, r0
 800a2e4:	b918      	cbnz	r0, 800a2ee <__gethex+0x3ba>
 800a2e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a350 <__gethex+0x41c>)
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	2184      	movs	r1, #132	@ 0x84
 800a2ec:	e6c5      	b.n	800a07a <__gethex+0x146>
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	f104 010c 	add.w	r1, r4, #12
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f7fd f818 	bl	800732e <memcpy>
 800a2fe:	4621      	mov	r1, r4
 800a300:	9801      	ldr	r0, [sp, #4]
 800a302:	f7fd ffc1 	bl	8008288 <_Bfree>
 800a306:	464c      	mov	r4, r9
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	1c5a      	adds	r2, r3, #1
 800a30c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a310:	6122      	str	r2, [r4, #16]
 800a312:	2201      	movs	r2, #1
 800a314:	615a      	str	r2, [r3, #20]
 800a316:	e7be      	b.n	800a296 <__gethex+0x362>
 800a318:	6922      	ldr	r2, [r4, #16]
 800a31a:	455a      	cmp	r2, fp
 800a31c:	dd0b      	ble.n	800a336 <__gethex+0x402>
 800a31e:	2101      	movs	r1, #1
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff fd9f 	bl	8009e64 <rshift>
 800a326:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a32a:	3701      	adds	r7, #1
 800a32c:	42bb      	cmp	r3, r7
 800a32e:	f6ff aee0 	blt.w	800a0f2 <__gethex+0x1be>
 800a332:	2501      	movs	r5, #1
 800a334:	e7c2      	b.n	800a2bc <__gethex+0x388>
 800a336:	f016 061f 	ands.w	r6, r6, #31
 800a33a:	d0fa      	beq.n	800a332 <__gethex+0x3fe>
 800a33c:	4453      	add	r3, sl
 800a33e:	f1c6 0620 	rsb	r6, r6, #32
 800a342:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a346:	f7fe f851 	bl	80083ec <__hi0bits>
 800a34a:	42b0      	cmp	r0, r6
 800a34c:	dbe7      	blt.n	800a31e <__gethex+0x3ea>
 800a34e:	e7f0      	b.n	800a332 <__gethex+0x3fe>
 800a350:	0800aaf9 	.word	0x0800aaf9

0800a354 <L_shift>:
 800a354:	f1c2 0208 	rsb	r2, r2, #8
 800a358:	0092      	lsls	r2, r2, #2
 800a35a:	b570      	push	{r4, r5, r6, lr}
 800a35c:	f1c2 0620 	rsb	r6, r2, #32
 800a360:	6843      	ldr	r3, [r0, #4]
 800a362:	6804      	ldr	r4, [r0, #0]
 800a364:	fa03 f506 	lsl.w	r5, r3, r6
 800a368:	432c      	orrs	r4, r5
 800a36a:	40d3      	lsrs	r3, r2
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a372:	4288      	cmp	r0, r1
 800a374:	d3f4      	bcc.n	800a360 <L_shift+0xc>
 800a376:	bd70      	pop	{r4, r5, r6, pc}

0800a378 <__match>:
 800a378:	b530      	push	{r4, r5, lr}
 800a37a:	6803      	ldr	r3, [r0, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a382:	b914      	cbnz	r4, 800a38a <__match+0x12>
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	2001      	movs	r0, #1
 800a388:	bd30      	pop	{r4, r5, pc}
 800a38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a392:	2d19      	cmp	r5, #25
 800a394:	bf98      	it	ls
 800a396:	3220      	addls	r2, #32
 800a398:	42a2      	cmp	r2, r4
 800a39a:	d0f0      	beq.n	800a37e <__match+0x6>
 800a39c:	2000      	movs	r0, #0
 800a39e:	e7f3      	b.n	800a388 <__match+0x10>

0800a3a0 <__hexnan>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	680b      	ldr	r3, [r1, #0]
 800a3a6:	6801      	ldr	r1, [r0, #0]
 800a3a8:	115e      	asrs	r6, r3, #5
 800a3aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3ae:	f013 031f 	ands.w	r3, r3, #31
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	bf18      	it	ne
 800a3b6:	3604      	addne	r6, #4
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	1f37      	subs	r7, r6, #4
 800a3bc:	4682      	mov	sl, r0
 800a3be:	4690      	mov	r8, r2
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3c6:	46b9      	mov	r9, r7
 800a3c8:	463c      	mov	r4, r7
 800a3ca:	9502      	str	r5, [sp, #8]
 800a3cc:	46ab      	mov	fp, r5
 800a3ce:	784a      	ldrb	r2, [r1, #1]
 800a3d0:	1c4b      	adds	r3, r1, #1
 800a3d2:	9303      	str	r3, [sp, #12]
 800a3d4:	b342      	cbz	r2, 800a428 <__hexnan+0x88>
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	9105      	str	r1, [sp, #20]
 800a3da:	9204      	str	r2, [sp, #16]
 800a3dc:	f7ff fd94 	bl	8009f08 <__hexdig_fun>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d151      	bne.n	800a488 <__hexnan+0xe8>
 800a3e4:	9a04      	ldr	r2, [sp, #16]
 800a3e6:	9905      	ldr	r1, [sp, #20]
 800a3e8:	2a20      	cmp	r2, #32
 800a3ea:	d818      	bhi.n	800a41e <__hexnan+0x7e>
 800a3ec:	9b02      	ldr	r3, [sp, #8]
 800a3ee:	459b      	cmp	fp, r3
 800a3f0:	dd13      	ble.n	800a41a <__hexnan+0x7a>
 800a3f2:	454c      	cmp	r4, r9
 800a3f4:	d206      	bcs.n	800a404 <__hexnan+0x64>
 800a3f6:	2d07      	cmp	r5, #7
 800a3f8:	dc04      	bgt.n	800a404 <__hexnan+0x64>
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7ff ffa8 	bl	800a354 <L_shift>
 800a404:	4544      	cmp	r4, r8
 800a406:	d952      	bls.n	800a4ae <__hexnan+0x10e>
 800a408:	2300      	movs	r3, #0
 800a40a:	f1a4 0904 	sub.w	r9, r4, #4
 800a40e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a412:	f8cd b008 	str.w	fp, [sp, #8]
 800a416:	464c      	mov	r4, r9
 800a418:	461d      	mov	r5, r3
 800a41a:	9903      	ldr	r1, [sp, #12]
 800a41c:	e7d7      	b.n	800a3ce <__hexnan+0x2e>
 800a41e:	2a29      	cmp	r2, #41	@ 0x29
 800a420:	d157      	bne.n	800a4d2 <__hexnan+0x132>
 800a422:	3102      	adds	r1, #2
 800a424:	f8ca 1000 	str.w	r1, [sl]
 800a428:	f1bb 0f00 	cmp.w	fp, #0
 800a42c:	d051      	beq.n	800a4d2 <__hexnan+0x132>
 800a42e:	454c      	cmp	r4, r9
 800a430:	d206      	bcs.n	800a440 <__hexnan+0xa0>
 800a432:	2d07      	cmp	r5, #7
 800a434:	dc04      	bgt.n	800a440 <__hexnan+0xa0>
 800a436:	462a      	mov	r2, r5
 800a438:	4649      	mov	r1, r9
 800a43a:	4620      	mov	r0, r4
 800a43c:	f7ff ff8a 	bl	800a354 <L_shift>
 800a440:	4544      	cmp	r4, r8
 800a442:	d936      	bls.n	800a4b2 <__hexnan+0x112>
 800a444:	f1a8 0204 	sub.w	r2, r8, #4
 800a448:	4623      	mov	r3, r4
 800a44a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a44e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a452:	429f      	cmp	r7, r3
 800a454:	d2f9      	bcs.n	800a44a <__hexnan+0xaa>
 800a456:	1b3b      	subs	r3, r7, r4
 800a458:	f023 0303 	bic.w	r3, r3, #3
 800a45c:	3304      	adds	r3, #4
 800a45e:	3401      	adds	r4, #1
 800a460:	3e03      	subs	r6, #3
 800a462:	42b4      	cmp	r4, r6
 800a464:	bf88      	it	hi
 800a466:	2304      	movhi	r3, #4
 800a468:	4443      	add	r3, r8
 800a46a:	2200      	movs	r2, #0
 800a46c:	f843 2b04 	str.w	r2, [r3], #4
 800a470:	429f      	cmp	r7, r3
 800a472:	d2fb      	bcs.n	800a46c <__hexnan+0xcc>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	b91b      	cbnz	r3, 800a480 <__hexnan+0xe0>
 800a478:	4547      	cmp	r7, r8
 800a47a:	d128      	bne.n	800a4ce <__hexnan+0x12e>
 800a47c:	2301      	movs	r3, #1
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	2005      	movs	r0, #5
 800a482:	b007      	add	sp, #28
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	3501      	adds	r5, #1
 800a48a:	2d08      	cmp	r5, #8
 800a48c:	f10b 0b01 	add.w	fp, fp, #1
 800a490:	dd06      	ble.n	800a4a0 <__hexnan+0x100>
 800a492:	4544      	cmp	r4, r8
 800a494:	d9c1      	bls.n	800a41a <__hexnan+0x7a>
 800a496:	2300      	movs	r3, #0
 800a498:	f844 3c04 	str.w	r3, [r4, #-4]
 800a49c:	2501      	movs	r5, #1
 800a49e:	3c04      	subs	r4, #4
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	f000 000f 	and.w	r0, r0, #15
 800a4a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4aa:	6020      	str	r0, [r4, #0]
 800a4ac:	e7b5      	b.n	800a41a <__hexnan+0x7a>
 800a4ae:	2508      	movs	r5, #8
 800a4b0:	e7b3      	b.n	800a41a <__hexnan+0x7a>
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0dd      	beq.n	800a474 <__hexnan+0xd4>
 800a4b8:	f1c3 0320 	rsb	r3, r3, #32
 800a4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c0:	40da      	lsrs	r2, r3
 800a4c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4cc:	e7d2      	b.n	800a474 <__hexnan+0xd4>
 800a4ce:	3f04      	subs	r7, #4
 800a4d0:	e7d0      	b.n	800a474 <__hexnan+0xd4>
 800a4d2:	2004      	movs	r0, #4
 800a4d4:	e7d5      	b.n	800a482 <__hexnan+0xe2>

0800a4d6 <__ascii_mbtowc>:
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	b901      	cbnz	r1, 800a4dc <__ascii_mbtowc+0x6>
 800a4da:	a901      	add	r1, sp, #4
 800a4dc:	b142      	cbz	r2, 800a4f0 <__ascii_mbtowc+0x1a>
 800a4de:	b14b      	cbz	r3, 800a4f4 <__ascii_mbtowc+0x1e>
 800a4e0:	7813      	ldrb	r3, [r2, #0]
 800a4e2:	600b      	str	r3, [r1, #0]
 800a4e4:	7812      	ldrb	r2, [r2, #0]
 800a4e6:	1e10      	subs	r0, r2, #0
 800a4e8:	bf18      	it	ne
 800a4ea:	2001      	movne	r0, #1
 800a4ec:	b002      	add	sp, #8
 800a4ee:	4770      	bx	lr
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	e7fb      	b.n	800a4ec <__ascii_mbtowc+0x16>
 800a4f4:	f06f 0001 	mvn.w	r0, #1
 800a4f8:	e7f8      	b.n	800a4ec <__ascii_mbtowc+0x16>

0800a4fa <_realloc_r>:
 800a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fe:	4607      	mov	r7, r0
 800a500:	4614      	mov	r4, r2
 800a502:	460d      	mov	r5, r1
 800a504:	b921      	cbnz	r1, 800a510 <_realloc_r+0x16>
 800a506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	4611      	mov	r1, r2
 800a50c:	f7fd bdf0 	b.w	80080f0 <_malloc_r>
 800a510:	b92a      	cbnz	r2, 800a51e <_realloc_r+0x24>
 800a512:	f7fd fd79 	bl	8008008 <_free_r>
 800a516:	4625      	mov	r5, r4
 800a518:	4628      	mov	r0, r5
 800a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51e:	f000 f840 	bl	800a5a2 <_malloc_usable_size_r>
 800a522:	4284      	cmp	r4, r0
 800a524:	4606      	mov	r6, r0
 800a526:	d802      	bhi.n	800a52e <_realloc_r+0x34>
 800a528:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a52c:	d8f4      	bhi.n	800a518 <_realloc_r+0x1e>
 800a52e:	4621      	mov	r1, r4
 800a530:	4638      	mov	r0, r7
 800a532:	f7fd fddd 	bl	80080f0 <_malloc_r>
 800a536:	4680      	mov	r8, r0
 800a538:	b908      	cbnz	r0, 800a53e <_realloc_r+0x44>
 800a53a:	4645      	mov	r5, r8
 800a53c:	e7ec      	b.n	800a518 <_realloc_r+0x1e>
 800a53e:	42b4      	cmp	r4, r6
 800a540:	4622      	mov	r2, r4
 800a542:	4629      	mov	r1, r5
 800a544:	bf28      	it	cs
 800a546:	4632      	movcs	r2, r6
 800a548:	f7fc fef1 	bl	800732e <memcpy>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4638      	mov	r0, r7
 800a550:	f7fd fd5a 	bl	8008008 <_free_r>
 800a554:	e7f1      	b.n	800a53a <_realloc_r+0x40>

0800a556 <__ascii_wctomb>:
 800a556:	4603      	mov	r3, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	b141      	cbz	r1, 800a56e <__ascii_wctomb+0x18>
 800a55c:	2aff      	cmp	r2, #255	@ 0xff
 800a55e:	d904      	bls.n	800a56a <__ascii_wctomb+0x14>
 800a560:	228a      	movs	r2, #138	@ 0x8a
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	f04f 30ff 	mov.w	r0, #4294967295
 800a568:	4770      	bx	lr
 800a56a:	700a      	strb	r2, [r1, #0]
 800a56c:	2001      	movs	r0, #1
 800a56e:	4770      	bx	lr

0800a570 <fiprintf>:
 800a570:	b40e      	push	{r1, r2, r3}
 800a572:	b503      	push	{r0, r1, lr}
 800a574:	4601      	mov	r1, r0
 800a576:	ab03      	add	r3, sp, #12
 800a578:	4805      	ldr	r0, [pc, #20]	@ (800a590 <fiprintf+0x20>)
 800a57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57e:	6800      	ldr	r0, [r0, #0]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	f000 f83f 	bl	800a604 <_vfiprintf_r>
 800a586:	b002      	add	sp, #8
 800a588:	f85d eb04 	ldr.w	lr, [sp], #4
 800a58c:	b003      	add	sp, #12
 800a58e:	4770      	bx	lr
 800a590:	2000002c 	.word	0x2000002c

0800a594 <abort>:
 800a594:	b508      	push	{r3, lr}
 800a596:	2006      	movs	r0, #6
 800a598:	f000 f974 	bl	800a884 <raise>
 800a59c:	2001      	movs	r0, #1
 800a59e:	f7f7 fac5 	bl	8001b2c <_exit>

0800a5a2 <_malloc_usable_size_r>:
 800a5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a6:	1f18      	subs	r0, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfbc      	itt	lt
 800a5ac:	580b      	ldrlt	r3, [r1, r0]
 800a5ae:	18c0      	addlt	r0, r0, r3
 800a5b0:	4770      	bx	lr

0800a5b2 <__sfputc_r>:
 800a5b2:	6893      	ldr	r3, [r2, #8]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	b410      	push	{r4}
 800a5ba:	6093      	str	r3, [r2, #8]
 800a5bc:	da08      	bge.n	800a5d0 <__sfputc_r+0x1e>
 800a5be:	6994      	ldr	r4, [r2, #24]
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	db01      	blt.n	800a5c8 <__sfputc_r+0x16>
 800a5c4:	290a      	cmp	r1, #10
 800a5c6:	d103      	bne.n	800a5d0 <__sfputc_r+0x1e>
 800a5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5cc:	f7fc bd9b 	b.w	8007106 <__swbuf_r>
 800a5d0:	6813      	ldr	r3, [r2, #0]
 800a5d2:	1c58      	adds	r0, r3, #1
 800a5d4:	6010      	str	r0, [r2, #0]
 800a5d6:	7019      	strb	r1, [r3, #0]
 800a5d8:	4608      	mov	r0, r1
 800a5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <__sfputs_r>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	18d5      	adds	r5, r2, r3
 800a5ea:	42ac      	cmp	r4, r5
 800a5ec:	d101      	bne.n	800a5f2 <__sfputs_r+0x12>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e007      	b.n	800a602 <__sfputs_r+0x22>
 800a5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7ff ffda 	bl	800a5b2 <__sfputc_r>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d1f3      	bne.n	800a5ea <__sfputs_r+0xa>
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a604 <_vfiprintf_r>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	460d      	mov	r5, r1
 800a60a:	b09d      	sub	sp, #116	@ 0x74
 800a60c:	4614      	mov	r4, r2
 800a60e:	4698      	mov	r8, r3
 800a610:	4606      	mov	r6, r0
 800a612:	b118      	cbz	r0, 800a61c <_vfiprintf_r+0x18>
 800a614:	6a03      	ldr	r3, [r0, #32]
 800a616:	b90b      	cbnz	r3, 800a61c <_vfiprintf_r+0x18>
 800a618:	f7fc fc7c 	bl	8006f14 <__sinit>
 800a61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a61e:	07d9      	lsls	r1, r3, #31
 800a620:	d405      	bmi.n	800a62e <_vfiprintf_r+0x2a>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	059a      	lsls	r2, r3, #22
 800a626:	d402      	bmi.n	800a62e <_vfiprintf_r+0x2a>
 800a628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a62a:	f7fc fe7e 	bl	800732a <__retarget_lock_acquire_recursive>
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	071b      	lsls	r3, r3, #28
 800a632:	d501      	bpl.n	800a638 <_vfiprintf_r+0x34>
 800a634:	692b      	ldr	r3, [r5, #16]
 800a636:	b99b      	cbnz	r3, 800a660 <_vfiprintf_r+0x5c>
 800a638:	4629      	mov	r1, r5
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7fc fda2 	bl	8007184 <__swsetup_r>
 800a640:	b170      	cbz	r0, 800a660 <_vfiprintf_r+0x5c>
 800a642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a644:	07dc      	lsls	r4, r3, #31
 800a646:	d504      	bpl.n	800a652 <_vfiprintf_r+0x4e>
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	b01d      	add	sp, #116	@ 0x74
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	0598      	lsls	r0, r3, #22
 800a656:	d4f7      	bmi.n	800a648 <_vfiprintf_r+0x44>
 800a658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a65a:	f7fc fe67 	bl	800732c <__retarget_lock_release_recursive>
 800a65e:	e7f3      	b.n	800a648 <_vfiprintf_r+0x44>
 800a660:	2300      	movs	r3, #0
 800a662:	9309      	str	r3, [sp, #36]	@ 0x24
 800a664:	2320      	movs	r3, #32
 800a666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a66a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a66e:	2330      	movs	r3, #48	@ 0x30
 800a670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a820 <_vfiprintf_r+0x21c>
 800a674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a678:	f04f 0901 	mov.w	r9, #1
 800a67c:	4623      	mov	r3, r4
 800a67e:	469a      	mov	sl, r3
 800a680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a684:	b10a      	cbz	r2, 800a68a <_vfiprintf_r+0x86>
 800a686:	2a25      	cmp	r2, #37	@ 0x25
 800a688:	d1f9      	bne.n	800a67e <_vfiprintf_r+0x7a>
 800a68a:	ebba 0b04 	subs.w	fp, sl, r4
 800a68e:	d00b      	beq.n	800a6a8 <_vfiprintf_r+0xa4>
 800a690:	465b      	mov	r3, fp
 800a692:	4622      	mov	r2, r4
 800a694:	4629      	mov	r1, r5
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff ffa2 	bl	800a5e0 <__sfputs_r>
 800a69c:	3001      	adds	r0, #1
 800a69e:	f000 80a7 	beq.w	800a7f0 <_vfiprintf_r+0x1ec>
 800a6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6a4:	445a      	add	r2, fp
 800a6a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 809f 	beq.w	800a7f0 <_vfiprintf_r+0x1ec>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6bc:	f10a 0a01 	add.w	sl, sl, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	9307      	str	r3, [sp, #28]
 800a6c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6ca:	4654      	mov	r4, sl
 800a6cc:	2205      	movs	r2, #5
 800a6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d2:	4853      	ldr	r0, [pc, #332]	@ (800a820 <_vfiprintf_r+0x21c>)
 800a6d4:	f7f5 fda4 	bl	8000220 <memchr>
 800a6d8:	9a04      	ldr	r2, [sp, #16]
 800a6da:	b9d8      	cbnz	r0, 800a714 <_vfiprintf_r+0x110>
 800a6dc:	06d1      	lsls	r1, r2, #27
 800a6de:	bf44      	itt	mi
 800a6e0:	2320      	movmi	r3, #32
 800a6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6e6:	0713      	lsls	r3, r2, #28
 800a6e8:	bf44      	itt	mi
 800a6ea:	232b      	movmi	r3, #43	@ 0x2b
 800a6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6f6:	d015      	beq.n	800a724 <_vfiprintf_r+0x120>
 800a6f8:	9a07      	ldr	r2, [sp, #28]
 800a6fa:	4654      	mov	r4, sl
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f04f 0c0a 	mov.w	ip, #10
 800a702:	4621      	mov	r1, r4
 800a704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a708:	3b30      	subs	r3, #48	@ 0x30
 800a70a:	2b09      	cmp	r3, #9
 800a70c:	d94b      	bls.n	800a7a6 <_vfiprintf_r+0x1a2>
 800a70e:	b1b0      	cbz	r0, 800a73e <_vfiprintf_r+0x13a>
 800a710:	9207      	str	r2, [sp, #28]
 800a712:	e014      	b.n	800a73e <_vfiprintf_r+0x13a>
 800a714:	eba0 0308 	sub.w	r3, r0, r8
 800a718:	fa09 f303 	lsl.w	r3, r9, r3
 800a71c:	4313      	orrs	r3, r2
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	46a2      	mov	sl, r4
 800a722:	e7d2      	b.n	800a6ca <_vfiprintf_r+0xc6>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	1d19      	adds	r1, r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	9103      	str	r1, [sp, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfbb      	ittet	lt
 800a730:	425b      	neglt	r3, r3
 800a732:	f042 0202 	orrlt.w	r2, r2, #2
 800a736:	9307      	strge	r3, [sp, #28]
 800a738:	9307      	strlt	r3, [sp, #28]
 800a73a:	bfb8      	it	lt
 800a73c:	9204      	strlt	r2, [sp, #16]
 800a73e:	7823      	ldrb	r3, [r4, #0]
 800a740:	2b2e      	cmp	r3, #46	@ 0x2e
 800a742:	d10a      	bne.n	800a75a <_vfiprintf_r+0x156>
 800a744:	7863      	ldrb	r3, [r4, #1]
 800a746:	2b2a      	cmp	r3, #42	@ 0x2a
 800a748:	d132      	bne.n	800a7b0 <_vfiprintf_r+0x1ac>
 800a74a:	9b03      	ldr	r3, [sp, #12]
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	9203      	str	r2, [sp, #12]
 800a752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a756:	3402      	adds	r4, #2
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a830 <_vfiprintf_r+0x22c>
 800a75e:	7821      	ldrb	r1, [r4, #0]
 800a760:	2203      	movs	r2, #3
 800a762:	4650      	mov	r0, sl
 800a764:	f7f5 fd5c 	bl	8000220 <memchr>
 800a768:	b138      	cbz	r0, 800a77a <_vfiprintf_r+0x176>
 800a76a:	9b04      	ldr	r3, [sp, #16]
 800a76c:	eba0 000a 	sub.w	r0, r0, sl
 800a770:	2240      	movs	r2, #64	@ 0x40
 800a772:	4082      	lsls	r2, r0
 800a774:	4313      	orrs	r3, r2
 800a776:	3401      	adds	r4, #1
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4829      	ldr	r0, [pc, #164]	@ (800a824 <_vfiprintf_r+0x220>)
 800a780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a784:	2206      	movs	r2, #6
 800a786:	f7f5 fd4b 	bl	8000220 <memchr>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d03f      	beq.n	800a80e <_vfiprintf_r+0x20a>
 800a78e:	4b26      	ldr	r3, [pc, #152]	@ (800a828 <_vfiprintf_r+0x224>)
 800a790:	bb1b      	cbnz	r3, 800a7da <_vfiprintf_r+0x1d6>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	3307      	adds	r3, #7
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	3308      	adds	r3, #8
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a0:	443b      	add	r3, r7
 800a7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a4:	e76a      	b.n	800a67c <_vfiprintf_r+0x78>
 800a7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	e7a8      	b.n	800a702 <_vfiprintf_r+0xfe>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	f04f 0c0a 	mov.w	ip, #10
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c2:	3a30      	subs	r2, #48	@ 0x30
 800a7c4:	2a09      	cmp	r2, #9
 800a7c6:	d903      	bls.n	800a7d0 <_vfiprintf_r+0x1cc>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0c6      	beq.n	800a75a <_vfiprintf_r+0x156>
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	e7c4      	b.n	800a75a <_vfiprintf_r+0x156>
 800a7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e7f0      	b.n	800a7bc <_vfiprintf_r+0x1b8>
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4b12      	ldr	r3, [pc, #72]	@ (800a82c <_vfiprintf_r+0x228>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7fb fd45 	bl	8006274 <_printf_float>
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	1c78      	adds	r0, r7, #1
 800a7ee:	d1d6      	bne.n	800a79e <_vfiprintf_r+0x19a>
 800a7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7f2:	07d9      	lsls	r1, r3, #31
 800a7f4:	d405      	bmi.n	800a802 <_vfiprintf_r+0x1fe>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	059a      	lsls	r2, r3, #22
 800a7fa:	d402      	bmi.n	800a802 <_vfiprintf_r+0x1fe>
 800a7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7fe:	f7fc fd95 	bl	800732c <__retarget_lock_release_recursive>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	065b      	lsls	r3, r3, #25
 800a806:	f53f af1f 	bmi.w	800a648 <_vfiprintf_r+0x44>
 800a80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a80c:	e71e      	b.n	800a64c <_vfiprintf_r+0x48>
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	462a      	mov	r2, r5
 800a814:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <_vfiprintf_r+0x228>)
 800a816:	a904      	add	r1, sp, #16
 800a818:	4630      	mov	r0, r6
 800a81a:	f7fb ffc3 	bl	80067a4 <_printf_i>
 800a81e:	e7e4      	b.n	800a7ea <_vfiprintf_r+0x1e6>
 800a820:	0800ab65 	.word	0x0800ab65
 800a824:	0800ab6f 	.word	0x0800ab6f
 800a828:	08006275 	.word	0x08006275
 800a82c:	0800a5e1 	.word	0x0800a5e1
 800a830:	0800ab6b 	.word	0x0800ab6b

0800a834 <_raise_r>:
 800a834:	291f      	cmp	r1, #31
 800a836:	b538      	push	{r3, r4, r5, lr}
 800a838:	4605      	mov	r5, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	d904      	bls.n	800a848 <_raise_r+0x14>
 800a83e:	2316      	movs	r3, #22
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a84a:	b112      	cbz	r2, 800a852 <_raise_r+0x1e>
 800a84c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a850:	b94b      	cbnz	r3, 800a866 <_raise_r+0x32>
 800a852:	4628      	mov	r0, r5
 800a854:	f000 f830 	bl	800a8b8 <_getpid_r>
 800a858:	4622      	mov	r2, r4
 800a85a:	4601      	mov	r1, r0
 800a85c:	4628      	mov	r0, r5
 800a85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a862:	f000 b817 	b.w	800a894 <_kill_r>
 800a866:	2b01      	cmp	r3, #1
 800a868:	d00a      	beq.n	800a880 <_raise_r+0x4c>
 800a86a:	1c59      	adds	r1, r3, #1
 800a86c:	d103      	bne.n	800a876 <_raise_r+0x42>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	2001      	movs	r0, #1
 800a874:	e7e7      	b.n	800a846 <_raise_r+0x12>
 800a876:	2100      	movs	r1, #0
 800a878:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a87c:	4620      	mov	r0, r4
 800a87e:	4798      	blx	r3
 800a880:	2000      	movs	r0, #0
 800a882:	e7e0      	b.n	800a846 <_raise_r+0x12>

0800a884 <raise>:
 800a884:	4b02      	ldr	r3, [pc, #8]	@ (800a890 <raise+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f7ff bfd3 	b.w	800a834 <_raise_r>
 800a88e:	bf00      	nop
 800a890:	2000002c 	.word	0x2000002c

0800a894 <_kill_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d07      	ldr	r5, [pc, #28]	@ (800a8b4 <_kill_r+0x20>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	f7f7 f933 	bl	8001b0c <_kill>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	d102      	bne.n	800a8b0 <_kill_r+0x1c>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	b103      	cbz	r3, 800a8b0 <_kill_r+0x1c>
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	bd38      	pop	{r3, r4, r5, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000056c 	.word	0x2000056c

0800a8b8 <_getpid_r>:
 800a8b8:	f7f7 b920 	b.w	8001afc <_getpid>

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
